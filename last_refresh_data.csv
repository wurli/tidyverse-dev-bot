package,bullets_level,bullet_id,section_id,is_codeblock,text,parent_text
broom,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
broom,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
broom,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
broom,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
broom,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
broom,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
broom,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
broom,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
broom,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
broom,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
broom,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
broom,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
broom,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
broom,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
broom,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
broom,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
broom,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
broom,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
broom,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
broom,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
broom,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
broom,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
broom,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
broom,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
broom,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
broom,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
broom,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
broom,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
broom,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
broom,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
broom,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
broom,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
broom,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
broom,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
broom,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
broom,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
broom,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
broom,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
broom,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
broom,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
broom,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
broom,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
broom,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
broom,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
broom,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
broom,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
broom,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
broom,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
broom,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
broom,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
broom,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
broom,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
broom,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
broom,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
broom,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
broom,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
broom,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
broom,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
broom,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
broom,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
broom,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
broom,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
broom,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
broom,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
broom,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
broom,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
broom,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
broom,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
broom,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
broom,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
broom,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
broom,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
broom,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
broom,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
broom,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
broom,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
broom,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
broom,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
broom,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
broom,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
broom,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
broom,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
broom,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
broom,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
broom,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
broom,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
broom,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
broom,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
broom,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
broom,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
broom,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
broom,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
broom,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
broom,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
broom,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
broom,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
broom,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
broom,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
broom,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
broom,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
broom,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
broom,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
broom,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
broom,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
broom,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
broom,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
broom,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
broom,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
broom,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
broom,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
broom,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
broom,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
broom,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
broom,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
broom,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
broom,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
broom,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
broom,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
broom,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
broom,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
broom,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
broom,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
broom,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
broom,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
broom,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
broom,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
broom,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
broom,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
broom,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
broom,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
broom,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
broom,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
broom,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
broom,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
broom,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
broom,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
broom,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
broom,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
broom,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
broom,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
broom,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
broom,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
broom,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
broom,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
broom,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
broom,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
broom,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
broom,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
broom,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
broom,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
broom,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
broom,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
broom,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
broom,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
broom,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
broom,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
broom,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
broom,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
broom,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
broom,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
broom,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
broom,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
broom,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
broom,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
broom,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
broom,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
broom,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
broom,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
broom,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
broom,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
broom,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
broom,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
broom,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
broom,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
broom,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
broom,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
broom,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
broom,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
broom,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
broom,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
broom,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
broom,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
broom,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
broom,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
broom,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
broom,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
broom,1,178,183,FALSE,`obj_address()` is now exported.,NA
broom,1,179,184,FALSE,`%<~%` now actually works.,NA
broom,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
broom,1,182,187,FALSE,Fix for CRAN checks.,NA
broom,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
broom,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
broom,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
broom,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
broom,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
broom,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
broom,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
broom,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
broom,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
broom,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
broom,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
broom,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
broom,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
broom,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
broom,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
broom,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
broom,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
broom,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
broom,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
broom,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
broom,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
broom,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
broom,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
broom,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
broom,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
broom,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
broom,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
broom,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
broom,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
broom,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
broom,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
broom,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
broom,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
broom,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
broom,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
broom,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
broom,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
broom,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
broom,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
broom,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
broom,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
broom,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
broom,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
broom,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
broom,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
broom,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
broom,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
broom,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
broom,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
broom,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
broom,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
broom,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
broom,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
broom,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
broom,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
broom,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
broom,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
broom,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
broom,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
broom,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
broom,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
broom,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
broom,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
broom,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
broom,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
broom,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
broom,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
broom,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
broom,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
broom,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
broom,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
broom,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
broom,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
broom,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
broom,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
broom,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
broom,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
broom,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
broom,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
broom,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
broom,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
broom,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
broom,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
broom,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
broom,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
broom,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
broom,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
broom,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
broom,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
broom,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
broom,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
broom,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
broom,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
broom,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
broom,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
broom,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
broom,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
broom,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
broom,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
broom,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
broom,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
broom,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
broom,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
broom,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
broom,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
broom,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
broom,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
broom,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
broom,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
broom,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
broom,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
broom,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
broom,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
broom,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
broom,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
broom,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
broom,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
broom,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
broom,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
broom,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
broom,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
broom,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
broom,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
broom,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
broom,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
broom,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
broom,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
broom,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
broom,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
broom,1,307,321,FALSE,This handler also works as a calling handler:,NA
broom,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
broom,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
broom,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
broom,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
broom,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
broom,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
broom,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
broom,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
broom,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
broom,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
broom,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
broom,1,316,332,FALSE,`calling()` now boxes its argument.,NA
broom,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
broom,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
broom,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
broom,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
broom,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
broom,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
broom,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
broom,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
broom,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
broom,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
broom,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
broom,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
broom,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
broom,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
broom,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
broom,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
broom,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
broom,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
broom,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
broom,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
broom,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
broom,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
broom,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
broom,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
broom,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
broom,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
broom,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
broom,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
broom,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
broom,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
broom,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
broom,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
broom,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
broom,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
broom,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
broom,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
broom,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
broom,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
broom,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
broom,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
broom,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
broom,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
broom,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
broom,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
broom,1,357,375,FALSE,`!!!` disallows:,NA
broom,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
broom,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
broom,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
broom,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
broom,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
broom,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
broom,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
broom,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
broom,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
broom,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
broom,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
broom,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
broom,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
broom,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
broom,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
broom,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
broom,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
broom,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
broom,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
broom,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
broom,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
broom,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
broom,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
broom,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
broom,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
broom,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
broom,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
broom,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
broom,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
broom,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
broom,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
broom,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
broom,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
broom,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
broom,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
broom,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
broom,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
broom,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
broom,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
broom,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
broom,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
broom,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
broom,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
broom,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
broom,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
broom,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
broom,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
broom,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
broom,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
broom,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
broom,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
broom,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
broom,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
broom,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
broom,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
broom,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
broom,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
broom,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
broom,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
broom,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
broom,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
broom,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
broom,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
broom,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
broom,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
broom,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
broom,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
broom,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
broom,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
broom,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
broom,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
broom,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
broom,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
broom,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
broom,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
broom,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
broom,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
broom,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
broom,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
broom,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
broom,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
broom,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
broom,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
broom,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
broom,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
broom,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
broom,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
broom,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
broom,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
broom,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
broom,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
broom,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
broom,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
broom,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
broom,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
broom,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
broom,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
broom,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
broom,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
broom,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
broom,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
broom,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
broom,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
broom,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
broom,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
broom,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
broom,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
broom,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
broom,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
broom,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
broom,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
broom,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
broom,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
broom,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
broom,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
broom,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
broom,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
broom,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
broom,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
broom,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
broom,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
broom,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
broom,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
broom,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
broom,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
broom,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
broom,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
broom,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
broom,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
broom,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
broom,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
broom,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
broom,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
broom,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
broom,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
broom,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
broom,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
broom,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
broom,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
broom,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
broom,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
broom,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
broom,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
broom,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
broom,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
broom,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
broom,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
broom,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
broom,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
broom,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
broom,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
broom,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
broom,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
broom,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
broom,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
broom,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
broom,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
broom,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
broom,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
broom,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
broom,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
broom,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
broom,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
broom,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
broom,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
broom,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
broom,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
broom,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
broom,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
broom,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
broom,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
broom,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
broom,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
broom,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
broom,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
broom,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
broom,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
broom,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
broom,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
broom,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
cli,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
cli,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
cli,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
cli,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
cli,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
cli,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
cli,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
cli,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
cli,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
cli,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
cli,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
cli,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
cli,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
cli,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
cli,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
cli,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
cli,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
cli,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
cli,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
cli,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
cli,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
cli,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
cli,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
cli,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
cli,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
cli,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
cli,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
cli,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
cli,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
cli,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
cli,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
cli,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
cli,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
cli,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
cli,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
cli,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
cli,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
cli,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
cli,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
cli,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
cli,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
cli,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
cli,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
cli,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
cli,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
cli,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
cli,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
cli,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
cli,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
cli,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
cli,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
cli,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
cli,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
cli,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
cli,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
cli,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
cli,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
cli,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
cli,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
cli,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
cli,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
cli,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
cli,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
cli,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
cli,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
cli,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
cli,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
cli,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
cli,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
cli,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
cli,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
cli,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
cli,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
cli,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
cli,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
cli,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
cli,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
cli,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
cli,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
cli,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
cli,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
cli,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
cli,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
cli,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
cli,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
cli,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
cli,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
cli,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
cli,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
cli,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
cli,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
cli,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
cli,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
cli,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
cli,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
cli,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
cli,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
cli,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
cli,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
cli,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
cli,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
cli,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
cli,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
cli,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
cli,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
cli,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
cli,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
cli,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
cli,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
cli,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
cli,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
cli,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
cli,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
cli,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
cli,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
cli,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
cli,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
cli,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
cli,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
cli,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
cli,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
cli,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
cli,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
cli,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
cli,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
cli,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
cli,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
cli,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
cli,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
cli,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
cli,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
cli,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
cli,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
cli,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
cli,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
cli,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
cli,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
cli,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
cli,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
cli,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
cli,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
cli,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
cli,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
cli,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
cli,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
cli,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
cli,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
cli,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
cli,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
cli,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
cli,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
cli,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
cli,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
cli,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
cli,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
cli,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
cli,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
cli,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
cli,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
cli,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
cli,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
cli,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
cli,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
cli,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
cli,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
cli,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
cli,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
cli,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
cli,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
cli,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
cli,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
cli,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
cli,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
cli,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
cli,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
cli,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
cli,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
cli,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
cli,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
cli,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
cli,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
cli,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
cli,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
cli,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
cli,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
cli,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
cli,1,178,183,FALSE,`obj_address()` is now exported.,NA
cli,1,179,184,FALSE,`%<~%` now actually works.,NA
cli,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
cli,1,182,187,FALSE,Fix for CRAN checks.,NA
cli,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
cli,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
cli,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
cli,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
cli,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
cli,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
cli,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
cli,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
cli,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
cli,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
cli,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
cli,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
cli,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
cli,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
cli,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
cli,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
cli,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
cli,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
cli,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
cli,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
cli,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
cli,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
cli,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
cli,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
cli,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
cli,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
cli,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
cli,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
cli,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
cli,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
cli,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
cli,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
cli,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
cli,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
cli,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
cli,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
cli,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
cli,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
cli,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
cli,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
cli,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
cli,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
cli,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
cli,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
cli,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
cli,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
cli,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
cli,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
cli,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
cli,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
cli,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
cli,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
cli,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
cli,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
cli,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
cli,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
cli,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
cli,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
cli,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
cli,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
cli,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
cli,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
cli,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
cli,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
cli,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
cli,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
cli,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
cli,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
cli,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
cli,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
cli,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
cli,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
cli,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
cli,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
cli,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
cli,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
cli,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
cli,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
cli,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
cli,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
cli,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
cli,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
cli,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
cli,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
cli,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
cli,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
cli,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
cli,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
cli,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
cli,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
cli,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
cli,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
cli,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
cli,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
cli,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
cli,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
cli,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
cli,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
cli,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
cli,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
cli,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
cli,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
cli,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
cli,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
cli,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
cli,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
cli,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
cli,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
cli,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
cli,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
cli,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
cli,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
cli,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
cli,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
cli,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
cli,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
cli,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
cli,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
cli,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
cli,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
cli,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
cli,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
cli,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
cli,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
cli,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
cli,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
cli,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
cli,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
cli,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
cli,1,307,321,FALSE,This handler also works as a calling handler:,NA
cli,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
cli,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
cli,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
cli,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
cli,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
cli,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
cli,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
cli,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
cli,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
cli,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
cli,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
cli,1,316,332,FALSE,`calling()` now boxes its argument.,NA
cli,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
cli,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
cli,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
cli,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
cli,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
cli,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
cli,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
cli,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
cli,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
cli,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
cli,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
cli,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
cli,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
cli,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
cli,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
cli,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
cli,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
cli,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
cli,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
cli,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
cli,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
cli,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
cli,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
cli,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
cli,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
cli,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
cli,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
cli,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
cli,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
cli,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
cli,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
cli,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
cli,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
cli,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
cli,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
cli,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
cli,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
cli,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
cli,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
cli,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
cli,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
cli,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
cli,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
cli,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
cli,1,357,375,FALSE,`!!!` disallows:,NA
cli,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
cli,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
cli,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
cli,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
cli,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
cli,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
cli,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
cli,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
cli,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
cli,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
cli,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
cli,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
cli,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
cli,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
cli,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
cli,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
cli,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
cli,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
cli,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
cli,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
cli,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
cli,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
cli,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
cli,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
cli,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
cli,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
cli,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
cli,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
cli,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
cli,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
cli,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
cli,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
cli,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
cli,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
cli,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
cli,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
cli,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
cli,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
cli,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
cli,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
cli,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
cli,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
cli,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
cli,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
cli,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
cli,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
cli,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
cli,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
cli,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
cli,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
cli,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
cli,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
cli,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
cli,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
cli,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
cli,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
cli,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
cli,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
cli,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
cli,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
cli,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
cli,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
cli,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
cli,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
cli,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
cli,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
cli,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
cli,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
cli,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
cli,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
cli,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
cli,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
cli,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
cli,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
cli,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
cli,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
cli,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
cli,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
cli,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
cli,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
cli,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
cli,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
cli,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
cli,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
cli,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
cli,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
cli,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
cli,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
cli,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
cli,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
cli,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
cli,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
cli,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
cli,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
cli,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
cli,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
cli,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
cli,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
cli,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
cli,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
cli,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
cli,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
cli,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
cli,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
cli,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
cli,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
cli,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
cli,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
cli,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
cli,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
cli,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
cli,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
cli,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
cli,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
cli,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
cli,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
cli,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
cli,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
cli,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
cli,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
cli,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
cli,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
cli,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
cli,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
cli,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
cli,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
cli,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
cli,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
cli,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
cli,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
cli,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
cli,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
cli,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
cli,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
cli,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
cli,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
cli,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
cli,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
cli,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
cli,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
cli,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
cli,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
cli,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
cli,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
cli,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
cli,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
cli,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
cli,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
cli,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
cli,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
cli,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
cli,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
cli,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
cli,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
cli,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
cli,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
cli,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
cli,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
cli,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
cli,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
cli,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
cli,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
cli,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
cli,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
cli,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
cli,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
cli,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
cli,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
cli,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
cli,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
cli,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
cli,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
cli,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
cli,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
cli,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
cli,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
cli,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
cli,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
cli,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
cli,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
crayon,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
crayon,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
crayon,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
crayon,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
crayon,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
crayon,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
crayon,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
crayon,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
crayon,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
crayon,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
crayon,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
crayon,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
crayon,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
crayon,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
crayon,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
crayon,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
crayon,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
crayon,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
crayon,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
crayon,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
crayon,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
crayon,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
crayon,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
crayon,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
crayon,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
crayon,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
crayon,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
crayon,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
crayon,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
crayon,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
crayon,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
crayon,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
crayon,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
crayon,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
crayon,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
crayon,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
crayon,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
crayon,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
crayon,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
crayon,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
crayon,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
crayon,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
crayon,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
crayon,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
crayon,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
crayon,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
crayon,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
crayon,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
crayon,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
crayon,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
crayon,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
crayon,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
crayon,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
crayon,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
crayon,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
crayon,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
crayon,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
crayon,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
crayon,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
crayon,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
crayon,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
crayon,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
crayon,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
crayon,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
crayon,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
crayon,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
crayon,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
crayon,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
crayon,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
crayon,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
crayon,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
crayon,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
crayon,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
crayon,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
crayon,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
crayon,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
crayon,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
crayon,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
crayon,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
crayon,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
crayon,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
crayon,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
crayon,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
crayon,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
crayon,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
crayon,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
crayon,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
crayon,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
crayon,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
crayon,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
crayon,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
crayon,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
crayon,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
crayon,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
crayon,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
crayon,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
crayon,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
crayon,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
crayon,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
crayon,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
crayon,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
crayon,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
crayon,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
crayon,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
crayon,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
crayon,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
crayon,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
crayon,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
crayon,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
crayon,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
crayon,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
crayon,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
crayon,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
crayon,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
crayon,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
crayon,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
crayon,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
crayon,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
crayon,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
crayon,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
crayon,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
crayon,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
crayon,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
crayon,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
crayon,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
crayon,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
crayon,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
crayon,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
crayon,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
crayon,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
crayon,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
crayon,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
crayon,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
crayon,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
crayon,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
crayon,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
crayon,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
crayon,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
crayon,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
crayon,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
crayon,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
crayon,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
crayon,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
crayon,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
crayon,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
crayon,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
crayon,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
crayon,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
crayon,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
crayon,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
crayon,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
crayon,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
crayon,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
crayon,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
crayon,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
crayon,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
crayon,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
crayon,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
crayon,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
crayon,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
crayon,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
crayon,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
crayon,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
crayon,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
crayon,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
crayon,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
crayon,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
crayon,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
crayon,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
crayon,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
crayon,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
crayon,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
crayon,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
crayon,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
crayon,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
crayon,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
crayon,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
crayon,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
crayon,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
crayon,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
crayon,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
crayon,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
crayon,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
crayon,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
crayon,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
crayon,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
crayon,1,178,183,FALSE,`obj_address()` is now exported.,NA
crayon,1,179,184,FALSE,`%<~%` now actually works.,NA
crayon,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
crayon,1,182,187,FALSE,Fix for CRAN checks.,NA
crayon,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
crayon,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
crayon,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
crayon,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
crayon,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
crayon,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
crayon,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
crayon,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
crayon,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
crayon,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
crayon,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
crayon,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
crayon,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
crayon,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
crayon,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
crayon,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
crayon,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
crayon,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
crayon,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
crayon,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
crayon,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
crayon,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
crayon,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
crayon,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
crayon,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
crayon,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
crayon,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
crayon,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
crayon,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
crayon,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
crayon,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
crayon,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
crayon,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
crayon,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
crayon,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
crayon,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
crayon,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
crayon,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
crayon,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
crayon,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
crayon,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
crayon,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
crayon,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
crayon,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
crayon,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
crayon,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
crayon,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
crayon,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
crayon,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
crayon,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
crayon,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
crayon,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
crayon,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
crayon,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
crayon,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
crayon,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
crayon,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
crayon,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
crayon,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
crayon,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
crayon,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
crayon,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
crayon,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
crayon,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
crayon,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
crayon,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
crayon,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
crayon,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
crayon,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
crayon,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
crayon,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
crayon,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
crayon,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
crayon,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
crayon,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
crayon,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
crayon,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
crayon,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
crayon,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
crayon,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
crayon,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
crayon,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
crayon,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
crayon,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
crayon,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
crayon,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
crayon,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
crayon,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
crayon,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
crayon,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
crayon,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
crayon,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
crayon,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
crayon,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
crayon,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
crayon,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
crayon,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
crayon,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
crayon,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
crayon,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
crayon,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
crayon,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
crayon,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
crayon,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
crayon,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
crayon,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
crayon,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
crayon,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
crayon,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
crayon,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
crayon,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
crayon,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
crayon,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
crayon,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
crayon,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
crayon,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
crayon,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
crayon,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
crayon,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
crayon,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
crayon,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
crayon,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
crayon,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
crayon,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
crayon,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
crayon,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
crayon,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
crayon,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
crayon,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
crayon,1,307,321,FALSE,This handler also works as a calling handler:,NA
crayon,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
crayon,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
crayon,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
crayon,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
crayon,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
crayon,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
crayon,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
crayon,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
crayon,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
crayon,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
crayon,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
crayon,1,316,332,FALSE,`calling()` now boxes its argument.,NA
crayon,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
crayon,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
crayon,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
crayon,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
crayon,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
crayon,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
crayon,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
crayon,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
crayon,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
crayon,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
crayon,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
crayon,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
crayon,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
crayon,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
crayon,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
crayon,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
crayon,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
crayon,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
crayon,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
crayon,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
crayon,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
crayon,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
crayon,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
crayon,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
crayon,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
crayon,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
crayon,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
crayon,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
crayon,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
crayon,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
crayon,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
crayon,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
crayon,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
crayon,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
crayon,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
crayon,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
crayon,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
crayon,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
crayon,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
crayon,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
crayon,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
crayon,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
crayon,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
crayon,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
crayon,1,357,375,FALSE,`!!!` disallows:,NA
crayon,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
crayon,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
crayon,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
crayon,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
crayon,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
crayon,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
crayon,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
crayon,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
crayon,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
crayon,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
crayon,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
crayon,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
crayon,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
crayon,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
crayon,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
crayon,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
crayon,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
crayon,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
crayon,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
crayon,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
crayon,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
crayon,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
crayon,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
crayon,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
crayon,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
crayon,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
crayon,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
crayon,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
crayon,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
crayon,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
crayon,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
crayon,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
crayon,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
crayon,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
crayon,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
crayon,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
crayon,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
crayon,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
crayon,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
crayon,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
crayon,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
crayon,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
crayon,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
crayon,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
crayon,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
crayon,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
crayon,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
crayon,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
crayon,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
crayon,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
crayon,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
crayon,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
crayon,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
crayon,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
crayon,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
crayon,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
crayon,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
crayon,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
crayon,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
crayon,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
crayon,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
crayon,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
crayon,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
crayon,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
crayon,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
crayon,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
crayon,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
crayon,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
crayon,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
crayon,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
crayon,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
crayon,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
crayon,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
crayon,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
crayon,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
crayon,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
crayon,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
crayon,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
crayon,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
crayon,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
crayon,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
crayon,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
crayon,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
crayon,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
crayon,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
crayon,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
crayon,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
crayon,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
crayon,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
crayon,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
crayon,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
crayon,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
crayon,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
crayon,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
crayon,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
crayon,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
crayon,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
crayon,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
crayon,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
crayon,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
crayon,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
crayon,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
crayon,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
crayon,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
crayon,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
crayon,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
crayon,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
crayon,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
crayon,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
crayon,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
crayon,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
crayon,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
crayon,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
crayon,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
crayon,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
crayon,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
crayon,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
crayon,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
crayon,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
crayon,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
crayon,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
crayon,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
crayon,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
crayon,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
crayon,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
crayon,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
crayon,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
crayon,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
crayon,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
crayon,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
crayon,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
crayon,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
crayon,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
crayon,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
crayon,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
crayon,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
crayon,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
crayon,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
crayon,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
crayon,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
crayon,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
crayon,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
crayon,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
crayon,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
crayon,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
crayon,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
crayon,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
crayon,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
crayon,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
crayon,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
crayon,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
crayon,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
crayon,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
crayon,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
crayon,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
crayon,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
crayon,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
crayon,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
crayon,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
crayon,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
crayon,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
crayon,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
crayon,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
crayon,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
crayon,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
crayon,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
crayon,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
crayon,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
crayon,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
crayon,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
crayon,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
crayon,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
crayon,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
crayon,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
crayon,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
crayon,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
crayon,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
crayon,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
crayon,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
crayon,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
dbplyr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
dbplyr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
dbplyr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
dbplyr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
dbplyr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
dbplyr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
dbplyr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
dbplyr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
dbplyr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
dbplyr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
dbplyr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
dbplyr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
dbplyr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
dbplyr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
dbplyr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
dbplyr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
dbplyr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
dbplyr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
dbplyr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
dbplyr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
dbplyr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
dbplyr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
dbplyr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
dbplyr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
dbplyr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
dbplyr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
dbplyr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
dbplyr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
dbplyr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
dbplyr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
dbplyr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
dbplyr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
dbplyr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
dbplyr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
dbplyr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
dbplyr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
dbplyr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
dbplyr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
dbplyr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
dbplyr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
dbplyr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
dbplyr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
dbplyr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
dbplyr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
dbplyr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
dbplyr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
dbplyr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
dbplyr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
dbplyr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
dbplyr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
dbplyr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
dbplyr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
dbplyr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
dbplyr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
dbplyr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
dbplyr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
dbplyr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
dbplyr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
dbplyr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
dbplyr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
dbplyr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
dbplyr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
dbplyr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
dbplyr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
dbplyr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
dbplyr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
dbplyr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
dbplyr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
dbplyr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
dbplyr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
dbplyr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
dbplyr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
dbplyr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
dbplyr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
dbplyr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
dbplyr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
dbplyr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
dbplyr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
dbplyr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
dbplyr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
dbplyr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
dbplyr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
dbplyr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
dbplyr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
dbplyr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
dbplyr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
dbplyr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
dbplyr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
dbplyr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
dbplyr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
dbplyr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dbplyr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dbplyr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dbplyr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
dbplyr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
dbplyr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
dbplyr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
dbplyr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
dbplyr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
dbplyr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
dbplyr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
dbplyr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
dbplyr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
dbplyr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dbplyr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dbplyr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dbplyr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dbplyr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
dbplyr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
dbplyr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
dbplyr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
dbplyr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
dbplyr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
dbplyr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
dbplyr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
dbplyr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
dbplyr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
dbplyr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
dbplyr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
dbplyr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
dbplyr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
dbplyr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
dbplyr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
dbplyr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
dbplyr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
dbplyr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
dbplyr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
dbplyr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
dbplyr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
dbplyr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
dbplyr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
dbplyr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
dbplyr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
dbplyr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
dbplyr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
dbplyr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
dbplyr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
dbplyr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
dbplyr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
dbplyr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
dbplyr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
dbplyr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
dbplyr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
dbplyr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
dbplyr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
dbplyr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
dbplyr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
dbplyr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
dbplyr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
dbplyr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
dbplyr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
dbplyr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
dbplyr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
dbplyr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
dbplyr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
dbplyr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
dbplyr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
dbplyr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
dbplyr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
dbplyr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
dbplyr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
dbplyr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
dbplyr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
dbplyr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
dbplyr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
dbplyr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
dbplyr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
dbplyr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
dbplyr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
dbplyr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
dbplyr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
dbplyr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
dbplyr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
dbplyr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
dbplyr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
dbplyr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
dbplyr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
dbplyr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
dbplyr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
dbplyr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
dbplyr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
dbplyr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
dbplyr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
dbplyr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
dbplyr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
dbplyr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
dbplyr,1,178,183,FALSE,`obj_address()` is now exported.,NA
dbplyr,1,179,184,FALSE,`%<~%` now actually works.,NA
dbplyr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
dbplyr,1,182,187,FALSE,Fix for CRAN checks.,NA
dbplyr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
dbplyr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
dbplyr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
dbplyr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
dbplyr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
dbplyr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
dbplyr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
dbplyr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
dbplyr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
dbplyr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
dbplyr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
dbplyr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
dbplyr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
dbplyr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
dbplyr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
dbplyr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
dbplyr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
dbplyr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
dbplyr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
dbplyr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
dbplyr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
dbplyr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
dbplyr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
dbplyr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
dbplyr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
dbplyr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
dbplyr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
dbplyr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
dbplyr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
dbplyr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
dbplyr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
dbplyr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
dbplyr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
dbplyr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
dbplyr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
dbplyr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
dbplyr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
dbplyr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
dbplyr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
dbplyr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
dbplyr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
dbplyr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
dbplyr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
dbplyr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
dbplyr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
dbplyr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
dbplyr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
dbplyr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
dbplyr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
dbplyr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
dbplyr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
dbplyr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
dbplyr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
dbplyr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
dbplyr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
dbplyr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
dbplyr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
dbplyr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
dbplyr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
dbplyr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
dbplyr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
dbplyr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
dbplyr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
dbplyr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
dbplyr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
dbplyr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
dbplyr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
dbplyr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
dbplyr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
dbplyr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
dbplyr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
dbplyr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
dbplyr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
dbplyr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
dbplyr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
dbplyr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
dbplyr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
dbplyr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
dbplyr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
dbplyr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
dbplyr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
dbplyr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
dbplyr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
dbplyr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
dbplyr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
dbplyr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
dbplyr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
dbplyr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
dbplyr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
dbplyr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
dbplyr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
dbplyr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
dbplyr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
dbplyr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
dbplyr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
dbplyr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
dbplyr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
dbplyr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
dbplyr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
dbplyr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
dbplyr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
dbplyr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
dbplyr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
dbplyr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
dbplyr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
dbplyr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
dbplyr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
dbplyr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
dbplyr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
dbplyr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
dbplyr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
dbplyr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
dbplyr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
dbplyr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
dbplyr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
dbplyr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
dbplyr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
dbplyr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
dbplyr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
dbplyr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
dbplyr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
dbplyr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
dbplyr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
dbplyr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
dbplyr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
dbplyr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
dbplyr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
dbplyr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
dbplyr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
dbplyr,1,307,321,FALSE,This handler also works as a calling handler:,NA
dbplyr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
dbplyr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
dbplyr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
dbplyr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
dbplyr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
dbplyr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
dbplyr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
dbplyr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
dbplyr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
dbplyr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
dbplyr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
dbplyr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
dbplyr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
dbplyr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
dbplyr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
dbplyr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
dbplyr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
dbplyr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
dbplyr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
dbplyr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
dbplyr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
dbplyr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
dbplyr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
dbplyr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
dbplyr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
dbplyr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
dbplyr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
dbplyr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
dbplyr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
dbplyr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
dbplyr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
dbplyr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
dbplyr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
dbplyr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
dbplyr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
dbplyr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
dbplyr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
dbplyr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
dbplyr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
dbplyr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
dbplyr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
dbplyr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
dbplyr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
dbplyr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
dbplyr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
dbplyr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
dbplyr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
dbplyr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
dbplyr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
dbplyr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
dbplyr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
dbplyr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
dbplyr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
dbplyr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dbplyr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dbplyr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dbplyr,1,357,375,FALSE,`!!!` disallows:,NA
dbplyr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
dbplyr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
dbplyr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
dbplyr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
dbplyr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
dbplyr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
dbplyr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
dbplyr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
dbplyr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
dbplyr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
dbplyr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
dbplyr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
dbplyr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
dbplyr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
dbplyr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
dbplyr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
dbplyr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
dbplyr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
dbplyr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
dbplyr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
dbplyr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
dbplyr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
dbplyr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
dbplyr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
dbplyr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
dbplyr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
dbplyr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
dbplyr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
dbplyr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
dbplyr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
dbplyr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
dbplyr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
dbplyr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
dbplyr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
dbplyr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
dbplyr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
dbplyr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
dbplyr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
dbplyr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
dbplyr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
dbplyr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
dbplyr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
dbplyr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
dbplyr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
dbplyr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
dbplyr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
dbplyr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
dbplyr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
dbplyr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
dbplyr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
dbplyr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
dbplyr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
dbplyr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
dbplyr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
dbplyr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
dbplyr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
dbplyr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
dbplyr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
dbplyr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
dbplyr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
dbplyr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
dbplyr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
dbplyr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
dbplyr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
dbplyr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
dbplyr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
dbplyr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
dbplyr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
dbplyr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
dbplyr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
dbplyr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
dbplyr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
dbplyr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
dbplyr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
dbplyr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
dbplyr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
dbplyr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
dbplyr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
dbplyr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
dbplyr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
dbplyr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
dbplyr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
dbplyr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
dbplyr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
dbplyr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
dbplyr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
dbplyr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
dbplyr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
dbplyr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
dbplyr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
dbplyr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
dbplyr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
dbplyr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
dbplyr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
dbplyr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
dbplyr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
dbplyr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
dbplyr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
dbplyr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
dbplyr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
dbplyr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
dbplyr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
dbplyr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
dbplyr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
dbplyr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
dbplyr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
dbplyr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
dbplyr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
dbplyr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
dbplyr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
dbplyr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
dbplyr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
dbplyr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
dbplyr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
dbplyr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
dbplyr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
dbplyr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
dbplyr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
dbplyr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
dbplyr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
dbplyr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
dbplyr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
dbplyr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
dbplyr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
dbplyr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
dbplyr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
dbplyr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
dbplyr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
dbplyr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
dbplyr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
dbplyr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
dbplyr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
dbplyr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
dbplyr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
dbplyr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
dbplyr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
dbplyr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
dbplyr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
dbplyr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
dbplyr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
dbplyr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
dbplyr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
dbplyr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
dbplyr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
dbplyr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
dbplyr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
dbplyr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
dbplyr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
dbplyr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
dbplyr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
dbplyr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
dbplyr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
dbplyr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
dbplyr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
dbplyr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
dbplyr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
dbplyr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
dbplyr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
dbplyr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
dbplyr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
dbplyr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
dbplyr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
dbplyr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
dbplyr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
dbplyr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
dbplyr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
dbplyr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
dbplyr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
dbplyr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
dbplyr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
dbplyr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
dbplyr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
dbplyr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
dbplyr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
dbplyr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
dbplyr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
dbplyr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
dbplyr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
dbplyr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
dbplyr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
dplyr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
dplyr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
dplyr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
dplyr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
dplyr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
dplyr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
dplyr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
dplyr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
dplyr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
dplyr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
dplyr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
dplyr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
dplyr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
dplyr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
dplyr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
dplyr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
dplyr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
dplyr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
dplyr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
dplyr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
dplyr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
dplyr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
dplyr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
dplyr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
dplyr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
dplyr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
dplyr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
dplyr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
dplyr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
dplyr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
dplyr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
dplyr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
dplyr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
dplyr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
dplyr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
dplyr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
dplyr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
dplyr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
dplyr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
dplyr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
dplyr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
dplyr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
dplyr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
dplyr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
dplyr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
dplyr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
dplyr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
dplyr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
dplyr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
dplyr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
dplyr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
dplyr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
dplyr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
dplyr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
dplyr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
dplyr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
dplyr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
dplyr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
dplyr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
dplyr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
dplyr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
dplyr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
dplyr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
dplyr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
dplyr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
dplyr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
dplyr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
dplyr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
dplyr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
dplyr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
dplyr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
dplyr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
dplyr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
dplyr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
dplyr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
dplyr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
dplyr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
dplyr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
dplyr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
dplyr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
dplyr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
dplyr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
dplyr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
dplyr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
dplyr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
dplyr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
dplyr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
dplyr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
dplyr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
dplyr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
dplyr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dplyr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dplyr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dplyr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
dplyr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
dplyr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
dplyr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
dplyr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
dplyr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
dplyr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
dplyr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
dplyr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
dplyr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
dplyr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dplyr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dplyr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dplyr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dplyr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
dplyr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
dplyr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
dplyr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
dplyr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
dplyr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
dplyr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
dplyr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
dplyr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
dplyr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
dplyr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
dplyr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
dplyr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
dplyr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
dplyr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
dplyr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
dplyr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
dplyr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
dplyr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
dplyr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
dplyr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
dplyr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
dplyr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
dplyr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
dplyr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
dplyr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
dplyr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
dplyr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
dplyr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
dplyr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
dplyr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
dplyr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
dplyr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
dplyr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
dplyr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
dplyr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
dplyr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
dplyr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
dplyr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
dplyr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
dplyr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
dplyr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
dplyr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
dplyr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
dplyr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
dplyr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
dplyr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
dplyr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
dplyr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
dplyr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
dplyr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
dplyr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
dplyr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
dplyr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
dplyr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
dplyr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
dplyr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
dplyr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
dplyr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
dplyr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
dplyr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
dplyr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
dplyr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
dplyr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
dplyr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
dplyr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
dplyr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
dplyr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
dplyr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
dplyr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
dplyr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
dplyr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
dplyr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
dplyr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
dplyr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
dplyr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
dplyr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
dplyr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
dplyr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
dplyr,1,178,183,FALSE,`obj_address()` is now exported.,NA
dplyr,1,179,184,FALSE,`%<~%` now actually works.,NA
dplyr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
dplyr,1,182,187,FALSE,Fix for CRAN checks.,NA
dplyr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
dplyr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
dplyr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
dplyr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
dplyr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
dplyr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
dplyr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
dplyr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
dplyr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
dplyr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
dplyr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
dplyr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
dplyr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
dplyr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
dplyr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
dplyr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
dplyr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
dplyr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
dplyr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
dplyr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
dplyr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
dplyr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
dplyr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
dplyr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
dplyr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
dplyr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
dplyr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
dplyr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
dplyr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
dplyr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
dplyr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
dplyr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
dplyr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
dplyr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
dplyr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
dplyr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
dplyr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
dplyr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
dplyr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
dplyr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
dplyr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
dplyr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
dplyr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
dplyr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
dplyr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
dplyr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
dplyr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
dplyr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
dplyr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
dplyr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
dplyr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
dplyr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
dplyr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
dplyr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
dplyr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
dplyr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
dplyr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
dplyr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
dplyr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
dplyr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
dplyr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
dplyr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
dplyr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
dplyr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
dplyr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
dplyr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
dplyr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
dplyr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
dplyr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
dplyr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
dplyr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
dplyr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
dplyr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
dplyr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
dplyr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
dplyr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
dplyr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
dplyr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
dplyr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
dplyr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
dplyr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
dplyr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
dplyr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
dplyr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
dplyr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
dplyr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
dplyr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
dplyr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
dplyr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
dplyr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
dplyr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
dplyr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
dplyr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
dplyr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
dplyr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
dplyr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
dplyr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
dplyr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
dplyr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
dplyr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
dplyr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
dplyr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
dplyr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
dplyr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
dplyr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
dplyr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
dplyr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
dplyr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
dplyr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
dplyr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
dplyr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
dplyr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
dplyr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
dplyr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
dplyr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
dplyr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
dplyr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
dplyr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
dplyr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
dplyr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
dplyr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
dplyr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
dplyr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
dplyr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
dplyr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
dplyr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
dplyr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
dplyr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
dplyr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
dplyr,1,307,321,FALSE,This handler also works as a calling handler:,NA
dplyr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
dplyr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
dplyr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
dplyr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
dplyr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
dplyr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
dplyr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
dplyr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
dplyr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
dplyr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
dplyr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
dplyr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
dplyr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
dplyr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
dplyr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
dplyr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
dplyr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
dplyr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
dplyr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
dplyr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
dplyr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
dplyr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
dplyr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
dplyr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
dplyr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
dplyr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
dplyr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
dplyr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
dplyr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
dplyr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
dplyr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
dplyr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
dplyr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
dplyr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
dplyr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
dplyr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
dplyr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
dplyr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
dplyr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
dplyr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
dplyr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
dplyr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
dplyr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
dplyr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
dplyr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
dplyr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
dplyr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
dplyr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
dplyr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
dplyr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
dplyr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
dplyr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
dplyr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
dplyr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dplyr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dplyr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dplyr,1,357,375,FALSE,`!!!` disallows:,NA
dplyr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
dplyr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
dplyr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
dplyr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
dplyr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
dplyr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
dplyr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
dplyr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
dplyr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
dplyr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
dplyr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
dplyr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
dplyr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
dplyr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
dplyr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
dplyr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
dplyr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
dplyr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
dplyr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
dplyr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
dplyr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
dplyr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
dplyr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
dplyr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
dplyr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
dplyr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
dplyr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
dplyr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
dplyr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
dplyr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
dplyr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
dplyr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
dplyr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
dplyr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
dplyr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
dplyr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
dplyr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
dplyr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
dplyr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
dplyr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
dplyr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
dplyr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
dplyr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
dplyr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
dplyr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
dplyr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
dplyr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
dplyr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
dplyr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
dplyr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
dplyr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
dplyr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
dplyr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
dplyr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
dplyr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
dplyr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
dplyr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
dplyr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
dplyr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
dplyr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
dplyr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
dplyr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
dplyr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
dplyr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
dplyr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
dplyr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
dplyr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
dplyr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
dplyr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
dplyr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
dplyr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
dplyr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
dplyr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
dplyr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
dplyr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
dplyr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
dplyr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
dplyr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
dplyr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
dplyr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
dplyr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
dplyr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
dplyr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
dplyr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
dplyr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
dplyr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
dplyr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
dplyr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
dplyr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
dplyr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
dplyr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
dplyr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
dplyr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
dplyr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
dplyr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
dplyr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
dplyr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
dplyr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
dplyr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
dplyr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
dplyr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
dplyr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
dplyr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
dplyr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
dplyr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
dplyr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
dplyr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
dplyr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
dplyr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
dplyr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
dplyr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
dplyr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
dplyr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
dplyr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
dplyr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
dplyr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
dplyr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
dplyr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
dplyr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
dplyr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
dplyr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
dplyr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
dplyr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
dplyr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
dplyr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
dplyr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
dplyr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
dplyr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
dplyr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
dplyr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
dplyr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
dplyr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
dplyr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
dplyr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
dplyr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
dplyr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
dplyr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
dplyr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
dplyr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
dplyr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
dplyr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
dplyr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
dplyr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
dplyr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
dplyr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
dplyr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
dplyr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
dplyr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
dplyr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
dplyr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
dplyr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
dplyr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
dplyr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
dplyr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
dplyr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
dplyr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
dplyr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
dplyr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
dplyr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
dplyr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
dplyr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
dplyr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
dplyr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
dplyr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
dplyr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
dplyr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
dplyr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
dplyr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
dplyr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
dplyr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
dplyr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
dplyr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
dplyr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
dplyr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
dplyr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
dplyr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
dplyr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
dplyr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
dplyr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
dplyr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
dtplyr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
dtplyr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
dtplyr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
dtplyr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
dtplyr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
dtplyr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
dtplyr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
dtplyr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
dtplyr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
dtplyr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
dtplyr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
dtplyr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
dtplyr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
dtplyr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
dtplyr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
dtplyr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
dtplyr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
dtplyr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
dtplyr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
dtplyr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
dtplyr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
dtplyr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
dtplyr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
dtplyr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
dtplyr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
dtplyr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
dtplyr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
dtplyr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
dtplyr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
dtplyr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
dtplyr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
dtplyr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
dtplyr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
dtplyr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
dtplyr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
dtplyr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
dtplyr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
dtplyr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
dtplyr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
dtplyr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
dtplyr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
dtplyr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
dtplyr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
dtplyr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
dtplyr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
dtplyr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
dtplyr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
dtplyr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
dtplyr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
dtplyr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
dtplyr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
dtplyr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
dtplyr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
dtplyr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
dtplyr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
dtplyr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
dtplyr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
dtplyr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
dtplyr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
dtplyr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
dtplyr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
dtplyr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
dtplyr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
dtplyr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
dtplyr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
dtplyr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
dtplyr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
dtplyr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
dtplyr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
dtplyr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
dtplyr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
dtplyr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
dtplyr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
dtplyr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
dtplyr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
dtplyr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
dtplyr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
dtplyr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
dtplyr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
dtplyr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
dtplyr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
dtplyr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
dtplyr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
dtplyr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
dtplyr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
dtplyr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
dtplyr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
dtplyr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
dtplyr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
dtplyr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
dtplyr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dtplyr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dtplyr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
dtplyr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
dtplyr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
dtplyr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
dtplyr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
dtplyr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
dtplyr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
dtplyr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
dtplyr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
dtplyr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
dtplyr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
dtplyr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dtplyr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dtplyr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dtplyr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
dtplyr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
dtplyr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
dtplyr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
dtplyr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
dtplyr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
dtplyr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
dtplyr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
dtplyr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
dtplyr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
dtplyr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
dtplyr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
dtplyr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
dtplyr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
dtplyr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
dtplyr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
dtplyr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
dtplyr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
dtplyr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
dtplyr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
dtplyr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
dtplyr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
dtplyr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
dtplyr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
dtplyr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
dtplyr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
dtplyr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
dtplyr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
dtplyr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
dtplyr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
dtplyr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
dtplyr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
dtplyr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
dtplyr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
dtplyr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
dtplyr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
dtplyr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
dtplyr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
dtplyr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
dtplyr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
dtplyr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
dtplyr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
dtplyr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
dtplyr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
dtplyr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
dtplyr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
dtplyr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
dtplyr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
dtplyr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
dtplyr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
dtplyr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
dtplyr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
dtplyr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
dtplyr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
dtplyr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
dtplyr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
dtplyr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
dtplyr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
dtplyr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
dtplyr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
dtplyr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
dtplyr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
dtplyr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
dtplyr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
dtplyr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
dtplyr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
dtplyr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
dtplyr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
dtplyr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
dtplyr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
dtplyr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
dtplyr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
dtplyr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
dtplyr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
dtplyr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
dtplyr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
dtplyr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
dtplyr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
dtplyr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
dtplyr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
dtplyr,1,178,183,FALSE,`obj_address()` is now exported.,NA
dtplyr,1,179,184,FALSE,`%<~%` now actually works.,NA
dtplyr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
dtplyr,1,182,187,FALSE,Fix for CRAN checks.,NA
dtplyr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
dtplyr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
dtplyr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
dtplyr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
dtplyr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
dtplyr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
dtplyr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
dtplyr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
dtplyr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
dtplyr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
dtplyr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
dtplyr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
dtplyr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
dtplyr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
dtplyr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
dtplyr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
dtplyr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
dtplyr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
dtplyr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
dtplyr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
dtplyr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
dtplyr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
dtplyr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
dtplyr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
dtplyr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
dtplyr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
dtplyr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
dtplyr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
dtplyr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
dtplyr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
dtplyr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
dtplyr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
dtplyr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
dtplyr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
dtplyr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
dtplyr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
dtplyr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
dtplyr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
dtplyr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
dtplyr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
dtplyr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
dtplyr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
dtplyr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
dtplyr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
dtplyr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
dtplyr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
dtplyr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
dtplyr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
dtplyr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
dtplyr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
dtplyr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
dtplyr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
dtplyr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
dtplyr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
dtplyr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
dtplyr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
dtplyr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
dtplyr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
dtplyr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
dtplyr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
dtplyr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
dtplyr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
dtplyr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
dtplyr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
dtplyr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
dtplyr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
dtplyr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
dtplyr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
dtplyr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
dtplyr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
dtplyr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
dtplyr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
dtplyr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
dtplyr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
dtplyr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
dtplyr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
dtplyr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
dtplyr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
dtplyr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
dtplyr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
dtplyr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
dtplyr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
dtplyr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
dtplyr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
dtplyr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
dtplyr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
dtplyr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
dtplyr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
dtplyr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
dtplyr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
dtplyr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
dtplyr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
dtplyr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
dtplyr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
dtplyr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
dtplyr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
dtplyr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
dtplyr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
dtplyr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
dtplyr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
dtplyr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
dtplyr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
dtplyr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
dtplyr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
dtplyr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
dtplyr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
dtplyr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
dtplyr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
dtplyr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
dtplyr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
dtplyr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
dtplyr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
dtplyr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
dtplyr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
dtplyr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
dtplyr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
dtplyr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
dtplyr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
dtplyr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
dtplyr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
dtplyr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
dtplyr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
dtplyr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
dtplyr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
dtplyr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
dtplyr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
dtplyr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
dtplyr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
dtplyr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
dtplyr,1,307,321,FALSE,This handler also works as a calling handler:,NA
dtplyr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
dtplyr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
dtplyr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
dtplyr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
dtplyr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
dtplyr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
dtplyr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
dtplyr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
dtplyr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
dtplyr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
dtplyr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
dtplyr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
dtplyr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
dtplyr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
dtplyr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
dtplyr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
dtplyr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
dtplyr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
dtplyr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
dtplyr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
dtplyr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
dtplyr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
dtplyr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
dtplyr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
dtplyr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
dtplyr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
dtplyr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
dtplyr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
dtplyr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
dtplyr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
dtplyr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
dtplyr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
dtplyr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
dtplyr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
dtplyr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
dtplyr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
dtplyr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
dtplyr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
dtplyr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
dtplyr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
dtplyr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
dtplyr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
dtplyr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
dtplyr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
dtplyr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
dtplyr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
dtplyr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
dtplyr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
dtplyr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
dtplyr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
dtplyr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
dtplyr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
dtplyr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
dtplyr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dtplyr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dtplyr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
dtplyr,1,357,375,FALSE,`!!!` disallows:,NA
dtplyr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
dtplyr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
dtplyr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
dtplyr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
dtplyr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
dtplyr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
dtplyr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
dtplyr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
dtplyr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
dtplyr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
dtplyr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
dtplyr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
dtplyr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
dtplyr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
dtplyr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
dtplyr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
dtplyr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
dtplyr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
dtplyr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
dtplyr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
dtplyr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
dtplyr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
dtplyr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
dtplyr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
dtplyr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
dtplyr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
dtplyr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
dtplyr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
dtplyr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
dtplyr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
dtplyr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
dtplyr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
dtplyr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
dtplyr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
dtplyr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
dtplyr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
dtplyr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
dtplyr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
dtplyr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
dtplyr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
dtplyr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
dtplyr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
dtplyr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
dtplyr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
dtplyr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
dtplyr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
dtplyr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
dtplyr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
dtplyr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
dtplyr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
dtplyr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
dtplyr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
dtplyr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
dtplyr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
dtplyr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
dtplyr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
dtplyr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
dtplyr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
dtplyr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
dtplyr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
dtplyr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
dtplyr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
dtplyr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
dtplyr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
dtplyr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
dtplyr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
dtplyr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
dtplyr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
dtplyr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
dtplyr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
dtplyr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
dtplyr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
dtplyr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
dtplyr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
dtplyr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
dtplyr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
dtplyr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
dtplyr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
dtplyr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
dtplyr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
dtplyr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
dtplyr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
dtplyr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
dtplyr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
dtplyr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
dtplyr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
dtplyr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
dtplyr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
dtplyr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
dtplyr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
dtplyr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
dtplyr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
dtplyr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
dtplyr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
dtplyr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
dtplyr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
dtplyr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
dtplyr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
dtplyr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
dtplyr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
dtplyr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
dtplyr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
dtplyr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
dtplyr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
dtplyr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
dtplyr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
dtplyr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
dtplyr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
dtplyr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
dtplyr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
dtplyr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
dtplyr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
dtplyr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
dtplyr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
dtplyr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
dtplyr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
dtplyr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
dtplyr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
dtplyr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
dtplyr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
dtplyr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
dtplyr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
dtplyr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
dtplyr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
dtplyr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
dtplyr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
dtplyr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
dtplyr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
dtplyr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
dtplyr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
dtplyr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
dtplyr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
dtplyr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
dtplyr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
dtplyr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
dtplyr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
dtplyr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
dtplyr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
dtplyr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
dtplyr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
dtplyr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
dtplyr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
dtplyr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
dtplyr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
dtplyr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
dtplyr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
dtplyr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
dtplyr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
dtplyr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
dtplyr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
dtplyr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
dtplyr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
dtplyr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
dtplyr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
dtplyr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
dtplyr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
dtplyr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
dtplyr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
dtplyr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
dtplyr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
dtplyr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
dtplyr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
dtplyr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
dtplyr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
dtplyr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
dtplyr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
dtplyr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
dtplyr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
dtplyr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
dtplyr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
dtplyr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
dtplyr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
dtplyr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
dtplyr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
dtplyr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
dtplyr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
dtplyr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
dtplyr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
dtplyr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
dtplyr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
forcats,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
forcats,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
forcats,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
forcats,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
forcats,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
forcats,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
forcats,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
forcats,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
forcats,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
forcats,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
forcats,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
forcats,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
forcats,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
forcats,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
forcats,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
forcats,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
forcats,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
forcats,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
forcats,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
forcats,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
forcats,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
forcats,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
forcats,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
forcats,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
forcats,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
forcats,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
forcats,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
forcats,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
forcats,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
forcats,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
forcats,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
forcats,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
forcats,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
forcats,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
forcats,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
forcats,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
forcats,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
forcats,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
forcats,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
forcats,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
forcats,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
forcats,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
forcats,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
forcats,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
forcats,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
forcats,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
forcats,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
forcats,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
forcats,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
forcats,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
forcats,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
forcats,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
forcats,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
forcats,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
forcats,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
forcats,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
forcats,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
forcats,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
forcats,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
forcats,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
forcats,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
forcats,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
forcats,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
forcats,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
forcats,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
forcats,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
forcats,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
forcats,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
forcats,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
forcats,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
forcats,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
forcats,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
forcats,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
forcats,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
forcats,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
forcats,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
forcats,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
forcats,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
forcats,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
forcats,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
forcats,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
forcats,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
forcats,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
forcats,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
forcats,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
forcats,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
forcats,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
forcats,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
forcats,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
forcats,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
forcats,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
forcats,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
forcats,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
forcats,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
forcats,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
forcats,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
forcats,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
forcats,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
forcats,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
forcats,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
forcats,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
forcats,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
forcats,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
forcats,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
forcats,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
forcats,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
forcats,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
forcats,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
forcats,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
forcats,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
forcats,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
forcats,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
forcats,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
forcats,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
forcats,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
forcats,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
forcats,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
forcats,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
forcats,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
forcats,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
forcats,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
forcats,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
forcats,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
forcats,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
forcats,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
forcats,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
forcats,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
forcats,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
forcats,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
forcats,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
forcats,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
forcats,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
forcats,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
forcats,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
forcats,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
forcats,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
forcats,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
forcats,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
forcats,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
forcats,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
forcats,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
forcats,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
forcats,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
forcats,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
forcats,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
forcats,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
forcats,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
forcats,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
forcats,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
forcats,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
forcats,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
forcats,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
forcats,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
forcats,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
forcats,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
forcats,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
forcats,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
forcats,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
forcats,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
forcats,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
forcats,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
forcats,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
forcats,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
forcats,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
forcats,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
forcats,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
forcats,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
forcats,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
forcats,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
forcats,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
forcats,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
forcats,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
forcats,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
forcats,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
forcats,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
forcats,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
forcats,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
forcats,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
forcats,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
forcats,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
forcats,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
forcats,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
forcats,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
forcats,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
forcats,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
forcats,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
forcats,1,178,183,FALSE,`obj_address()` is now exported.,NA
forcats,1,179,184,FALSE,`%<~%` now actually works.,NA
forcats,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
forcats,1,182,187,FALSE,Fix for CRAN checks.,NA
forcats,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
forcats,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
forcats,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
forcats,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
forcats,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
forcats,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
forcats,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
forcats,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
forcats,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
forcats,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
forcats,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
forcats,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
forcats,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
forcats,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
forcats,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
forcats,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
forcats,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
forcats,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
forcats,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
forcats,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
forcats,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
forcats,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
forcats,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
forcats,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
forcats,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
forcats,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
forcats,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
forcats,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
forcats,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
forcats,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
forcats,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
forcats,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
forcats,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
forcats,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
forcats,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
forcats,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
forcats,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
forcats,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
forcats,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
forcats,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
forcats,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
forcats,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
forcats,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
forcats,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
forcats,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
forcats,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
forcats,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
forcats,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
forcats,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
forcats,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
forcats,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
forcats,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
forcats,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
forcats,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
forcats,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
forcats,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
forcats,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
forcats,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
forcats,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
forcats,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
forcats,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
forcats,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
forcats,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
forcats,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
forcats,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
forcats,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
forcats,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
forcats,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
forcats,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
forcats,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
forcats,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
forcats,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
forcats,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
forcats,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
forcats,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
forcats,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
forcats,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
forcats,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
forcats,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
forcats,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
forcats,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
forcats,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
forcats,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
forcats,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
forcats,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
forcats,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
forcats,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
forcats,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
forcats,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
forcats,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
forcats,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
forcats,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
forcats,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
forcats,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
forcats,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
forcats,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
forcats,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
forcats,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
forcats,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
forcats,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
forcats,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
forcats,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
forcats,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
forcats,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
forcats,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
forcats,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
forcats,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
forcats,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
forcats,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
forcats,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
forcats,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
forcats,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
forcats,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
forcats,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
forcats,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
forcats,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
forcats,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
forcats,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
forcats,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
forcats,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
forcats,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
forcats,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
forcats,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
forcats,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
forcats,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
forcats,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
forcats,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
forcats,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
forcats,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
forcats,1,307,321,FALSE,This handler also works as a calling handler:,NA
forcats,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
forcats,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
forcats,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
forcats,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
forcats,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
forcats,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
forcats,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
forcats,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
forcats,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
forcats,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
forcats,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
forcats,1,316,332,FALSE,`calling()` now boxes its argument.,NA
forcats,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
forcats,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
forcats,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
forcats,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
forcats,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
forcats,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
forcats,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
forcats,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
forcats,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
forcats,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
forcats,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
forcats,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
forcats,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
forcats,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
forcats,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
forcats,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
forcats,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
forcats,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
forcats,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
forcats,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
forcats,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
forcats,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
forcats,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
forcats,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
forcats,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
forcats,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
forcats,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
forcats,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
forcats,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
forcats,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
forcats,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
forcats,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
forcats,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
forcats,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
forcats,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
forcats,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
forcats,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
forcats,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
forcats,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
forcats,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
forcats,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
forcats,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
forcats,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
forcats,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
forcats,1,357,375,FALSE,`!!!` disallows:,NA
forcats,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
forcats,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
forcats,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
forcats,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
forcats,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
forcats,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
forcats,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
forcats,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
forcats,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
forcats,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
forcats,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
forcats,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
forcats,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
forcats,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
forcats,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
forcats,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
forcats,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
forcats,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
forcats,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
forcats,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
forcats,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
forcats,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
forcats,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
forcats,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
forcats,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
forcats,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
forcats,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
forcats,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
forcats,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
forcats,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
forcats,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
forcats,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
forcats,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
forcats,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
forcats,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
forcats,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
forcats,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
forcats,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
forcats,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
forcats,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
forcats,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
forcats,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
forcats,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
forcats,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
forcats,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
forcats,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
forcats,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
forcats,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
forcats,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
forcats,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
forcats,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
forcats,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
forcats,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
forcats,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
forcats,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
forcats,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
forcats,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
forcats,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
forcats,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
forcats,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
forcats,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
forcats,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
forcats,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
forcats,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
forcats,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
forcats,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
forcats,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
forcats,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
forcats,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
forcats,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
forcats,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
forcats,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
forcats,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
forcats,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
forcats,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
forcats,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
forcats,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
forcats,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
forcats,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
forcats,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
forcats,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
forcats,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
forcats,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
forcats,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
forcats,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
forcats,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
forcats,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
forcats,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
forcats,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
forcats,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
forcats,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
forcats,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
forcats,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
forcats,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
forcats,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
forcats,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
forcats,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
forcats,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
forcats,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
forcats,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
forcats,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
forcats,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
forcats,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
forcats,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
forcats,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
forcats,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
forcats,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
forcats,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
forcats,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
forcats,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
forcats,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
forcats,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
forcats,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
forcats,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
forcats,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
forcats,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
forcats,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
forcats,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
forcats,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
forcats,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
forcats,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
forcats,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
forcats,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
forcats,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
forcats,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
forcats,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
forcats,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
forcats,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
forcats,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
forcats,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
forcats,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
forcats,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
forcats,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
forcats,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
forcats,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
forcats,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
forcats,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
forcats,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
forcats,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
forcats,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
forcats,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
forcats,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
forcats,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
forcats,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
forcats,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
forcats,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
forcats,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
forcats,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
forcats,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
forcats,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
forcats,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
forcats,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
forcats,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
forcats,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
forcats,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
forcats,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
forcats,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
forcats,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
forcats,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
forcats,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
forcats,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
forcats,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
forcats,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
forcats,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
forcats,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
forcats,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
forcats,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
forcats,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
forcats,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
forcats,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
forcats,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
forcats,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
forcats,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
forcats,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
forcats,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
forcats,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
forcats,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
forcats,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
forcats,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
forcats,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
ggplot2,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
ggplot2,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
ggplot2,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
ggplot2,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
ggplot2,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
ggplot2,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
ggplot2,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
ggplot2,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
ggplot2,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
ggplot2,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
ggplot2,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
ggplot2,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
ggplot2,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
ggplot2,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
ggplot2,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
ggplot2,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
ggplot2,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
ggplot2,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
ggplot2,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
ggplot2,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
ggplot2,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
ggplot2,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
ggplot2,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
ggplot2,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
ggplot2,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
ggplot2,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
ggplot2,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
ggplot2,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
ggplot2,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
ggplot2,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
ggplot2,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
ggplot2,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
ggplot2,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
ggplot2,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
ggplot2,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
ggplot2,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
ggplot2,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
ggplot2,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
ggplot2,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
ggplot2,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
ggplot2,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
ggplot2,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
ggplot2,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
ggplot2,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
ggplot2,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
ggplot2,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
ggplot2,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
ggplot2,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
ggplot2,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
ggplot2,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
ggplot2,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
ggplot2,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
ggplot2,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
ggplot2,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
ggplot2,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
ggplot2,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
ggplot2,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
ggplot2,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
ggplot2,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
ggplot2,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
ggplot2,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
ggplot2,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
ggplot2,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
ggplot2,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
ggplot2,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
ggplot2,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
ggplot2,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
ggplot2,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
ggplot2,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
ggplot2,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
ggplot2,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
ggplot2,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
ggplot2,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
ggplot2,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
ggplot2,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
ggplot2,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
ggplot2,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
ggplot2,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
ggplot2,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
ggplot2,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
ggplot2,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
ggplot2,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
ggplot2,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
ggplot2,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
ggplot2,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
ggplot2,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
ggplot2,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
ggplot2,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
ggplot2,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
ggplot2,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
ggplot2,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
ggplot2,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
ggplot2,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
ggplot2,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
ggplot2,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
ggplot2,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
ggplot2,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
ggplot2,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
ggplot2,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
ggplot2,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
ggplot2,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
ggplot2,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
ggplot2,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
ggplot2,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
ggplot2,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
ggplot2,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
ggplot2,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
ggplot2,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
ggplot2,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
ggplot2,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
ggplot2,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
ggplot2,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
ggplot2,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
ggplot2,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
ggplot2,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
ggplot2,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
ggplot2,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
ggplot2,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
ggplot2,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
ggplot2,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
ggplot2,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
ggplot2,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
ggplot2,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
ggplot2,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
ggplot2,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
ggplot2,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
ggplot2,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
ggplot2,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
ggplot2,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
ggplot2,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
ggplot2,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
ggplot2,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
ggplot2,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
ggplot2,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
ggplot2,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
ggplot2,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
ggplot2,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
ggplot2,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
ggplot2,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
ggplot2,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
ggplot2,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
ggplot2,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
ggplot2,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
ggplot2,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
ggplot2,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
ggplot2,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
ggplot2,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
ggplot2,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
ggplot2,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
ggplot2,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
ggplot2,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
ggplot2,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
ggplot2,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
ggplot2,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
ggplot2,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
ggplot2,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
ggplot2,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
ggplot2,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
ggplot2,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
ggplot2,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
ggplot2,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
ggplot2,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
ggplot2,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
ggplot2,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
ggplot2,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
ggplot2,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
ggplot2,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
ggplot2,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
ggplot2,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
ggplot2,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
ggplot2,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
ggplot2,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
ggplot2,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
ggplot2,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
ggplot2,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
ggplot2,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
ggplot2,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
ggplot2,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
ggplot2,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
ggplot2,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
ggplot2,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
ggplot2,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
ggplot2,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
ggplot2,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
ggplot2,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
ggplot2,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
ggplot2,1,178,183,FALSE,`obj_address()` is now exported.,NA
ggplot2,1,179,184,FALSE,`%<~%` now actually works.,NA
ggplot2,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
ggplot2,1,182,187,FALSE,Fix for CRAN checks.,NA
ggplot2,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
ggplot2,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
ggplot2,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
ggplot2,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
ggplot2,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
ggplot2,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
ggplot2,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
ggplot2,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
ggplot2,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
ggplot2,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
ggplot2,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
ggplot2,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
ggplot2,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
ggplot2,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
ggplot2,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
ggplot2,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
ggplot2,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
ggplot2,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
ggplot2,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
ggplot2,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
ggplot2,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
ggplot2,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
ggplot2,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
ggplot2,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
ggplot2,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
ggplot2,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
ggplot2,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
ggplot2,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
ggplot2,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
ggplot2,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
ggplot2,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
ggplot2,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
ggplot2,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
ggplot2,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
ggplot2,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
ggplot2,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
ggplot2,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
ggplot2,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
ggplot2,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
ggplot2,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
ggplot2,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
ggplot2,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
ggplot2,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
ggplot2,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
ggplot2,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
ggplot2,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
ggplot2,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
ggplot2,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
ggplot2,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
ggplot2,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
ggplot2,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
ggplot2,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
ggplot2,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
ggplot2,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
ggplot2,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
ggplot2,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
ggplot2,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
ggplot2,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
ggplot2,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
ggplot2,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
ggplot2,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
ggplot2,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
ggplot2,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
ggplot2,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
ggplot2,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
ggplot2,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
ggplot2,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
ggplot2,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
ggplot2,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
ggplot2,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
ggplot2,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
ggplot2,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
ggplot2,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
ggplot2,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
ggplot2,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
ggplot2,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
ggplot2,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
ggplot2,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
ggplot2,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
ggplot2,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
ggplot2,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
ggplot2,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
ggplot2,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
ggplot2,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
ggplot2,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
ggplot2,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
ggplot2,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
ggplot2,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
ggplot2,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
ggplot2,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
ggplot2,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
ggplot2,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
ggplot2,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
ggplot2,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
ggplot2,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
ggplot2,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
ggplot2,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
ggplot2,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
ggplot2,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
ggplot2,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
ggplot2,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
ggplot2,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
ggplot2,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
ggplot2,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
ggplot2,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
ggplot2,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
ggplot2,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
ggplot2,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
ggplot2,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
ggplot2,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
ggplot2,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
ggplot2,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
ggplot2,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
ggplot2,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
ggplot2,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
ggplot2,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
ggplot2,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
ggplot2,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
ggplot2,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
ggplot2,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
ggplot2,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
ggplot2,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
ggplot2,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
ggplot2,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
ggplot2,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
ggplot2,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
ggplot2,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
ggplot2,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
ggplot2,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
ggplot2,1,307,321,FALSE,This handler also works as a calling handler:,NA
ggplot2,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
ggplot2,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
ggplot2,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
ggplot2,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
ggplot2,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
ggplot2,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
ggplot2,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
ggplot2,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
ggplot2,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
ggplot2,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
ggplot2,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
ggplot2,1,316,332,FALSE,`calling()` now boxes its argument.,NA
ggplot2,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
ggplot2,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
ggplot2,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
ggplot2,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
ggplot2,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
ggplot2,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
ggplot2,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
ggplot2,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
ggplot2,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
ggplot2,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
ggplot2,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
ggplot2,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
ggplot2,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
ggplot2,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
ggplot2,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
ggplot2,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
ggplot2,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
ggplot2,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
ggplot2,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
ggplot2,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
ggplot2,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
ggplot2,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
ggplot2,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
ggplot2,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
ggplot2,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
ggplot2,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
ggplot2,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
ggplot2,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
ggplot2,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
ggplot2,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
ggplot2,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
ggplot2,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
ggplot2,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
ggplot2,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
ggplot2,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
ggplot2,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
ggplot2,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
ggplot2,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
ggplot2,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
ggplot2,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
ggplot2,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
ggplot2,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
ggplot2,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
ggplot2,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
ggplot2,1,357,375,FALSE,`!!!` disallows:,NA
ggplot2,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
ggplot2,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
ggplot2,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
ggplot2,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
ggplot2,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
ggplot2,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
ggplot2,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
ggplot2,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
ggplot2,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
ggplot2,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
ggplot2,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
ggplot2,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
ggplot2,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
ggplot2,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
ggplot2,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
ggplot2,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
ggplot2,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
ggplot2,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
ggplot2,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
ggplot2,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
ggplot2,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
ggplot2,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
ggplot2,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
ggplot2,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
ggplot2,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
ggplot2,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
ggplot2,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
ggplot2,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
ggplot2,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
ggplot2,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
ggplot2,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
ggplot2,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
ggplot2,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
ggplot2,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
ggplot2,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
ggplot2,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
ggplot2,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
ggplot2,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
ggplot2,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
ggplot2,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
ggplot2,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
ggplot2,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
ggplot2,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
ggplot2,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
ggplot2,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
ggplot2,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
ggplot2,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
ggplot2,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
ggplot2,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
ggplot2,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
ggplot2,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
ggplot2,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
ggplot2,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
ggplot2,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
ggplot2,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
ggplot2,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
ggplot2,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
ggplot2,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
ggplot2,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
ggplot2,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
ggplot2,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
ggplot2,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
ggplot2,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
ggplot2,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
ggplot2,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
ggplot2,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
ggplot2,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
ggplot2,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
ggplot2,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
ggplot2,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
ggplot2,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
ggplot2,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
ggplot2,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
ggplot2,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
ggplot2,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
ggplot2,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
ggplot2,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
ggplot2,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
ggplot2,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
ggplot2,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
ggplot2,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
ggplot2,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
ggplot2,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
ggplot2,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
ggplot2,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
ggplot2,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
ggplot2,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
ggplot2,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
ggplot2,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
ggplot2,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
ggplot2,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
ggplot2,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
ggplot2,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
ggplot2,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
ggplot2,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
ggplot2,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
ggplot2,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
ggplot2,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
ggplot2,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
ggplot2,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
ggplot2,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
ggplot2,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
ggplot2,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
ggplot2,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
ggplot2,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
ggplot2,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
ggplot2,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
ggplot2,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
ggplot2,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
ggplot2,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
ggplot2,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
ggplot2,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
ggplot2,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
ggplot2,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
ggplot2,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
ggplot2,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
ggplot2,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
ggplot2,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
ggplot2,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
ggplot2,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
ggplot2,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
ggplot2,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
ggplot2,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
ggplot2,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
ggplot2,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
ggplot2,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
ggplot2,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
ggplot2,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
ggplot2,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
ggplot2,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
ggplot2,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
ggplot2,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
ggplot2,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
ggplot2,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
ggplot2,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
ggplot2,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
ggplot2,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
ggplot2,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
ggplot2,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
ggplot2,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
ggplot2,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
ggplot2,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
ggplot2,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
ggplot2,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
ggplot2,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
ggplot2,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
ggplot2,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
ggplot2,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
ggplot2,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
ggplot2,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
ggplot2,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
ggplot2,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
ggplot2,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
ggplot2,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
ggplot2,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
ggplot2,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
ggplot2,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
ggplot2,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
ggplot2,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
ggplot2,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
ggplot2,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
ggplot2,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
ggplot2,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
ggplot2,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
ggplot2,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
ggplot2,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
ggplot2,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
ggplot2,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
ggplot2,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
ggplot2,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
ggplot2,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
ggplot2,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
ggplot2,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
ggplot2,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
ggplot2,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
ggplot2,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
ggplot2,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
ggplot2,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
ggplot2,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
ggplot2,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
googledrive,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
googledrive,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
googledrive,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
googledrive,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
googledrive,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
googledrive,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
googledrive,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
googledrive,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
googledrive,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
googledrive,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
googledrive,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
googledrive,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
googledrive,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
googledrive,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
googledrive,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
googledrive,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
googledrive,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
googledrive,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
googledrive,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
googledrive,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
googledrive,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
googledrive,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
googledrive,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
googledrive,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
googledrive,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
googledrive,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
googledrive,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
googledrive,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
googledrive,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
googledrive,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
googledrive,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
googledrive,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
googledrive,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
googledrive,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
googledrive,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
googledrive,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
googledrive,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
googledrive,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
googledrive,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
googledrive,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
googledrive,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
googledrive,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
googledrive,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
googledrive,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
googledrive,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
googledrive,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
googledrive,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
googledrive,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
googledrive,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
googledrive,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
googledrive,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
googledrive,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
googledrive,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
googledrive,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
googledrive,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
googledrive,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
googledrive,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
googledrive,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
googledrive,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
googledrive,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
googledrive,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
googledrive,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
googledrive,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
googledrive,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
googledrive,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
googledrive,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
googledrive,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
googledrive,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
googledrive,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
googledrive,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
googledrive,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
googledrive,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
googledrive,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
googledrive,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
googledrive,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
googledrive,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
googledrive,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
googledrive,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
googledrive,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
googledrive,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
googledrive,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
googledrive,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
googledrive,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
googledrive,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
googledrive,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
googledrive,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
googledrive,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
googledrive,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
googledrive,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
googledrive,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
googledrive,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
googledrive,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
googledrive,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
googledrive,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
googledrive,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
googledrive,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
googledrive,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
googledrive,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
googledrive,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
googledrive,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
googledrive,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
googledrive,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
googledrive,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
googledrive,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googledrive,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googledrive,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googledrive,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googledrive,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
googledrive,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
googledrive,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
googledrive,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
googledrive,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
googledrive,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
googledrive,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
googledrive,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
googledrive,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
googledrive,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
googledrive,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
googledrive,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
googledrive,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
googledrive,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
googledrive,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
googledrive,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
googledrive,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
googledrive,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
googledrive,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
googledrive,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
googledrive,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
googledrive,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
googledrive,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
googledrive,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
googledrive,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
googledrive,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
googledrive,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
googledrive,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
googledrive,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
googledrive,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
googledrive,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
googledrive,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
googledrive,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
googledrive,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
googledrive,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
googledrive,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
googledrive,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
googledrive,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
googledrive,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
googledrive,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
googledrive,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
googledrive,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
googledrive,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
googledrive,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
googledrive,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
googledrive,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
googledrive,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
googledrive,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
googledrive,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
googledrive,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
googledrive,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
googledrive,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
googledrive,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
googledrive,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
googledrive,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
googledrive,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
googledrive,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
googledrive,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
googledrive,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
googledrive,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
googledrive,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
googledrive,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
googledrive,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
googledrive,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
googledrive,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
googledrive,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
googledrive,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
googledrive,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
googledrive,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
googledrive,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
googledrive,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
googledrive,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
googledrive,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
googledrive,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
googledrive,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
googledrive,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
googledrive,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
googledrive,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
googledrive,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
googledrive,1,178,183,FALSE,`obj_address()` is now exported.,NA
googledrive,1,179,184,FALSE,`%<~%` now actually works.,NA
googledrive,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
googledrive,1,182,187,FALSE,Fix for CRAN checks.,NA
googledrive,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
googledrive,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
googledrive,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
googledrive,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
googledrive,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
googledrive,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
googledrive,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
googledrive,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
googledrive,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
googledrive,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
googledrive,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
googledrive,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
googledrive,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
googledrive,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
googledrive,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
googledrive,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
googledrive,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
googledrive,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
googledrive,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
googledrive,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
googledrive,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
googledrive,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
googledrive,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
googledrive,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
googledrive,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
googledrive,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
googledrive,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
googledrive,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
googledrive,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
googledrive,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
googledrive,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
googledrive,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
googledrive,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
googledrive,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
googledrive,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
googledrive,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
googledrive,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
googledrive,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
googledrive,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
googledrive,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
googledrive,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
googledrive,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
googledrive,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
googledrive,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
googledrive,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
googledrive,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
googledrive,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
googledrive,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
googledrive,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
googledrive,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
googledrive,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
googledrive,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
googledrive,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
googledrive,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
googledrive,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
googledrive,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
googledrive,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
googledrive,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
googledrive,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
googledrive,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
googledrive,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
googledrive,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
googledrive,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
googledrive,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
googledrive,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
googledrive,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
googledrive,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
googledrive,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
googledrive,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
googledrive,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
googledrive,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
googledrive,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
googledrive,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
googledrive,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
googledrive,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
googledrive,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
googledrive,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
googledrive,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
googledrive,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
googledrive,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
googledrive,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
googledrive,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
googledrive,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
googledrive,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
googledrive,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
googledrive,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
googledrive,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
googledrive,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
googledrive,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
googledrive,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
googledrive,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
googledrive,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
googledrive,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
googledrive,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
googledrive,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
googledrive,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
googledrive,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
googledrive,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
googledrive,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
googledrive,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
googledrive,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
googledrive,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
googledrive,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
googledrive,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
googledrive,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
googledrive,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
googledrive,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
googledrive,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
googledrive,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
googledrive,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
googledrive,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
googledrive,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
googledrive,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
googledrive,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
googledrive,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
googledrive,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
googledrive,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
googledrive,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
googledrive,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
googledrive,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
googledrive,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
googledrive,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
googledrive,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
googledrive,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
googledrive,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
googledrive,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
googledrive,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
googledrive,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
googledrive,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
googledrive,1,307,321,FALSE,This handler also works as a calling handler:,NA
googledrive,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
googledrive,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
googledrive,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
googledrive,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
googledrive,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
googledrive,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
googledrive,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
googledrive,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
googledrive,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
googledrive,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
googledrive,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
googledrive,1,316,332,FALSE,`calling()` now boxes its argument.,NA
googledrive,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
googledrive,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
googledrive,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
googledrive,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
googledrive,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
googledrive,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
googledrive,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
googledrive,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
googledrive,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
googledrive,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
googledrive,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
googledrive,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
googledrive,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
googledrive,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
googledrive,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
googledrive,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
googledrive,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
googledrive,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
googledrive,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
googledrive,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
googledrive,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
googledrive,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
googledrive,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
googledrive,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
googledrive,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
googledrive,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
googledrive,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
googledrive,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
googledrive,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
googledrive,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
googledrive,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
googledrive,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
googledrive,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
googledrive,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
googledrive,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
googledrive,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
googledrive,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
googledrive,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
googledrive,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
googledrive,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
googledrive,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
googledrive,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
googledrive,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
googledrive,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
googledrive,1,357,375,FALSE,`!!!` disallows:,NA
googledrive,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
googledrive,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
googledrive,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
googledrive,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
googledrive,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
googledrive,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
googledrive,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
googledrive,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
googledrive,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
googledrive,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
googledrive,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
googledrive,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
googledrive,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
googledrive,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
googledrive,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
googledrive,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
googledrive,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
googledrive,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
googledrive,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
googledrive,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
googledrive,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
googledrive,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
googledrive,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
googledrive,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
googledrive,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
googledrive,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
googledrive,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
googledrive,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
googledrive,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
googledrive,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
googledrive,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
googledrive,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
googledrive,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
googledrive,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
googledrive,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
googledrive,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
googledrive,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
googledrive,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
googledrive,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
googledrive,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
googledrive,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
googledrive,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
googledrive,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
googledrive,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
googledrive,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
googledrive,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
googledrive,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
googledrive,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
googledrive,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
googledrive,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
googledrive,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
googledrive,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
googledrive,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
googledrive,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
googledrive,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
googledrive,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
googledrive,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
googledrive,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
googledrive,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
googledrive,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
googledrive,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
googledrive,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
googledrive,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
googledrive,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
googledrive,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
googledrive,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
googledrive,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
googledrive,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
googledrive,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
googledrive,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
googledrive,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
googledrive,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
googledrive,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
googledrive,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
googledrive,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
googledrive,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
googledrive,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
googledrive,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
googledrive,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
googledrive,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
googledrive,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
googledrive,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
googledrive,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
googledrive,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
googledrive,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
googledrive,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
googledrive,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
googledrive,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
googledrive,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
googledrive,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
googledrive,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
googledrive,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
googledrive,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
googledrive,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
googledrive,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
googledrive,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
googledrive,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
googledrive,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
googledrive,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
googledrive,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
googledrive,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
googledrive,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
googledrive,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
googledrive,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
googledrive,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
googledrive,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
googledrive,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
googledrive,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
googledrive,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
googledrive,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
googledrive,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
googledrive,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
googledrive,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
googledrive,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
googledrive,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
googledrive,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
googledrive,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
googledrive,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
googledrive,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
googledrive,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
googledrive,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
googledrive,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
googledrive,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
googledrive,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
googledrive,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
googledrive,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
googledrive,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
googledrive,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
googledrive,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
googledrive,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
googledrive,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
googledrive,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
googledrive,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
googledrive,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
googledrive,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
googledrive,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
googledrive,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
googledrive,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
googledrive,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
googledrive,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
googledrive,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
googledrive,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
googledrive,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
googledrive,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
googledrive,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
googledrive,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
googledrive,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
googledrive,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
googledrive,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
googledrive,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
googledrive,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
googledrive,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
googledrive,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
googledrive,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
googledrive,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
googledrive,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
googledrive,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
googledrive,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
googledrive,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
googledrive,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
googledrive,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
googledrive,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
googledrive,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
googledrive,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
googledrive,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
googledrive,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
googledrive,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
googledrive,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
googledrive,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
googledrive,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
googledrive,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
googledrive,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
googledrive,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
googledrive,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
googledrive,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
googledrive,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
googledrive,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
googledrive,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
googledrive,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
googledrive,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
googlesheets4,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
googlesheets4,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
googlesheets4,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
googlesheets4,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
googlesheets4,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
googlesheets4,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
googlesheets4,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
googlesheets4,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
googlesheets4,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
googlesheets4,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
googlesheets4,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
googlesheets4,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
googlesheets4,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
googlesheets4,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
googlesheets4,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
googlesheets4,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
googlesheets4,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
googlesheets4,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
googlesheets4,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
googlesheets4,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
googlesheets4,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
googlesheets4,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
googlesheets4,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
googlesheets4,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
googlesheets4,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
googlesheets4,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
googlesheets4,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
googlesheets4,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
googlesheets4,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
googlesheets4,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
googlesheets4,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
googlesheets4,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
googlesheets4,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
googlesheets4,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
googlesheets4,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
googlesheets4,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
googlesheets4,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
googlesheets4,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
googlesheets4,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
googlesheets4,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
googlesheets4,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
googlesheets4,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
googlesheets4,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
googlesheets4,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
googlesheets4,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
googlesheets4,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
googlesheets4,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
googlesheets4,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
googlesheets4,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
googlesheets4,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
googlesheets4,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
googlesheets4,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
googlesheets4,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
googlesheets4,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
googlesheets4,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
googlesheets4,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
googlesheets4,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
googlesheets4,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
googlesheets4,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
googlesheets4,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
googlesheets4,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
googlesheets4,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
googlesheets4,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
googlesheets4,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
googlesheets4,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
googlesheets4,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
googlesheets4,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
googlesheets4,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
googlesheets4,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
googlesheets4,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
googlesheets4,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
googlesheets4,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
googlesheets4,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
googlesheets4,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
googlesheets4,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
googlesheets4,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
googlesheets4,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
googlesheets4,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
googlesheets4,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
googlesheets4,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
googlesheets4,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
googlesheets4,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
googlesheets4,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
googlesheets4,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
googlesheets4,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
googlesheets4,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
googlesheets4,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
googlesheets4,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
googlesheets4,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
googlesheets4,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
googlesheets4,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
googlesheets4,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
googlesheets4,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
googlesheets4,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
googlesheets4,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
googlesheets4,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
googlesheets4,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
googlesheets4,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
googlesheets4,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
googlesheets4,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
googlesheets4,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
googlesheets4,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
googlesheets4,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
googlesheets4,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googlesheets4,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googlesheets4,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googlesheets4,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
googlesheets4,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
googlesheets4,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
googlesheets4,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
googlesheets4,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
googlesheets4,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
googlesheets4,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
googlesheets4,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
googlesheets4,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
googlesheets4,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
googlesheets4,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
googlesheets4,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
googlesheets4,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
googlesheets4,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
googlesheets4,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
googlesheets4,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
googlesheets4,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
googlesheets4,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
googlesheets4,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
googlesheets4,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
googlesheets4,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
googlesheets4,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
googlesheets4,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
googlesheets4,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
googlesheets4,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
googlesheets4,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
googlesheets4,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
googlesheets4,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
googlesheets4,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
googlesheets4,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
googlesheets4,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
googlesheets4,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
googlesheets4,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
googlesheets4,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
googlesheets4,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
googlesheets4,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
googlesheets4,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
googlesheets4,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
googlesheets4,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
googlesheets4,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
googlesheets4,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
googlesheets4,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
googlesheets4,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
googlesheets4,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
googlesheets4,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
googlesheets4,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
googlesheets4,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
googlesheets4,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
googlesheets4,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
googlesheets4,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
googlesheets4,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
googlesheets4,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
googlesheets4,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
googlesheets4,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
googlesheets4,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
googlesheets4,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
googlesheets4,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
googlesheets4,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
googlesheets4,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
googlesheets4,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
googlesheets4,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
googlesheets4,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
googlesheets4,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
googlesheets4,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
googlesheets4,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
googlesheets4,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
googlesheets4,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
googlesheets4,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
googlesheets4,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
googlesheets4,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
googlesheets4,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
googlesheets4,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
googlesheets4,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
googlesheets4,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
googlesheets4,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
googlesheets4,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
googlesheets4,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
googlesheets4,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
googlesheets4,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
googlesheets4,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
googlesheets4,1,178,183,FALSE,`obj_address()` is now exported.,NA
googlesheets4,1,179,184,FALSE,`%<~%` now actually works.,NA
googlesheets4,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
googlesheets4,1,182,187,FALSE,Fix for CRAN checks.,NA
googlesheets4,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
googlesheets4,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
googlesheets4,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
googlesheets4,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
googlesheets4,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
googlesheets4,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
googlesheets4,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
googlesheets4,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
googlesheets4,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
googlesheets4,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
googlesheets4,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
googlesheets4,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
googlesheets4,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
googlesheets4,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
googlesheets4,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
googlesheets4,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
googlesheets4,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
googlesheets4,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
googlesheets4,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
googlesheets4,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
googlesheets4,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
googlesheets4,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
googlesheets4,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
googlesheets4,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
googlesheets4,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
googlesheets4,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
googlesheets4,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
googlesheets4,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
googlesheets4,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
googlesheets4,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
googlesheets4,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
googlesheets4,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
googlesheets4,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
googlesheets4,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
googlesheets4,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
googlesheets4,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
googlesheets4,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
googlesheets4,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
googlesheets4,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
googlesheets4,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
googlesheets4,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
googlesheets4,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
googlesheets4,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
googlesheets4,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
googlesheets4,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
googlesheets4,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
googlesheets4,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
googlesheets4,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
googlesheets4,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
googlesheets4,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
googlesheets4,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
googlesheets4,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
googlesheets4,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
googlesheets4,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
googlesheets4,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
googlesheets4,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
googlesheets4,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
googlesheets4,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
googlesheets4,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
googlesheets4,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
googlesheets4,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
googlesheets4,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
googlesheets4,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
googlesheets4,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
googlesheets4,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
googlesheets4,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
googlesheets4,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
googlesheets4,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
googlesheets4,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
googlesheets4,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
googlesheets4,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
googlesheets4,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
googlesheets4,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
googlesheets4,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
googlesheets4,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
googlesheets4,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
googlesheets4,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
googlesheets4,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
googlesheets4,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
googlesheets4,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
googlesheets4,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
googlesheets4,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
googlesheets4,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
googlesheets4,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
googlesheets4,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
googlesheets4,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
googlesheets4,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
googlesheets4,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
googlesheets4,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
googlesheets4,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
googlesheets4,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
googlesheets4,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
googlesheets4,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
googlesheets4,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
googlesheets4,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
googlesheets4,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
googlesheets4,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
googlesheets4,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
googlesheets4,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
googlesheets4,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
googlesheets4,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
googlesheets4,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
googlesheets4,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
googlesheets4,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
googlesheets4,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
googlesheets4,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
googlesheets4,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
googlesheets4,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
googlesheets4,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
googlesheets4,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
googlesheets4,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
googlesheets4,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
googlesheets4,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
googlesheets4,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
googlesheets4,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
googlesheets4,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
googlesheets4,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
googlesheets4,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
googlesheets4,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
googlesheets4,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
googlesheets4,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
googlesheets4,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
googlesheets4,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
googlesheets4,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
googlesheets4,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
googlesheets4,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
googlesheets4,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
googlesheets4,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
googlesheets4,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
googlesheets4,1,307,321,FALSE,This handler also works as a calling handler:,NA
googlesheets4,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
googlesheets4,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
googlesheets4,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
googlesheets4,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
googlesheets4,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
googlesheets4,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
googlesheets4,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
googlesheets4,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
googlesheets4,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
googlesheets4,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
googlesheets4,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
googlesheets4,1,316,332,FALSE,`calling()` now boxes its argument.,NA
googlesheets4,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
googlesheets4,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
googlesheets4,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
googlesheets4,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
googlesheets4,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
googlesheets4,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
googlesheets4,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
googlesheets4,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
googlesheets4,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
googlesheets4,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
googlesheets4,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
googlesheets4,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
googlesheets4,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
googlesheets4,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
googlesheets4,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
googlesheets4,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
googlesheets4,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
googlesheets4,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
googlesheets4,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
googlesheets4,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
googlesheets4,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
googlesheets4,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
googlesheets4,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
googlesheets4,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
googlesheets4,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
googlesheets4,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
googlesheets4,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
googlesheets4,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
googlesheets4,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
googlesheets4,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
googlesheets4,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
googlesheets4,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
googlesheets4,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
googlesheets4,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
googlesheets4,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
googlesheets4,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
googlesheets4,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
googlesheets4,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
googlesheets4,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
googlesheets4,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
googlesheets4,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
googlesheets4,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
googlesheets4,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
googlesheets4,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
googlesheets4,1,357,375,FALSE,`!!!` disallows:,NA
googlesheets4,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
googlesheets4,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
googlesheets4,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
googlesheets4,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
googlesheets4,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
googlesheets4,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
googlesheets4,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
googlesheets4,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
googlesheets4,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
googlesheets4,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
googlesheets4,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
googlesheets4,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
googlesheets4,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
googlesheets4,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
googlesheets4,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
googlesheets4,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
googlesheets4,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
googlesheets4,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
googlesheets4,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
googlesheets4,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
googlesheets4,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
googlesheets4,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
googlesheets4,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
googlesheets4,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
googlesheets4,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
googlesheets4,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
googlesheets4,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
googlesheets4,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
googlesheets4,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
googlesheets4,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
googlesheets4,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
googlesheets4,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
googlesheets4,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
googlesheets4,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
googlesheets4,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
googlesheets4,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
googlesheets4,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
googlesheets4,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
googlesheets4,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
googlesheets4,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
googlesheets4,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
googlesheets4,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
googlesheets4,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
googlesheets4,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
googlesheets4,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
googlesheets4,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
googlesheets4,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
googlesheets4,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
googlesheets4,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
googlesheets4,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
googlesheets4,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
googlesheets4,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
googlesheets4,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
googlesheets4,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
googlesheets4,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
googlesheets4,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
googlesheets4,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
googlesheets4,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
googlesheets4,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
googlesheets4,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
googlesheets4,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
googlesheets4,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
googlesheets4,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
googlesheets4,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
googlesheets4,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
googlesheets4,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
googlesheets4,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
googlesheets4,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
googlesheets4,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
googlesheets4,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
googlesheets4,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
googlesheets4,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
googlesheets4,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
googlesheets4,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
googlesheets4,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
googlesheets4,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
googlesheets4,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
googlesheets4,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
googlesheets4,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
googlesheets4,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
googlesheets4,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
googlesheets4,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
googlesheets4,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
googlesheets4,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
googlesheets4,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
googlesheets4,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
googlesheets4,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
googlesheets4,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
googlesheets4,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
googlesheets4,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
googlesheets4,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
googlesheets4,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
googlesheets4,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
googlesheets4,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
googlesheets4,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
googlesheets4,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
googlesheets4,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
googlesheets4,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
googlesheets4,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
googlesheets4,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
googlesheets4,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
googlesheets4,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
googlesheets4,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
googlesheets4,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
googlesheets4,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
googlesheets4,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
googlesheets4,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
googlesheets4,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
googlesheets4,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
googlesheets4,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
googlesheets4,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
googlesheets4,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
googlesheets4,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
googlesheets4,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
googlesheets4,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
googlesheets4,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
googlesheets4,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
googlesheets4,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
googlesheets4,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
googlesheets4,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
googlesheets4,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
googlesheets4,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
googlesheets4,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
googlesheets4,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
googlesheets4,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
googlesheets4,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
googlesheets4,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
googlesheets4,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
googlesheets4,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
googlesheets4,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
googlesheets4,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
googlesheets4,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
googlesheets4,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
googlesheets4,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
googlesheets4,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
googlesheets4,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
googlesheets4,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
googlesheets4,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
googlesheets4,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
googlesheets4,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
googlesheets4,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
googlesheets4,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
googlesheets4,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
googlesheets4,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
googlesheets4,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
googlesheets4,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
googlesheets4,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
googlesheets4,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
googlesheets4,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
googlesheets4,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
googlesheets4,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
googlesheets4,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
googlesheets4,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
googlesheets4,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
googlesheets4,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
googlesheets4,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
googlesheets4,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
googlesheets4,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
googlesheets4,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
googlesheets4,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
googlesheets4,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
googlesheets4,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
googlesheets4,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
googlesheets4,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
googlesheets4,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
googlesheets4,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
googlesheets4,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
googlesheets4,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
googlesheets4,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
googlesheets4,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
googlesheets4,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
googlesheets4,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
googlesheets4,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
googlesheets4,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
googlesheets4,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
googlesheets4,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
googlesheets4,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
googlesheets4,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
googlesheets4,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
googlesheets4,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
haven,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
haven,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
haven,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
haven,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
haven,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
haven,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
haven,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
haven,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
haven,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
haven,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
haven,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
haven,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
haven,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
haven,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
haven,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
haven,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
haven,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
haven,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
haven,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
haven,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
haven,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
haven,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
haven,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
haven,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
haven,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
haven,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
haven,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
haven,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
haven,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
haven,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
haven,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
haven,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
haven,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
haven,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
haven,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
haven,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
haven,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
haven,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
haven,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
haven,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
haven,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
haven,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
haven,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
haven,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
haven,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
haven,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
haven,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
haven,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
haven,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
haven,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
haven,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
haven,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
haven,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
haven,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
haven,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
haven,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
haven,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
haven,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
haven,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
haven,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
haven,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
haven,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
haven,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
haven,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
haven,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
haven,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
haven,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
haven,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
haven,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
haven,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
haven,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
haven,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
haven,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
haven,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
haven,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
haven,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
haven,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
haven,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
haven,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
haven,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
haven,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
haven,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
haven,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
haven,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
haven,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
haven,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
haven,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
haven,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
haven,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
haven,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
haven,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
haven,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
haven,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
haven,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
haven,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
haven,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
haven,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
haven,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
haven,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
haven,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
haven,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
haven,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
haven,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
haven,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
haven,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
haven,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
haven,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
haven,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
haven,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
haven,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
haven,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
haven,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
haven,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
haven,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
haven,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
haven,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
haven,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
haven,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
haven,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
haven,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
haven,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
haven,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
haven,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
haven,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
haven,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
haven,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
haven,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
haven,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
haven,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
haven,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
haven,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
haven,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
haven,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
haven,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
haven,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
haven,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
haven,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
haven,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
haven,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
haven,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
haven,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
haven,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
haven,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
haven,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
haven,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
haven,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
haven,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
haven,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
haven,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
haven,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
haven,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
haven,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
haven,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
haven,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
haven,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
haven,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
haven,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
haven,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
haven,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
haven,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
haven,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
haven,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
haven,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
haven,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
haven,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
haven,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
haven,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
haven,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
haven,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
haven,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
haven,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
haven,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
haven,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
haven,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
haven,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
haven,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
haven,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
haven,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
haven,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
haven,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
haven,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
haven,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
haven,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
haven,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
haven,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
haven,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
haven,1,178,183,FALSE,`obj_address()` is now exported.,NA
haven,1,179,184,FALSE,`%<~%` now actually works.,NA
haven,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
haven,1,182,187,FALSE,Fix for CRAN checks.,NA
haven,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
haven,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
haven,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
haven,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
haven,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
haven,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
haven,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
haven,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
haven,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
haven,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
haven,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
haven,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
haven,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
haven,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
haven,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
haven,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
haven,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
haven,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
haven,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
haven,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
haven,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
haven,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
haven,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
haven,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
haven,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
haven,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
haven,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
haven,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
haven,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
haven,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
haven,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
haven,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
haven,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
haven,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
haven,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
haven,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
haven,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
haven,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
haven,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
haven,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
haven,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
haven,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
haven,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
haven,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
haven,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
haven,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
haven,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
haven,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
haven,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
haven,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
haven,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
haven,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
haven,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
haven,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
haven,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
haven,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
haven,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
haven,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
haven,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
haven,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
haven,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
haven,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
haven,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
haven,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
haven,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
haven,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
haven,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
haven,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
haven,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
haven,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
haven,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
haven,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
haven,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
haven,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
haven,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
haven,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
haven,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
haven,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
haven,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
haven,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
haven,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
haven,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
haven,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
haven,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
haven,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
haven,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
haven,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
haven,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
haven,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
haven,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
haven,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
haven,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
haven,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
haven,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
haven,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
haven,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
haven,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
haven,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
haven,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
haven,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
haven,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
haven,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
haven,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
haven,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
haven,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
haven,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
haven,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
haven,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
haven,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
haven,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
haven,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
haven,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
haven,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
haven,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
haven,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
haven,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
haven,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
haven,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
haven,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
haven,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
haven,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
haven,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
haven,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
haven,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
haven,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
haven,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
haven,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
haven,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
haven,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
haven,1,307,321,FALSE,This handler also works as a calling handler:,NA
haven,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
haven,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
haven,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
haven,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
haven,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
haven,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
haven,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
haven,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
haven,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
haven,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
haven,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
haven,1,316,332,FALSE,`calling()` now boxes its argument.,NA
haven,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
haven,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
haven,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
haven,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
haven,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
haven,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
haven,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
haven,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
haven,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
haven,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
haven,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
haven,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
haven,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
haven,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
haven,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
haven,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
haven,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
haven,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
haven,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
haven,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
haven,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
haven,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
haven,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
haven,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
haven,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
haven,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
haven,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
haven,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
haven,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
haven,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
haven,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
haven,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
haven,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
haven,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
haven,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
haven,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
haven,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
haven,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
haven,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
haven,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
haven,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
haven,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
haven,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
haven,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
haven,1,357,375,FALSE,`!!!` disallows:,NA
haven,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
haven,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
haven,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
haven,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
haven,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
haven,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
haven,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
haven,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
haven,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
haven,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
haven,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
haven,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
haven,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
haven,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
haven,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
haven,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
haven,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
haven,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
haven,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
haven,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
haven,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
haven,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
haven,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
haven,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
haven,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
haven,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
haven,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
haven,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
haven,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
haven,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
haven,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
haven,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
haven,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
haven,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
haven,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
haven,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
haven,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
haven,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
haven,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
haven,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
haven,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
haven,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
haven,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
haven,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
haven,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
haven,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
haven,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
haven,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
haven,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
haven,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
haven,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
haven,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
haven,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
haven,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
haven,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
haven,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
haven,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
haven,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
haven,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
haven,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
haven,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
haven,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
haven,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
haven,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
haven,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
haven,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
haven,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
haven,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
haven,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
haven,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
haven,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
haven,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
haven,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
haven,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
haven,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
haven,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
haven,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
haven,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
haven,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
haven,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
haven,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
haven,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
haven,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
haven,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
haven,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
haven,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
haven,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
haven,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
haven,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
haven,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
haven,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
haven,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
haven,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
haven,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
haven,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
haven,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
haven,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
haven,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
haven,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
haven,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
haven,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
haven,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
haven,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
haven,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
haven,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
haven,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
haven,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
haven,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
haven,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
haven,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
haven,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
haven,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
haven,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
haven,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
haven,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
haven,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
haven,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
haven,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
haven,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
haven,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
haven,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
haven,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
haven,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
haven,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
haven,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
haven,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
haven,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
haven,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
haven,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
haven,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
haven,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
haven,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
haven,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
haven,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
haven,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
haven,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
haven,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
haven,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
haven,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
haven,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
haven,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
haven,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
haven,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
haven,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
haven,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
haven,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
haven,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
haven,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
haven,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
haven,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
haven,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
haven,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
haven,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
haven,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
haven,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
haven,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
haven,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
haven,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
haven,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
haven,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
haven,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
haven,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
haven,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
haven,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
haven,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
haven,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
haven,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
haven,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
haven,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
haven,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
haven,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
haven,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
haven,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
haven,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
haven,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
haven,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
haven,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
haven,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
haven,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
haven,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
hms,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
hms,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
hms,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
hms,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
hms,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
hms,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
hms,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
hms,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
hms,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
hms,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
hms,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
hms,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
hms,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
hms,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
hms,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
hms,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
hms,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
hms,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
hms,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
hms,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
hms,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
hms,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
hms,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
hms,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
hms,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
hms,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
hms,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
hms,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
hms,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
hms,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
hms,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
hms,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
hms,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
hms,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
hms,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
hms,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
hms,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
hms,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
hms,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
hms,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
hms,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
hms,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
hms,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
hms,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
hms,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
hms,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
hms,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
hms,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
hms,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
hms,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
hms,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
hms,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
hms,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
hms,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
hms,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
hms,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
hms,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
hms,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
hms,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
hms,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
hms,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
hms,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
hms,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
hms,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
hms,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
hms,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
hms,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
hms,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
hms,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
hms,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
hms,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
hms,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
hms,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
hms,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
hms,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
hms,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
hms,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
hms,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
hms,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
hms,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
hms,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
hms,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
hms,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
hms,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
hms,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
hms,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
hms,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
hms,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
hms,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
hms,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
hms,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
hms,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
hms,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
hms,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
hms,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
hms,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
hms,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
hms,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
hms,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
hms,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
hms,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
hms,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
hms,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
hms,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
hms,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
hms,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
hms,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
hms,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
hms,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
hms,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
hms,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
hms,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
hms,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
hms,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
hms,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
hms,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
hms,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
hms,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
hms,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
hms,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
hms,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
hms,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
hms,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
hms,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
hms,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
hms,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
hms,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
hms,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
hms,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
hms,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
hms,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
hms,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
hms,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
hms,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
hms,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
hms,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
hms,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
hms,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
hms,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
hms,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
hms,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
hms,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
hms,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
hms,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
hms,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
hms,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
hms,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
hms,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
hms,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
hms,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
hms,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
hms,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
hms,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
hms,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
hms,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
hms,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
hms,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
hms,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
hms,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
hms,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
hms,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
hms,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
hms,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
hms,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
hms,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
hms,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
hms,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
hms,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
hms,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
hms,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
hms,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
hms,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
hms,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
hms,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
hms,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
hms,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
hms,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
hms,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
hms,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
hms,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
hms,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
hms,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
hms,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
hms,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
hms,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
hms,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
hms,1,178,183,FALSE,`obj_address()` is now exported.,NA
hms,1,179,184,FALSE,`%<~%` now actually works.,NA
hms,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
hms,1,182,187,FALSE,Fix for CRAN checks.,NA
hms,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
hms,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
hms,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
hms,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
hms,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
hms,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
hms,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
hms,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
hms,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
hms,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
hms,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
hms,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
hms,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
hms,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
hms,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
hms,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
hms,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
hms,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
hms,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
hms,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
hms,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
hms,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
hms,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
hms,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
hms,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
hms,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
hms,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
hms,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
hms,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
hms,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
hms,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
hms,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
hms,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
hms,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
hms,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
hms,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
hms,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
hms,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
hms,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
hms,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
hms,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
hms,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
hms,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
hms,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
hms,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
hms,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
hms,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
hms,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
hms,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
hms,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
hms,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
hms,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
hms,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
hms,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
hms,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
hms,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
hms,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
hms,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
hms,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
hms,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
hms,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
hms,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
hms,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
hms,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
hms,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
hms,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
hms,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
hms,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
hms,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
hms,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
hms,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
hms,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
hms,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
hms,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
hms,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
hms,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
hms,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
hms,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
hms,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
hms,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
hms,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
hms,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
hms,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
hms,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
hms,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
hms,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
hms,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
hms,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
hms,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
hms,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
hms,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
hms,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
hms,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
hms,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
hms,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
hms,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
hms,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
hms,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
hms,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
hms,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
hms,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
hms,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
hms,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
hms,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
hms,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
hms,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
hms,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
hms,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
hms,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
hms,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
hms,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
hms,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
hms,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
hms,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
hms,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
hms,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
hms,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
hms,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
hms,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
hms,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
hms,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
hms,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
hms,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
hms,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
hms,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
hms,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
hms,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
hms,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
hms,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
hms,1,307,321,FALSE,This handler also works as a calling handler:,NA
hms,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
hms,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
hms,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
hms,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
hms,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
hms,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
hms,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
hms,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
hms,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
hms,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
hms,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
hms,1,316,332,FALSE,`calling()` now boxes its argument.,NA
hms,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
hms,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
hms,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
hms,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
hms,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
hms,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
hms,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
hms,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
hms,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
hms,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
hms,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
hms,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
hms,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
hms,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
hms,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
hms,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
hms,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
hms,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
hms,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
hms,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
hms,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
hms,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
hms,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
hms,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
hms,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
hms,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
hms,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
hms,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
hms,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
hms,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
hms,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
hms,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
hms,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
hms,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
hms,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
hms,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
hms,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
hms,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
hms,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
hms,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
hms,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
hms,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
hms,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
hms,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
hms,1,357,375,FALSE,`!!!` disallows:,NA
hms,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
hms,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
hms,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
hms,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
hms,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
hms,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
hms,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
hms,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
hms,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
hms,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
hms,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
hms,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
hms,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
hms,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
hms,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
hms,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
hms,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
hms,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
hms,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
hms,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
hms,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
hms,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
hms,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
hms,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
hms,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
hms,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
hms,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
hms,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
hms,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
hms,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
hms,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
hms,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
hms,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
hms,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
hms,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
hms,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
hms,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
hms,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
hms,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
hms,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
hms,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
hms,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
hms,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
hms,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
hms,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
hms,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
hms,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
hms,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
hms,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
hms,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
hms,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
hms,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
hms,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
hms,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
hms,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
hms,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
hms,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
hms,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
hms,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
hms,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
hms,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
hms,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
hms,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
hms,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
hms,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
hms,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
hms,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
hms,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
hms,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
hms,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
hms,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
hms,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
hms,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
hms,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
hms,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
hms,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
hms,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
hms,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
hms,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
hms,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
hms,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
hms,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
hms,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
hms,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
hms,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
hms,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
hms,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
hms,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
hms,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
hms,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
hms,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
hms,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
hms,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
hms,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
hms,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
hms,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
hms,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
hms,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
hms,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
hms,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
hms,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
hms,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
hms,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
hms,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
hms,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
hms,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
hms,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
hms,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
hms,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
hms,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
hms,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
hms,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
hms,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
hms,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
hms,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
hms,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
hms,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
hms,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
hms,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
hms,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
hms,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
hms,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
hms,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
hms,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
hms,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
hms,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
hms,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
hms,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
hms,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
hms,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
hms,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
hms,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
hms,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
hms,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
hms,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
hms,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
hms,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
hms,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
hms,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
hms,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
hms,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
hms,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
hms,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
hms,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
hms,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
hms,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
hms,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
hms,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
hms,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
hms,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
hms,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
hms,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
hms,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
hms,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
hms,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
hms,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
hms,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
hms,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
hms,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
hms,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
hms,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
hms,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
hms,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
hms,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
hms,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
hms,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
hms,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
hms,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
hms,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
hms,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
hms,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
hms,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
hms,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
hms,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
hms,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
hms,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
hms,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
hms,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
hms,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
hms,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
httr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
httr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
httr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
httr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
httr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
httr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
httr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
httr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
httr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
httr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
httr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
httr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
httr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
httr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
httr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
httr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
httr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
httr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
httr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
httr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
httr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
httr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
httr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
httr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
httr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
httr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
httr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
httr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
httr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
httr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
httr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
httr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
httr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
httr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
httr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
httr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
httr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
httr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
httr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
httr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
httr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
httr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
httr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
httr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
httr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
httr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
httr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
httr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
httr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
httr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
httr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
httr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
httr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
httr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
httr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
httr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
httr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
httr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
httr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
httr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
httr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
httr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
httr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
httr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
httr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
httr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
httr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
httr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
httr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
httr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
httr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
httr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
httr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
httr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
httr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
httr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
httr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
httr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
httr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
httr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
httr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
httr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
httr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
httr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
httr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
httr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
httr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
httr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
httr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
httr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
httr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
httr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
httr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
httr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
httr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
httr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
httr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
httr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
httr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
httr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
httr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
httr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
httr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
httr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
httr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
httr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
httr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
httr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
httr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
httr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
httr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
httr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
httr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
httr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
httr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
httr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
httr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
httr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
httr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
httr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
httr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
httr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
httr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
httr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
httr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
httr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
httr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
httr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
httr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
httr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
httr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
httr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
httr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
httr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
httr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
httr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
httr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
httr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
httr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
httr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
httr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
httr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
httr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
httr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
httr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
httr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
httr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
httr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
httr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
httr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
httr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
httr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
httr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
httr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
httr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
httr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
httr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
httr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
httr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
httr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
httr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
httr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
httr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
httr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
httr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
httr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
httr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
httr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
httr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
httr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
httr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
httr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
httr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
httr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
httr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
httr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
httr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
httr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
httr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
httr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
httr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
httr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
httr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
httr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
httr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
httr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
httr,1,178,183,FALSE,`obj_address()` is now exported.,NA
httr,1,179,184,FALSE,`%<~%` now actually works.,NA
httr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
httr,1,182,187,FALSE,Fix for CRAN checks.,NA
httr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
httr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
httr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
httr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
httr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
httr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
httr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
httr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
httr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
httr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
httr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
httr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
httr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
httr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
httr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
httr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
httr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
httr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
httr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
httr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
httr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
httr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
httr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
httr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
httr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
httr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
httr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
httr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
httr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
httr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
httr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
httr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
httr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
httr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
httr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
httr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
httr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
httr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
httr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
httr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
httr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
httr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
httr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
httr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
httr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
httr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
httr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
httr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
httr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
httr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
httr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
httr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
httr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
httr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
httr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
httr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
httr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
httr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
httr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
httr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
httr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
httr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
httr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
httr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
httr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
httr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
httr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
httr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
httr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
httr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
httr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
httr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
httr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
httr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
httr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
httr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
httr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
httr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
httr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
httr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
httr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
httr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
httr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
httr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
httr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
httr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
httr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
httr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
httr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
httr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
httr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
httr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
httr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
httr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
httr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
httr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
httr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
httr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
httr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
httr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
httr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
httr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
httr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
httr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
httr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
httr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
httr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
httr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
httr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
httr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
httr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
httr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
httr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
httr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
httr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
httr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
httr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
httr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
httr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
httr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
httr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
httr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
httr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
httr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
httr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
httr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
httr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
httr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
httr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
httr,1,307,321,FALSE,This handler also works as a calling handler:,NA
httr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
httr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
httr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
httr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
httr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
httr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
httr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
httr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
httr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
httr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
httr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
httr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
httr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
httr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
httr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
httr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
httr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
httr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
httr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
httr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
httr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
httr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
httr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
httr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
httr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
httr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
httr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
httr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
httr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
httr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
httr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
httr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
httr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
httr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
httr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
httr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
httr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
httr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
httr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
httr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
httr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
httr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
httr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
httr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
httr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
httr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
httr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
httr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
httr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
httr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
httr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
httr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
httr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
httr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
httr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
httr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
httr,1,357,375,FALSE,`!!!` disallows:,NA
httr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
httr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
httr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
httr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
httr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
httr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
httr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
httr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
httr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
httr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
httr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
httr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
httr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
httr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
httr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
httr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
httr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
httr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
httr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
httr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
httr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
httr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
httr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
httr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
httr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
httr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
httr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
httr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
httr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
httr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
httr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
httr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
httr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
httr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
httr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
httr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
httr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
httr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
httr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
httr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
httr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
httr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
httr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
httr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
httr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
httr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
httr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
httr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
httr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
httr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
httr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
httr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
httr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
httr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
httr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
httr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
httr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
httr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
httr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
httr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
httr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
httr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
httr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
httr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
httr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
httr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
httr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
httr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
httr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
httr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
httr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
httr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
httr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
httr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
httr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
httr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
httr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
httr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
httr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
httr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
httr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
httr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
httr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
httr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
httr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
httr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
httr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
httr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
httr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
httr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
httr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
httr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
httr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
httr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
httr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
httr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
httr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
httr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
httr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
httr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
httr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
httr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
httr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
httr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
httr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
httr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
httr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
httr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
httr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
httr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
httr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
httr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
httr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
httr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
httr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
httr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
httr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
httr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
httr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
httr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
httr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
httr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
httr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
httr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
httr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
httr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
httr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
httr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
httr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
httr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
httr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
httr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
httr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
httr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
httr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
httr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
httr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
httr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
httr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
httr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
httr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
httr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
httr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
httr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
httr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
httr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
httr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
httr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
httr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
httr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
httr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
httr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
httr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
httr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
httr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
httr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
httr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
httr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
httr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
httr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
httr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
httr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
httr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
httr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
httr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
httr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
httr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
httr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
httr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
httr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
httr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
httr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
httr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
httr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
httr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
httr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
httr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
httr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
httr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
httr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
lubridate,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
lubridate,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
lubridate,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
lubridate,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
lubridate,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
lubridate,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
lubridate,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
lubridate,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
lubridate,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
lubridate,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
lubridate,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
lubridate,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
lubridate,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
lubridate,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
lubridate,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
lubridate,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
lubridate,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
lubridate,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
lubridate,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
lubridate,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
lubridate,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
lubridate,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
lubridate,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
lubridate,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
lubridate,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
lubridate,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
lubridate,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
lubridate,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
lubridate,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
lubridate,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
lubridate,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
lubridate,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
lubridate,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
lubridate,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
lubridate,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
lubridate,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
lubridate,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
lubridate,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
lubridate,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
lubridate,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
lubridate,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
lubridate,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
lubridate,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
lubridate,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
lubridate,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
lubridate,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
lubridate,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
lubridate,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
lubridate,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
lubridate,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
lubridate,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
lubridate,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
lubridate,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
lubridate,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
lubridate,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
lubridate,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
lubridate,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
lubridate,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
lubridate,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
lubridate,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
lubridate,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
lubridate,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
lubridate,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
lubridate,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
lubridate,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
lubridate,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
lubridate,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
lubridate,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
lubridate,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
lubridate,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
lubridate,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
lubridate,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
lubridate,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
lubridate,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
lubridate,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
lubridate,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
lubridate,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
lubridate,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
lubridate,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
lubridate,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
lubridate,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
lubridate,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
lubridate,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
lubridate,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
lubridate,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
lubridate,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
lubridate,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
lubridate,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
lubridate,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
lubridate,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
lubridate,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
lubridate,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
lubridate,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
lubridate,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
lubridate,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
lubridate,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
lubridate,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
lubridate,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
lubridate,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
lubridate,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
lubridate,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
lubridate,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
lubridate,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
lubridate,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
lubridate,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
lubridate,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
lubridate,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
lubridate,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
lubridate,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
lubridate,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
lubridate,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
lubridate,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
lubridate,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
lubridate,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
lubridate,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
lubridate,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
lubridate,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
lubridate,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
lubridate,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
lubridate,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
lubridate,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
lubridate,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
lubridate,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
lubridate,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
lubridate,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
lubridate,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
lubridate,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
lubridate,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
lubridate,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
lubridate,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
lubridate,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
lubridate,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
lubridate,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
lubridate,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
lubridate,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
lubridate,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
lubridate,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
lubridate,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
lubridate,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
lubridate,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
lubridate,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
lubridate,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
lubridate,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
lubridate,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
lubridate,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
lubridate,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
lubridate,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
lubridate,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
lubridate,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
lubridate,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
lubridate,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
lubridate,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
lubridate,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
lubridate,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
lubridate,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
lubridate,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
lubridate,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
lubridate,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
lubridate,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
lubridate,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
lubridate,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
lubridate,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
lubridate,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
lubridate,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
lubridate,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
lubridate,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
lubridate,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
lubridate,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
lubridate,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
lubridate,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
lubridate,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
lubridate,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
lubridate,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
lubridate,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
lubridate,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
lubridate,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
lubridate,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
lubridate,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
lubridate,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
lubridate,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
lubridate,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
lubridate,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
lubridate,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
lubridate,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
lubridate,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
lubridate,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
lubridate,1,178,183,FALSE,`obj_address()` is now exported.,NA
lubridate,1,179,184,FALSE,`%<~%` now actually works.,NA
lubridate,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
lubridate,1,182,187,FALSE,Fix for CRAN checks.,NA
lubridate,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
lubridate,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
lubridate,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
lubridate,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
lubridate,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
lubridate,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
lubridate,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
lubridate,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
lubridate,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
lubridate,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
lubridate,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
lubridate,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
lubridate,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
lubridate,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
lubridate,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
lubridate,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
lubridate,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
lubridate,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
lubridate,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
lubridate,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
lubridate,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
lubridate,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
lubridate,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
lubridate,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
lubridate,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
lubridate,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
lubridate,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
lubridate,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
lubridate,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
lubridate,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
lubridate,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
lubridate,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
lubridate,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
lubridate,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
lubridate,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
lubridate,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
lubridate,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
lubridate,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
lubridate,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
lubridate,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
lubridate,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
lubridate,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
lubridate,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
lubridate,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
lubridate,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
lubridate,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
lubridate,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
lubridate,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
lubridate,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
lubridate,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
lubridate,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
lubridate,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
lubridate,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
lubridate,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
lubridate,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
lubridate,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
lubridate,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
lubridate,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
lubridate,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
lubridate,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
lubridate,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
lubridate,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
lubridate,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
lubridate,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
lubridate,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
lubridate,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
lubridate,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
lubridate,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
lubridate,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
lubridate,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
lubridate,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
lubridate,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
lubridate,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
lubridate,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
lubridate,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
lubridate,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
lubridate,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
lubridate,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
lubridate,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
lubridate,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
lubridate,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
lubridate,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
lubridate,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
lubridate,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
lubridate,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
lubridate,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
lubridate,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
lubridate,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
lubridate,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
lubridate,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
lubridate,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
lubridate,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
lubridate,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
lubridate,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
lubridate,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
lubridate,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
lubridate,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
lubridate,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
lubridate,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
lubridate,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
lubridate,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
lubridate,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
lubridate,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
lubridate,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
lubridate,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
lubridate,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
lubridate,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
lubridate,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
lubridate,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
lubridate,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
lubridate,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
lubridate,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
lubridate,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
lubridate,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
lubridate,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
lubridate,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
lubridate,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
lubridate,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
lubridate,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
lubridate,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
lubridate,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
lubridate,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
lubridate,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
lubridate,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
lubridate,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
lubridate,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
lubridate,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
lubridate,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
lubridate,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
lubridate,1,307,321,FALSE,This handler also works as a calling handler:,NA
lubridate,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
lubridate,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
lubridate,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
lubridate,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
lubridate,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
lubridate,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
lubridate,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
lubridate,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
lubridate,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
lubridate,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
lubridate,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
lubridate,1,316,332,FALSE,`calling()` now boxes its argument.,NA
lubridate,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
lubridate,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
lubridate,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
lubridate,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
lubridate,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
lubridate,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
lubridate,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
lubridate,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
lubridate,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
lubridate,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
lubridate,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
lubridate,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
lubridate,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
lubridate,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
lubridate,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
lubridate,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
lubridate,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
lubridate,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
lubridate,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
lubridate,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
lubridate,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
lubridate,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
lubridate,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
lubridate,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
lubridate,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
lubridate,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
lubridate,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
lubridate,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
lubridate,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
lubridate,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
lubridate,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
lubridate,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
lubridate,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
lubridate,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
lubridate,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
lubridate,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
lubridate,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
lubridate,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
lubridate,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
lubridate,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
lubridate,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
lubridate,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
lubridate,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
lubridate,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
lubridate,1,357,375,FALSE,`!!!` disallows:,NA
lubridate,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
lubridate,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
lubridate,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
lubridate,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
lubridate,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
lubridate,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
lubridate,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
lubridate,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
lubridate,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
lubridate,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
lubridate,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
lubridate,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
lubridate,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
lubridate,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
lubridate,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
lubridate,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
lubridate,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
lubridate,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
lubridate,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
lubridate,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
lubridate,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
lubridate,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
lubridate,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
lubridate,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
lubridate,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
lubridate,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
lubridate,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
lubridate,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
lubridate,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
lubridate,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
lubridate,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
lubridate,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
lubridate,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
lubridate,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
lubridate,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
lubridate,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
lubridate,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
lubridate,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
lubridate,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
lubridate,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
lubridate,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
lubridate,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
lubridate,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
lubridate,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
lubridate,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
lubridate,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
lubridate,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
lubridate,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
lubridate,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
lubridate,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
lubridate,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
lubridate,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
lubridate,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
lubridate,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
lubridate,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
lubridate,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
lubridate,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
lubridate,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
lubridate,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
lubridate,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
lubridate,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
lubridate,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
lubridate,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
lubridate,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
lubridate,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
lubridate,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
lubridate,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
lubridate,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
lubridate,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
lubridate,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
lubridate,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
lubridate,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
lubridate,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
lubridate,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
lubridate,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
lubridate,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
lubridate,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
lubridate,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
lubridate,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
lubridate,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
lubridate,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
lubridate,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
lubridate,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
lubridate,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
lubridate,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
lubridate,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
lubridate,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
lubridate,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
lubridate,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
lubridate,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
lubridate,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
lubridate,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
lubridate,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
lubridate,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
lubridate,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
lubridate,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
lubridate,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
lubridate,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
lubridate,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
lubridate,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
lubridate,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
lubridate,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
lubridate,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
lubridate,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
lubridate,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
lubridate,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
lubridate,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
lubridate,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
lubridate,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
lubridate,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
lubridate,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
lubridate,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
lubridate,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
lubridate,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
lubridate,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
lubridate,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
lubridate,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
lubridate,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
lubridate,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
lubridate,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
lubridate,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
lubridate,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
lubridate,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
lubridate,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
lubridate,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
lubridate,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
lubridate,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
lubridate,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
lubridate,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
lubridate,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
lubridate,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
lubridate,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
lubridate,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
lubridate,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
lubridate,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
lubridate,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
lubridate,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
lubridate,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
lubridate,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
lubridate,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
lubridate,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
lubridate,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
lubridate,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
lubridate,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
lubridate,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
lubridate,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
lubridate,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
lubridate,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
lubridate,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
lubridate,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
lubridate,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
lubridate,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
lubridate,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
lubridate,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
lubridate,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
lubridate,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
lubridate,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
lubridate,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
lubridate,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
lubridate,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
lubridate,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
lubridate,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
lubridate,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
lubridate,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
lubridate,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
lubridate,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
lubridate,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
lubridate,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
lubridate,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
lubridate,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
lubridate,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
lubridate,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
lubridate,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
lubridate,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
lubridate,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
lubridate,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
lubridate,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
lubridate,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
lubridate,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
lubridate,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
magrittr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
magrittr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
magrittr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
magrittr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
magrittr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
magrittr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
magrittr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
magrittr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
magrittr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
magrittr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
magrittr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
magrittr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
magrittr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
magrittr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
magrittr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
magrittr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
magrittr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
magrittr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
magrittr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
magrittr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
magrittr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
magrittr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
magrittr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
magrittr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
magrittr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
magrittr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
magrittr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
magrittr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
magrittr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
magrittr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
magrittr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
magrittr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
magrittr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
magrittr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
magrittr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
magrittr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
magrittr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
magrittr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
magrittr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
magrittr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
magrittr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
magrittr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
magrittr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
magrittr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
magrittr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
magrittr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
magrittr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
magrittr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
magrittr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
magrittr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
magrittr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
magrittr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
magrittr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
magrittr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
magrittr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
magrittr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
magrittr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
magrittr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
magrittr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
magrittr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
magrittr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
magrittr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
magrittr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
magrittr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
magrittr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
magrittr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
magrittr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
magrittr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
magrittr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
magrittr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
magrittr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
magrittr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
magrittr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
magrittr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
magrittr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
magrittr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
magrittr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
magrittr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
magrittr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
magrittr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
magrittr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
magrittr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
magrittr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
magrittr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
magrittr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
magrittr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
magrittr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
magrittr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
magrittr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
magrittr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
magrittr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
magrittr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
magrittr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
magrittr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
magrittr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
magrittr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
magrittr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
magrittr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
magrittr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
magrittr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
magrittr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
magrittr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
magrittr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
magrittr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
magrittr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
magrittr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
magrittr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
magrittr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
magrittr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
magrittr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
magrittr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
magrittr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
magrittr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
magrittr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
magrittr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
magrittr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
magrittr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
magrittr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
magrittr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
magrittr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
magrittr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
magrittr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
magrittr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
magrittr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
magrittr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
magrittr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
magrittr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
magrittr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
magrittr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
magrittr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
magrittr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
magrittr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
magrittr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
magrittr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
magrittr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
magrittr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
magrittr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
magrittr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
magrittr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
magrittr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
magrittr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
magrittr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
magrittr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
magrittr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
magrittr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
magrittr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
magrittr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
magrittr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
magrittr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
magrittr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
magrittr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
magrittr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
magrittr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
magrittr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
magrittr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
magrittr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
magrittr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
magrittr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
magrittr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
magrittr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
magrittr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
magrittr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
magrittr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
magrittr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
magrittr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
magrittr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
magrittr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
magrittr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
magrittr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
magrittr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
magrittr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
magrittr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
magrittr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
magrittr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
magrittr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
magrittr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
magrittr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
magrittr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
magrittr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
magrittr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
magrittr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
magrittr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
magrittr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
magrittr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
magrittr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
magrittr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
magrittr,1,178,183,FALSE,`obj_address()` is now exported.,NA
magrittr,1,179,184,FALSE,`%<~%` now actually works.,NA
magrittr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
magrittr,1,182,187,FALSE,Fix for CRAN checks.,NA
magrittr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
magrittr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
magrittr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
magrittr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
magrittr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
magrittr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
magrittr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
magrittr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
magrittr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
magrittr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
magrittr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
magrittr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
magrittr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
magrittr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
magrittr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
magrittr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
magrittr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
magrittr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
magrittr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
magrittr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
magrittr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
magrittr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
magrittr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
magrittr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
magrittr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
magrittr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
magrittr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
magrittr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
magrittr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
magrittr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
magrittr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
magrittr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
magrittr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
magrittr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
magrittr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
magrittr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
magrittr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
magrittr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
magrittr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
magrittr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
magrittr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
magrittr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
magrittr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
magrittr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
magrittr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
magrittr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
magrittr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
magrittr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
magrittr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
magrittr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
magrittr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
magrittr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
magrittr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
magrittr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
magrittr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
magrittr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
magrittr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
magrittr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
magrittr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
magrittr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
magrittr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
magrittr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
magrittr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
magrittr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
magrittr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
magrittr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
magrittr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
magrittr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
magrittr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
magrittr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
magrittr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
magrittr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
magrittr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
magrittr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
magrittr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
magrittr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
magrittr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
magrittr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
magrittr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
magrittr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
magrittr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
magrittr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
magrittr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
magrittr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
magrittr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
magrittr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
magrittr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
magrittr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
magrittr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
magrittr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
magrittr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
magrittr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
magrittr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
magrittr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
magrittr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
magrittr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
magrittr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
magrittr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
magrittr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
magrittr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
magrittr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
magrittr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
magrittr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
magrittr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
magrittr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
magrittr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
magrittr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
magrittr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
magrittr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
magrittr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
magrittr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
magrittr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
magrittr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
magrittr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
magrittr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
magrittr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
magrittr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
magrittr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
magrittr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
magrittr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
magrittr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
magrittr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
magrittr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
magrittr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
magrittr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
magrittr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
magrittr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
magrittr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
magrittr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
magrittr,1,307,321,FALSE,This handler also works as a calling handler:,NA
magrittr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
magrittr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
magrittr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
magrittr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
magrittr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
magrittr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
magrittr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
magrittr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
magrittr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
magrittr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
magrittr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
magrittr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
magrittr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
magrittr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
magrittr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
magrittr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
magrittr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
magrittr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
magrittr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
magrittr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
magrittr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
magrittr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
magrittr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
magrittr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
magrittr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
magrittr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
magrittr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
magrittr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
magrittr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
magrittr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
magrittr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
magrittr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
magrittr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
magrittr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
magrittr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
magrittr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
magrittr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
magrittr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
magrittr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
magrittr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
magrittr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
magrittr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
magrittr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
magrittr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
magrittr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
magrittr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
magrittr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
magrittr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
magrittr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
magrittr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
magrittr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
magrittr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
magrittr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
magrittr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
magrittr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
magrittr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
magrittr,1,357,375,FALSE,`!!!` disallows:,NA
magrittr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
magrittr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
magrittr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
magrittr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
magrittr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
magrittr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
magrittr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
magrittr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
magrittr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
magrittr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
magrittr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
magrittr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
magrittr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
magrittr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
magrittr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
magrittr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
magrittr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
magrittr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
magrittr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
magrittr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
magrittr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
magrittr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
magrittr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
magrittr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
magrittr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
magrittr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
magrittr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
magrittr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
magrittr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
magrittr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
magrittr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
magrittr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
magrittr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
magrittr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
magrittr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
magrittr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
magrittr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
magrittr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
magrittr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
magrittr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
magrittr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
magrittr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
magrittr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
magrittr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
magrittr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
magrittr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
magrittr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
magrittr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
magrittr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
magrittr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
magrittr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
magrittr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
magrittr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
magrittr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
magrittr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
magrittr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
magrittr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
magrittr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
magrittr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
magrittr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
magrittr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
magrittr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
magrittr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
magrittr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
magrittr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
magrittr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
magrittr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
magrittr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
magrittr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
magrittr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
magrittr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
magrittr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
magrittr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
magrittr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
magrittr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
magrittr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
magrittr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
magrittr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
magrittr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
magrittr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
magrittr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
magrittr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
magrittr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
magrittr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
magrittr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
magrittr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
magrittr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
magrittr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
magrittr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
magrittr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
magrittr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
magrittr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
magrittr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
magrittr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
magrittr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
magrittr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
magrittr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
magrittr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
magrittr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
magrittr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
magrittr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
magrittr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
magrittr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
magrittr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
magrittr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
magrittr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
magrittr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
magrittr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
magrittr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
magrittr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
magrittr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
magrittr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
magrittr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
magrittr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
magrittr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
magrittr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
magrittr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
magrittr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
magrittr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
magrittr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
magrittr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
magrittr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
magrittr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
magrittr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
magrittr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
magrittr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
magrittr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
magrittr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
magrittr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
magrittr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
magrittr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
magrittr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
magrittr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
magrittr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
magrittr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
magrittr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
magrittr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
magrittr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
magrittr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
magrittr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
magrittr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
magrittr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
magrittr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
magrittr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
magrittr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
magrittr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
magrittr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
magrittr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
magrittr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
magrittr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
magrittr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
magrittr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
magrittr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
magrittr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
magrittr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
magrittr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
magrittr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
magrittr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
magrittr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
magrittr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
magrittr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
magrittr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
magrittr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
magrittr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
magrittr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
magrittr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
magrittr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
magrittr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
magrittr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
magrittr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
magrittr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
magrittr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
magrittr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
magrittr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
magrittr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
magrittr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
magrittr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
magrittr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
magrittr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
magrittr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
modelr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
modelr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
modelr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
modelr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
modelr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
modelr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
modelr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
modelr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
modelr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
modelr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
modelr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
modelr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
modelr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
modelr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
modelr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
modelr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
modelr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
modelr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
modelr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
modelr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
modelr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
modelr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
modelr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
modelr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
modelr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
modelr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
modelr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
modelr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
modelr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
modelr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
modelr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
modelr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
modelr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
modelr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
modelr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
modelr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
modelr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
modelr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
modelr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
modelr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
modelr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
modelr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
modelr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
modelr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
modelr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
modelr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
modelr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
modelr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
modelr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
modelr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
modelr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
modelr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
modelr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
modelr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
modelr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
modelr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
modelr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
modelr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
modelr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
modelr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
modelr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
modelr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
modelr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
modelr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
modelr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
modelr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
modelr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
modelr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
modelr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
modelr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
modelr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
modelr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
modelr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
modelr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
modelr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
modelr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
modelr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
modelr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
modelr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
modelr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
modelr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
modelr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
modelr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
modelr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
modelr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
modelr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
modelr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
modelr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
modelr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
modelr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
modelr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
modelr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
modelr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
modelr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
modelr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
modelr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
modelr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
modelr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
modelr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
modelr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
modelr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
modelr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
modelr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
modelr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
modelr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
modelr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
modelr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
modelr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
modelr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
modelr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
modelr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
modelr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
modelr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
modelr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
modelr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
modelr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
modelr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
modelr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
modelr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
modelr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
modelr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
modelr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
modelr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
modelr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
modelr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
modelr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
modelr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
modelr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
modelr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
modelr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
modelr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
modelr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
modelr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
modelr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
modelr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
modelr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
modelr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
modelr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
modelr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
modelr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
modelr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
modelr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
modelr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
modelr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
modelr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
modelr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
modelr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
modelr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
modelr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
modelr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
modelr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
modelr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
modelr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
modelr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
modelr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
modelr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
modelr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
modelr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
modelr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
modelr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
modelr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
modelr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
modelr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
modelr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
modelr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
modelr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
modelr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
modelr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
modelr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
modelr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
modelr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
modelr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
modelr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
modelr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
modelr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
modelr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
modelr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
modelr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
modelr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
modelr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
modelr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
modelr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
modelr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
modelr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
modelr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
modelr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
modelr,1,178,183,FALSE,`obj_address()` is now exported.,NA
modelr,1,179,184,FALSE,`%<~%` now actually works.,NA
modelr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
modelr,1,182,187,FALSE,Fix for CRAN checks.,NA
modelr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
modelr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
modelr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
modelr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
modelr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
modelr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
modelr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
modelr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
modelr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
modelr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
modelr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
modelr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
modelr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
modelr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
modelr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
modelr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
modelr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
modelr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
modelr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
modelr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
modelr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
modelr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
modelr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
modelr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
modelr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
modelr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
modelr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
modelr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
modelr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
modelr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
modelr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
modelr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
modelr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
modelr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
modelr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
modelr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
modelr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
modelr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
modelr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
modelr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
modelr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
modelr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
modelr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
modelr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
modelr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
modelr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
modelr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
modelr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
modelr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
modelr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
modelr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
modelr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
modelr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
modelr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
modelr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
modelr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
modelr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
modelr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
modelr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
modelr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
modelr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
modelr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
modelr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
modelr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
modelr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
modelr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
modelr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
modelr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
modelr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
modelr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
modelr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
modelr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
modelr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
modelr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
modelr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
modelr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
modelr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
modelr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
modelr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
modelr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
modelr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
modelr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
modelr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
modelr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
modelr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
modelr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
modelr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
modelr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
modelr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
modelr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
modelr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
modelr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
modelr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
modelr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
modelr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
modelr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
modelr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
modelr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
modelr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
modelr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
modelr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
modelr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
modelr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
modelr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
modelr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
modelr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
modelr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
modelr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
modelr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
modelr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
modelr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
modelr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
modelr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
modelr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
modelr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
modelr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
modelr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
modelr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
modelr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
modelr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
modelr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
modelr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
modelr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
modelr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
modelr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
modelr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
modelr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
modelr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
modelr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
modelr,1,307,321,FALSE,This handler also works as a calling handler:,NA
modelr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
modelr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
modelr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
modelr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
modelr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
modelr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
modelr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
modelr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
modelr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
modelr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
modelr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
modelr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
modelr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
modelr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
modelr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
modelr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
modelr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
modelr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
modelr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
modelr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
modelr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
modelr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
modelr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
modelr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
modelr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
modelr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
modelr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
modelr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
modelr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
modelr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
modelr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
modelr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
modelr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
modelr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
modelr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
modelr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
modelr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
modelr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
modelr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
modelr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
modelr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
modelr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
modelr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
modelr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
modelr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
modelr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
modelr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
modelr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
modelr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
modelr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
modelr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
modelr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
modelr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
modelr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
modelr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
modelr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
modelr,1,357,375,FALSE,`!!!` disallows:,NA
modelr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
modelr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
modelr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
modelr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
modelr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
modelr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
modelr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
modelr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
modelr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
modelr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
modelr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
modelr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
modelr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
modelr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
modelr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
modelr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
modelr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
modelr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
modelr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
modelr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
modelr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
modelr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
modelr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
modelr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
modelr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
modelr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
modelr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
modelr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
modelr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
modelr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
modelr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
modelr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
modelr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
modelr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
modelr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
modelr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
modelr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
modelr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
modelr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
modelr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
modelr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
modelr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
modelr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
modelr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
modelr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
modelr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
modelr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
modelr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
modelr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
modelr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
modelr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
modelr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
modelr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
modelr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
modelr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
modelr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
modelr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
modelr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
modelr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
modelr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
modelr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
modelr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
modelr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
modelr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
modelr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
modelr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
modelr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
modelr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
modelr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
modelr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
modelr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
modelr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
modelr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
modelr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
modelr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
modelr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
modelr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
modelr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
modelr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
modelr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
modelr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
modelr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
modelr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
modelr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
modelr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
modelr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
modelr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
modelr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
modelr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
modelr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
modelr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
modelr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
modelr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
modelr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
modelr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
modelr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
modelr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
modelr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
modelr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
modelr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
modelr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
modelr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
modelr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
modelr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
modelr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
modelr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
modelr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
modelr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
modelr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
modelr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
modelr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
modelr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
modelr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
modelr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
modelr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
modelr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
modelr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
modelr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
modelr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
modelr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
modelr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
modelr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
modelr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
modelr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
modelr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
modelr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
modelr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
modelr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
modelr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
modelr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
modelr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
modelr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
modelr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
modelr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
modelr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
modelr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
modelr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
modelr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
modelr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
modelr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
modelr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
modelr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
modelr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
modelr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
modelr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
modelr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
modelr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
modelr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
modelr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
modelr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
modelr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
modelr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
modelr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
modelr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
modelr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
modelr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
modelr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
modelr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
modelr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
modelr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
modelr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
modelr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
modelr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
modelr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
modelr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
modelr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
modelr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
modelr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
modelr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
modelr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
modelr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
modelr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
modelr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
modelr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
modelr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
modelr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
modelr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
modelr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
modelr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
modelr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
pillar,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
pillar,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
pillar,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
pillar,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
pillar,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
pillar,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
pillar,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
pillar,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
pillar,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
pillar,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
pillar,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
pillar,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
pillar,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
pillar,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
pillar,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
pillar,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
pillar,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
pillar,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
pillar,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
pillar,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
pillar,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
pillar,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
pillar,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
pillar,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
pillar,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
pillar,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
pillar,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
pillar,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
pillar,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
pillar,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
pillar,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
pillar,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
pillar,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
pillar,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
pillar,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
pillar,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
pillar,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
pillar,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
pillar,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
pillar,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
pillar,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
pillar,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
pillar,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
pillar,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
pillar,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
pillar,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
pillar,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
pillar,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
pillar,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
pillar,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
pillar,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
pillar,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
pillar,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
pillar,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
pillar,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
pillar,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
pillar,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
pillar,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
pillar,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
pillar,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
pillar,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
pillar,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
pillar,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
pillar,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
pillar,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
pillar,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
pillar,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
pillar,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
pillar,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
pillar,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
pillar,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
pillar,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
pillar,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
pillar,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
pillar,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
pillar,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
pillar,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
pillar,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
pillar,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
pillar,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
pillar,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
pillar,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
pillar,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
pillar,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
pillar,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
pillar,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
pillar,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
pillar,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
pillar,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
pillar,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
pillar,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
pillar,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
pillar,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
pillar,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
pillar,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
pillar,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
pillar,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
pillar,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
pillar,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
pillar,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
pillar,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
pillar,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
pillar,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
pillar,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
pillar,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
pillar,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
pillar,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
pillar,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
pillar,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
pillar,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
pillar,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
pillar,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
pillar,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
pillar,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
pillar,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
pillar,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
pillar,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
pillar,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
pillar,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
pillar,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
pillar,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
pillar,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
pillar,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
pillar,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
pillar,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
pillar,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
pillar,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
pillar,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
pillar,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
pillar,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
pillar,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
pillar,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
pillar,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
pillar,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
pillar,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
pillar,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
pillar,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
pillar,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
pillar,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
pillar,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
pillar,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
pillar,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
pillar,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
pillar,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
pillar,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
pillar,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
pillar,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
pillar,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
pillar,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
pillar,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
pillar,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
pillar,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
pillar,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
pillar,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
pillar,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
pillar,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
pillar,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
pillar,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
pillar,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
pillar,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
pillar,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
pillar,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
pillar,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
pillar,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
pillar,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
pillar,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
pillar,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
pillar,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
pillar,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
pillar,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
pillar,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
pillar,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
pillar,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
pillar,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
pillar,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
pillar,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
pillar,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
pillar,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
pillar,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
pillar,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
pillar,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
pillar,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
pillar,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
pillar,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
pillar,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
pillar,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
pillar,1,178,183,FALSE,`obj_address()` is now exported.,NA
pillar,1,179,184,FALSE,`%<~%` now actually works.,NA
pillar,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
pillar,1,182,187,FALSE,Fix for CRAN checks.,NA
pillar,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
pillar,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
pillar,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
pillar,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
pillar,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
pillar,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
pillar,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
pillar,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
pillar,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
pillar,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
pillar,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
pillar,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
pillar,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
pillar,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
pillar,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
pillar,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
pillar,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
pillar,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
pillar,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
pillar,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
pillar,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
pillar,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
pillar,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
pillar,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
pillar,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
pillar,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
pillar,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
pillar,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
pillar,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
pillar,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
pillar,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
pillar,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
pillar,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
pillar,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
pillar,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
pillar,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
pillar,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
pillar,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
pillar,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
pillar,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
pillar,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
pillar,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
pillar,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
pillar,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
pillar,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
pillar,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
pillar,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
pillar,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
pillar,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
pillar,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
pillar,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
pillar,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
pillar,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
pillar,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
pillar,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
pillar,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
pillar,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
pillar,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
pillar,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
pillar,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
pillar,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
pillar,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
pillar,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
pillar,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
pillar,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
pillar,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
pillar,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
pillar,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
pillar,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
pillar,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
pillar,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
pillar,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
pillar,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
pillar,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
pillar,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
pillar,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
pillar,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
pillar,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
pillar,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
pillar,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
pillar,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
pillar,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
pillar,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
pillar,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
pillar,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
pillar,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
pillar,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
pillar,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
pillar,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
pillar,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
pillar,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
pillar,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
pillar,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
pillar,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
pillar,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
pillar,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
pillar,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
pillar,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
pillar,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
pillar,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
pillar,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
pillar,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
pillar,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
pillar,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
pillar,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
pillar,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
pillar,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
pillar,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
pillar,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
pillar,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
pillar,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
pillar,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
pillar,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
pillar,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
pillar,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
pillar,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
pillar,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
pillar,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
pillar,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
pillar,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
pillar,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
pillar,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
pillar,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
pillar,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
pillar,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
pillar,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
pillar,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
pillar,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
pillar,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
pillar,1,307,321,FALSE,This handler also works as a calling handler:,NA
pillar,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
pillar,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
pillar,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
pillar,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
pillar,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
pillar,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
pillar,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
pillar,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
pillar,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
pillar,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
pillar,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
pillar,1,316,332,FALSE,`calling()` now boxes its argument.,NA
pillar,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
pillar,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
pillar,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
pillar,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
pillar,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
pillar,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
pillar,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
pillar,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
pillar,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
pillar,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
pillar,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
pillar,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
pillar,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
pillar,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
pillar,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
pillar,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
pillar,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
pillar,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
pillar,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
pillar,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
pillar,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
pillar,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
pillar,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
pillar,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
pillar,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
pillar,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
pillar,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
pillar,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
pillar,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
pillar,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
pillar,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
pillar,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
pillar,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
pillar,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
pillar,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
pillar,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
pillar,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
pillar,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
pillar,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
pillar,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
pillar,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
pillar,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
pillar,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
pillar,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
pillar,1,357,375,FALSE,`!!!` disallows:,NA
pillar,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
pillar,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
pillar,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
pillar,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
pillar,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
pillar,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
pillar,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
pillar,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
pillar,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
pillar,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
pillar,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
pillar,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
pillar,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
pillar,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
pillar,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
pillar,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
pillar,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
pillar,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
pillar,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
pillar,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
pillar,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
pillar,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
pillar,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
pillar,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
pillar,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
pillar,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
pillar,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
pillar,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
pillar,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
pillar,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
pillar,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
pillar,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
pillar,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
pillar,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
pillar,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
pillar,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
pillar,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
pillar,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
pillar,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
pillar,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
pillar,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
pillar,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
pillar,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
pillar,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
pillar,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
pillar,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
pillar,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
pillar,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
pillar,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
pillar,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
pillar,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
pillar,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
pillar,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
pillar,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
pillar,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
pillar,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
pillar,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
pillar,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
pillar,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
pillar,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
pillar,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
pillar,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
pillar,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
pillar,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
pillar,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
pillar,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
pillar,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
pillar,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
pillar,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
pillar,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
pillar,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
pillar,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
pillar,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
pillar,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
pillar,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
pillar,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
pillar,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
pillar,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
pillar,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
pillar,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
pillar,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
pillar,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
pillar,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
pillar,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
pillar,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
pillar,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
pillar,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
pillar,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
pillar,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
pillar,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
pillar,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
pillar,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
pillar,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
pillar,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
pillar,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
pillar,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
pillar,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
pillar,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
pillar,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
pillar,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
pillar,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
pillar,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
pillar,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
pillar,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
pillar,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
pillar,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
pillar,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
pillar,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
pillar,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
pillar,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
pillar,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
pillar,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
pillar,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
pillar,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
pillar,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
pillar,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
pillar,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
pillar,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
pillar,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
pillar,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
pillar,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
pillar,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
pillar,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
pillar,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
pillar,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
pillar,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
pillar,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
pillar,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
pillar,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
pillar,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
pillar,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
pillar,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
pillar,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
pillar,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
pillar,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
pillar,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
pillar,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
pillar,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
pillar,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
pillar,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
pillar,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
pillar,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
pillar,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
pillar,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
pillar,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
pillar,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
pillar,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
pillar,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
pillar,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
pillar,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
pillar,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
pillar,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
pillar,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
pillar,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
pillar,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
pillar,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
pillar,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
pillar,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
pillar,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
pillar,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
pillar,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
pillar,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
pillar,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
pillar,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
pillar,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
pillar,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
pillar,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
pillar,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
pillar,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
pillar,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
pillar,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
pillar,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
pillar,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
pillar,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
pillar,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
pillar,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
pillar,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
pillar,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
pillar,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
pillar,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
purrr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
purrr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
purrr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
purrr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
purrr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
purrr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
purrr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
purrr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
purrr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
purrr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
purrr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
purrr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
purrr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
purrr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
purrr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
purrr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
purrr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
purrr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
purrr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
purrr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
purrr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
purrr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
purrr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
purrr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
purrr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
purrr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
purrr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
purrr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
purrr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
purrr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
purrr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
purrr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
purrr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
purrr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
purrr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
purrr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
purrr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
purrr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
purrr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
purrr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
purrr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
purrr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
purrr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
purrr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
purrr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
purrr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
purrr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
purrr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
purrr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
purrr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
purrr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
purrr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
purrr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
purrr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
purrr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
purrr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
purrr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
purrr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
purrr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
purrr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
purrr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
purrr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
purrr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
purrr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
purrr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
purrr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
purrr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
purrr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
purrr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
purrr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
purrr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
purrr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
purrr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
purrr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
purrr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
purrr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
purrr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
purrr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
purrr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
purrr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
purrr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
purrr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
purrr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
purrr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
purrr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
purrr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
purrr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
purrr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
purrr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
purrr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
purrr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
purrr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
purrr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
purrr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
purrr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
purrr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
purrr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
purrr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
purrr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
purrr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
purrr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
purrr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
purrr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
purrr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
purrr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
purrr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
purrr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
purrr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
purrr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
purrr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
purrr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
purrr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
purrr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
purrr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
purrr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
purrr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
purrr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
purrr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
purrr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
purrr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
purrr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
purrr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
purrr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
purrr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
purrr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
purrr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
purrr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
purrr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
purrr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
purrr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
purrr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
purrr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
purrr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
purrr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
purrr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
purrr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
purrr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
purrr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
purrr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
purrr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
purrr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
purrr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
purrr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
purrr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
purrr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
purrr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
purrr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
purrr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
purrr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
purrr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
purrr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
purrr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
purrr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
purrr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
purrr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
purrr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
purrr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
purrr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
purrr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
purrr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
purrr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
purrr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
purrr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
purrr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
purrr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
purrr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
purrr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
purrr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
purrr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
purrr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
purrr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
purrr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
purrr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
purrr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
purrr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
purrr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
purrr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
purrr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
purrr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
purrr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
purrr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
purrr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
purrr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
purrr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
purrr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
purrr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
purrr,1,178,183,FALSE,`obj_address()` is now exported.,NA
purrr,1,179,184,FALSE,`%<~%` now actually works.,NA
purrr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
purrr,1,182,187,FALSE,Fix for CRAN checks.,NA
purrr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
purrr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
purrr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
purrr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
purrr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
purrr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
purrr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
purrr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
purrr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
purrr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
purrr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
purrr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
purrr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
purrr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
purrr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
purrr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
purrr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
purrr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
purrr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
purrr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
purrr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
purrr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
purrr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
purrr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
purrr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
purrr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
purrr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
purrr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
purrr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
purrr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
purrr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
purrr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
purrr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
purrr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
purrr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
purrr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
purrr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
purrr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
purrr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
purrr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
purrr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
purrr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
purrr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
purrr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
purrr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
purrr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
purrr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
purrr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
purrr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
purrr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
purrr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
purrr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
purrr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
purrr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
purrr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
purrr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
purrr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
purrr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
purrr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
purrr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
purrr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
purrr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
purrr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
purrr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
purrr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
purrr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
purrr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
purrr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
purrr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
purrr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
purrr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
purrr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
purrr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
purrr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
purrr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
purrr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
purrr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
purrr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
purrr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
purrr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
purrr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
purrr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
purrr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
purrr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
purrr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
purrr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
purrr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
purrr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
purrr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
purrr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
purrr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
purrr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
purrr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
purrr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
purrr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
purrr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
purrr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
purrr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
purrr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
purrr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
purrr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
purrr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
purrr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
purrr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
purrr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
purrr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
purrr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
purrr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
purrr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
purrr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
purrr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
purrr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
purrr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
purrr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
purrr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
purrr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
purrr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
purrr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
purrr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
purrr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
purrr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
purrr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
purrr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
purrr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
purrr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
purrr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
purrr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
purrr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
purrr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
purrr,1,307,321,FALSE,This handler also works as a calling handler:,NA
purrr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
purrr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
purrr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
purrr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
purrr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
purrr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
purrr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
purrr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
purrr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
purrr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
purrr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
purrr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
purrr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
purrr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
purrr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
purrr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
purrr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
purrr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
purrr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
purrr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
purrr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
purrr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
purrr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
purrr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
purrr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
purrr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
purrr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
purrr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
purrr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
purrr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
purrr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
purrr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
purrr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
purrr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
purrr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
purrr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
purrr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
purrr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
purrr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
purrr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
purrr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
purrr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
purrr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
purrr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
purrr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
purrr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
purrr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
purrr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
purrr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
purrr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
purrr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
purrr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
purrr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
purrr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
purrr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
purrr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
purrr,1,357,375,FALSE,`!!!` disallows:,NA
purrr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
purrr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
purrr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
purrr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
purrr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
purrr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
purrr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
purrr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
purrr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
purrr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
purrr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
purrr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
purrr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
purrr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
purrr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
purrr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
purrr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
purrr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
purrr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
purrr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
purrr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
purrr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
purrr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
purrr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
purrr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
purrr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
purrr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
purrr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
purrr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
purrr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
purrr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
purrr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
purrr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
purrr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
purrr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
purrr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
purrr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
purrr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
purrr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
purrr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
purrr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
purrr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
purrr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
purrr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
purrr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
purrr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
purrr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
purrr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
purrr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
purrr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
purrr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
purrr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
purrr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
purrr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
purrr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
purrr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
purrr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
purrr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
purrr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
purrr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
purrr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
purrr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
purrr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
purrr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
purrr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
purrr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
purrr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
purrr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
purrr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
purrr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
purrr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
purrr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
purrr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
purrr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
purrr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
purrr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
purrr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
purrr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
purrr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
purrr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
purrr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
purrr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
purrr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
purrr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
purrr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
purrr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
purrr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
purrr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
purrr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
purrr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
purrr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
purrr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
purrr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
purrr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
purrr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
purrr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
purrr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
purrr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
purrr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
purrr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
purrr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
purrr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
purrr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
purrr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
purrr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
purrr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
purrr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
purrr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
purrr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
purrr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
purrr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
purrr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
purrr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
purrr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
purrr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
purrr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
purrr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
purrr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
purrr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
purrr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
purrr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
purrr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
purrr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
purrr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
purrr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
purrr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
purrr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
purrr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
purrr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
purrr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
purrr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
purrr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
purrr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
purrr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
purrr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
purrr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
purrr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
purrr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
purrr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
purrr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
purrr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
purrr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
purrr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
purrr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
purrr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
purrr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
purrr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
purrr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
purrr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
purrr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
purrr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
purrr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
purrr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
purrr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
purrr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
purrr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
purrr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
purrr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
purrr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
purrr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
purrr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
purrr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
purrr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
purrr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
purrr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
purrr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
purrr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
purrr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
purrr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
purrr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
purrr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
purrr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
purrr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
purrr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
purrr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
purrr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
purrr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
purrr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
purrr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
purrr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
readr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
readr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
readr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
readr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
readr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
readr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
readr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
readr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
readr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
readr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
readr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
readr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
readr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
readr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
readr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
readr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
readr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
readr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
readr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
readr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
readr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
readr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
readr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
readr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
readr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
readr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
readr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
readr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
readr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
readr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
readr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
readr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
readr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
readr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
readr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
readr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
readr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
readr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
readr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
readr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
readr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
readr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
readr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
readr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
readr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
readr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
readr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
readr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
readr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
readr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
readr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
readr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
readr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
readr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
readr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
readr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
readr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
readr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
readr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
readr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
readr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
readr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
readr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
readr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
readr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
readr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
readr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
readr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
readr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
readr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
readr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
readr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
readr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
readr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
readr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
readr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
readr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
readr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
readr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
readr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
readr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
readr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
readr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
readr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
readr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
readr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
readr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
readr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
readr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
readr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
readr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
readr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
readr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
readr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
readr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
readr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
readr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
readr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
readr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
readr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
readr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
readr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
readr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
readr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
readr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
readr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
readr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
readr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
readr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
readr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
readr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
readr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
readr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
readr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
readr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
readr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
readr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
readr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
readr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
readr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
readr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
readr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
readr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
readr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
readr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
readr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
readr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
readr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
readr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
readr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
readr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
readr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
readr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
readr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
readr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
readr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
readr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
readr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
readr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
readr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
readr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
readr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
readr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
readr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
readr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
readr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
readr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
readr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
readr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
readr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
readr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
readr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
readr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
readr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
readr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
readr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
readr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
readr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
readr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
readr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
readr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
readr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
readr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
readr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
readr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
readr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
readr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
readr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
readr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
readr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
readr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
readr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
readr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
readr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
readr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
readr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
readr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
readr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
readr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
readr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
readr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
readr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
readr,1,178,183,FALSE,`obj_address()` is now exported.,NA
readr,1,179,184,FALSE,`%<~%` now actually works.,NA
readr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
readr,1,182,187,FALSE,Fix for CRAN checks.,NA
readr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
readr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
readr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
readr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
readr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
readr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
readr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
readr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
readr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
readr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
readr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
readr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
readr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
readr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
readr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
readr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
readr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
readr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
readr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
readr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
readr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
readr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
readr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
readr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
readr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
readr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
readr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
readr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
readr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
readr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
readr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
readr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
readr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
readr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
readr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
readr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
readr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
readr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
readr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
readr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
readr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
readr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
readr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
readr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
readr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
readr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
readr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
readr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
readr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
readr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
readr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
readr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
readr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
readr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
readr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
readr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
readr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
readr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
readr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
readr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
readr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
readr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
readr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
readr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
readr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
readr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
readr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
readr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
readr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
readr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
readr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
readr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
readr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
readr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
readr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
readr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
readr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
readr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
readr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
readr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
readr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
readr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
readr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
readr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
readr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
readr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
readr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
readr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
readr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
readr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
readr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
readr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
readr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
readr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
readr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
readr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
readr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
readr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
readr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
readr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
readr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
readr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
readr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
readr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
readr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
readr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
readr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
readr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
readr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
readr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
readr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
readr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
readr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
readr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
readr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
readr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
readr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
readr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
readr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
readr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
readr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
readr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
readr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
readr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
readr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
readr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
readr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
readr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
readr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
readr,1,307,321,FALSE,This handler also works as a calling handler:,NA
readr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
readr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
readr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
readr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
readr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
readr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
readr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
readr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
readr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
readr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
readr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
readr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
readr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
readr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
readr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
readr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
readr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
readr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
readr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
readr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
readr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
readr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
readr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
readr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
readr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
readr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
readr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
readr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
readr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
readr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
readr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
readr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
readr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
readr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
readr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
readr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
readr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
readr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
readr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
readr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
readr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
readr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
readr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
readr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
readr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
readr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
readr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
readr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
readr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
readr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
readr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
readr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
readr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
readr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
readr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
readr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
readr,1,357,375,FALSE,`!!!` disallows:,NA
readr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
readr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
readr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
readr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
readr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
readr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
readr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
readr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
readr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
readr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
readr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
readr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
readr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
readr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
readr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
readr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
readr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
readr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
readr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
readr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
readr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
readr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
readr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
readr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
readr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
readr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
readr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
readr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
readr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
readr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
readr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
readr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
readr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
readr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
readr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
readr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
readr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
readr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
readr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
readr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
readr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
readr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
readr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
readr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
readr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
readr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
readr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
readr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
readr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
readr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
readr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
readr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
readr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
readr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
readr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
readr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
readr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
readr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
readr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
readr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
readr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
readr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
readr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
readr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
readr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
readr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
readr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
readr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
readr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
readr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
readr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
readr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
readr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
readr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
readr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
readr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
readr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
readr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
readr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
readr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
readr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
readr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
readr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
readr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
readr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
readr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
readr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
readr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
readr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
readr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
readr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
readr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
readr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
readr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
readr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
readr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
readr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
readr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
readr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
readr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
readr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
readr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
readr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
readr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
readr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
readr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
readr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
readr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
readr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
readr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
readr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
readr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
readr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
readr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
readr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
readr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
readr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
readr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
readr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
readr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
readr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
readr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
readr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
readr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
readr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
readr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
readr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
readr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
readr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
readr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
readr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
readr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
readr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
readr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
readr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
readr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
readr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
readr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
readr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
readr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
readr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
readr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
readr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
readr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
readr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
readr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
readr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
readr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
readr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
readr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
readr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
readr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
readr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
readr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
readr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
readr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
readr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
readr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
readr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
readr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
readr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
readr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
readr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
readr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
readr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
readr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
readr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
readr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
readr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
readr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
readr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
readr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
readr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
readr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
readr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
readr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
readr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
readr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
readr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
readr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
readxl,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
readxl,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
readxl,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
readxl,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
readxl,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
readxl,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
readxl,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
readxl,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
readxl,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
readxl,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
readxl,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
readxl,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
readxl,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
readxl,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
readxl,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
readxl,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
readxl,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
readxl,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
readxl,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
readxl,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
readxl,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
readxl,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
readxl,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
readxl,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
readxl,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
readxl,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
readxl,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
readxl,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
readxl,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
readxl,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
readxl,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
readxl,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
readxl,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
readxl,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
readxl,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
readxl,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
readxl,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
readxl,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
readxl,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
readxl,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
readxl,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
readxl,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
readxl,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
readxl,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
readxl,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
readxl,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
readxl,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
readxl,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
readxl,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
readxl,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
readxl,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
readxl,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
readxl,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
readxl,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
readxl,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
readxl,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
readxl,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
readxl,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
readxl,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
readxl,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
readxl,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
readxl,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
readxl,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
readxl,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
readxl,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
readxl,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
readxl,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
readxl,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
readxl,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
readxl,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
readxl,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
readxl,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
readxl,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
readxl,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
readxl,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
readxl,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
readxl,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
readxl,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
readxl,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
readxl,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
readxl,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
readxl,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
readxl,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
readxl,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
readxl,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
readxl,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
readxl,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
readxl,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
readxl,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
readxl,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
readxl,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
readxl,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
readxl,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
readxl,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
readxl,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
readxl,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
readxl,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
readxl,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
readxl,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
readxl,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
readxl,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
readxl,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
readxl,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
readxl,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readxl,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readxl,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readxl,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
readxl,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
readxl,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
readxl,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
readxl,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
readxl,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
readxl,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
readxl,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
readxl,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
readxl,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
readxl,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
readxl,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
readxl,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
readxl,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
readxl,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
readxl,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
readxl,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
readxl,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
readxl,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
readxl,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
readxl,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
readxl,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
readxl,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
readxl,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
readxl,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
readxl,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
readxl,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
readxl,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
readxl,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
readxl,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
readxl,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
readxl,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
readxl,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
readxl,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
readxl,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
readxl,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
readxl,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
readxl,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
readxl,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
readxl,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
readxl,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
readxl,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
readxl,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
readxl,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
readxl,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
readxl,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
readxl,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
readxl,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
readxl,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
readxl,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
readxl,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
readxl,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
readxl,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
readxl,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
readxl,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
readxl,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
readxl,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
readxl,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
readxl,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
readxl,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
readxl,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
readxl,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
readxl,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
readxl,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
readxl,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
readxl,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
readxl,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
readxl,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
readxl,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
readxl,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
readxl,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
readxl,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
readxl,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
readxl,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
readxl,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
readxl,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
readxl,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
readxl,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
readxl,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
readxl,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
readxl,1,178,183,FALSE,`obj_address()` is now exported.,NA
readxl,1,179,184,FALSE,`%<~%` now actually works.,NA
readxl,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
readxl,1,182,187,FALSE,Fix for CRAN checks.,NA
readxl,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
readxl,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
readxl,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
readxl,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
readxl,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
readxl,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
readxl,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
readxl,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
readxl,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
readxl,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
readxl,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
readxl,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
readxl,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
readxl,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
readxl,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
readxl,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
readxl,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
readxl,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
readxl,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
readxl,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
readxl,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
readxl,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
readxl,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
readxl,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
readxl,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
readxl,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
readxl,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
readxl,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
readxl,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
readxl,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
readxl,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
readxl,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
readxl,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
readxl,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
readxl,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
readxl,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
readxl,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
readxl,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
readxl,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
readxl,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
readxl,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
readxl,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
readxl,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
readxl,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
readxl,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
readxl,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
readxl,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
readxl,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
readxl,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
readxl,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
readxl,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
readxl,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
readxl,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
readxl,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
readxl,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
readxl,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
readxl,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
readxl,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
readxl,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
readxl,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
readxl,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
readxl,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
readxl,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
readxl,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
readxl,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
readxl,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
readxl,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
readxl,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
readxl,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
readxl,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
readxl,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
readxl,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
readxl,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
readxl,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
readxl,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
readxl,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
readxl,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
readxl,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
readxl,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
readxl,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
readxl,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
readxl,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
readxl,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
readxl,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
readxl,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
readxl,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
readxl,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
readxl,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
readxl,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
readxl,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
readxl,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
readxl,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
readxl,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
readxl,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
readxl,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
readxl,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
readxl,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
readxl,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
readxl,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
readxl,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
readxl,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
readxl,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
readxl,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
readxl,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
readxl,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
readxl,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
readxl,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
readxl,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
readxl,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
readxl,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
readxl,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
readxl,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
readxl,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
readxl,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
readxl,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
readxl,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
readxl,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
readxl,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
readxl,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
readxl,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
readxl,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
readxl,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
readxl,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
readxl,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
readxl,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
readxl,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
readxl,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
readxl,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
readxl,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
readxl,1,307,321,FALSE,This handler also works as a calling handler:,NA
readxl,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
readxl,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
readxl,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
readxl,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
readxl,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
readxl,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
readxl,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
readxl,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
readxl,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
readxl,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
readxl,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
readxl,1,316,332,FALSE,`calling()` now boxes its argument.,NA
readxl,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
readxl,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
readxl,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
readxl,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
readxl,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
readxl,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
readxl,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
readxl,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
readxl,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
readxl,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
readxl,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
readxl,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
readxl,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
readxl,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
readxl,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
readxl,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
readxl,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
readxl,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
readxl,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
readxl,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
readxl,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
readxl,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
readxl,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
readxl,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
readxl,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
readxl,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
readxl,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
readxl,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
readxl,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
readxl,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
readxl,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
readxl,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
readxl,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
readxl,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
readxl,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
readxl,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
readxl,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
readxl,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
readxl,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
readxl,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
readxl,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
readxl,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
readxl,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
readxl,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
readxl,1,357,375,FALSE,`!!!` disallows:,NA
readxl,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
readxl,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
readxl,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
readxl,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
readxl,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
readxl,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
readxl,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
readxl,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
readxl,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
readxl,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
readxl,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
readxl,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
readxl,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
readxl,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
readxl,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
readxl,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
readxl,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
readxl,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
readxl,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
readxl,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
readxl,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
readxl,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
readxl,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
readxl,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
readxl,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
readxl,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
readxl,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
readxl,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
readxl,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
readxl,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
readxl,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
readxl,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
readxl,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
readxl,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
readxl,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
readxl,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
readxl,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
readxl,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
readxl,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
readxl,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
readxl,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
readxl,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
readxl,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
readxl,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
readxl,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
readxl,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
readxl,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
readxl,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
readxl,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
readxl,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
readxl,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
readxl,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
readxl,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
readxl,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
readxl,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
readxl,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
readxl,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
readxl,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
readxl,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
readxl,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
readxl,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
readxl,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
readxl,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
readxl,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
readxl,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
readxl,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
readxl,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
readxl,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
readxl,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
readxl,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
readxl,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
readxl,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
readxl,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
readxl,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
readxl,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
readxl,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
readxl,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
readxl,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
readxl,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
readxl,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
readxl,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
readxl,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
readxl,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
readxl,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
readxl,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
readxl,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
readxl,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
readxl,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
readxl,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
readxl,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
readxl,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
readxl,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
readxl,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
readxl,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
readxl,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
readxl,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
readxl,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
readxl,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
readxl,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
readxl,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
readxl,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
readxl,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
readxl,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
readxl,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
readxl,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
readxl,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
readxl,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
readxl,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
readxl,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
readxl,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
readxl,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
readxl,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
readxl,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
readxl,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
readxl,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
readxl,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
readxl,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
readxl,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
readxl,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
readxl,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
readxl,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
readxl,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
readxl,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
readxl,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
readxl,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
readxl,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
readxl,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
readxl,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
readxl,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
readxl,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
readxl,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
readxl,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
readxl,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
readxl,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
readxl,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
readxl,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
readxl,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
readxl,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
readxl,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
readxl,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
readxl,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
readxl,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
readxl,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
readxl,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
readxl,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
readxl,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
readxl,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
readxl,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
readxl,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
readxl,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
readxl,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
readxl,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
readxl,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
readxl,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
readxl,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
readxl,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
readxl,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
readxl,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
readxl,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
readxl,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
readxl,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
readxl,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
readxl,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
readxl,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
readxl,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
readxl,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
readxl,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
readxl,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
readxl,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
readxl,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
readxl,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
readxl,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
readxl,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
readxl,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
readxl,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
readxl,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
readxl,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
readxl,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
readxl,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
readxl,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
reprex,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
reprex,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
reprex,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
reprex,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
reprex,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
reprex,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
reprex,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
reprex,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
reprex,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
reprex,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
reprex,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
reprex,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
reprex,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
reprex,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
reprex,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
reprex,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
reprex,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
reprex,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
reprex,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
reprex,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
reprex,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
reprex,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
reprex,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
reprex,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
reprex,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
reprex,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
reprex,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
reprex,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
reprex,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
reprex,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
reprex,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
reprex,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
reprex,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
reprex,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
reprex,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
reprex,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
reprex,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
reprex,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
reprex,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
reprex,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
reprex,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
reprex,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
reprex,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
reprex,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
reprex,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
reprex,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
reprex,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
reprex,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
reprex,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
reprex,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
reprex,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
reprex,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
reprex,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
reprex,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
reprex,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
reprex,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
reprex,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
reprex,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
reprex,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
reprex,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
reprex,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
reprex,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
reprex,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
reprex,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
reprex,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
reprex,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
reprex,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
reprex,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
reprex,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
reprex,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
reprex,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
reprex,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
reprex,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
reprex,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
reprex,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
reprex,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
reprex,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
reprex,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
reprex,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
reprex,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
reprex,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
reprex,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
reprex,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
reprex,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
reprex,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
reprex,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
reprex,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
reprex,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
reprex,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
reprex,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
reprex,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
reprex,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
reprex,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
reprex,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
reprex,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
reprex,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
reprex,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
reprex,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
reprex,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
reprex,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
reprex,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
reprex,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
reprex,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
reprex,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
reprex,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
reprex,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
reprex,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
reprex,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
reprex,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
reprex,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
reprex,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
reprex,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
reprex,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
reprex,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
reprex,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
reprex,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
reprex,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
reprex,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
reprex,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
reprex,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
reprex,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
reprex,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
reprex,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
reprex,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
reprex,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
reprex,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
reprex,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
reprex,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
reprex,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
reprex,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
reprex,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
reprex,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
reprex,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
reprex,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
reprex,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
reprex,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
reprex,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
reprex,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
reprex,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
reprex,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
reprex,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
reprex,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
reprex,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
reprex,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
reprex,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
reprex,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
reprex,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
reprex,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
reprex,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
reprex,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
reprex,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
reprex,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
reprex,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
reprex,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
reprex,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
reprex,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
reprex,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
reprex,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
reprex,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
reprex,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
reprex,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
reprex,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
reprex,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
reprex,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
reprex,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
reprex,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
reprex,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
reprex,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
reprex,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
reprex,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
reprex,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
reprex,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
reprex,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
reprex,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
reprex,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
reprex,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
reprex,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
reprex,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
reprex,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
reprex,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
reprex,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
reprex,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
reprex,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
reprex,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
reprex,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
reprex,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
reprex,1,178,183,FALSE,`obj_address()` is now exported.,NA
reprex,1,179,184,FALSE,`%<~%` now actually works.,NA
reprex,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
reprex,1,182,187,FALSE,Fix for CRAN checks.,NA
reprex,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
reprex,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
reprex,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
reprex,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
reprex,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
reprex,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
reprex,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
reprex,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
reprex,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
reprex,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
reprex,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
reprex,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
reprex,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
reprex,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
reprex,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
reprex,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
reprex,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
reprex,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
reprex,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
reprex,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
reprex,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
reprex,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
reprex,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
reprex,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
reprex,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
reprex,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
reprex,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
reprex,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
reprex,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
reprex,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
reprex,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
reprex,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
reprex,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
reprex,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
reprex,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
reprex,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
reprex,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
reprex,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
reprex,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
reprex,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
reprex,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
reprex,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
reprex,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
reprex,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
reprex,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
reprex,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
reprex,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
reprex,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
reprex,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
reprex,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
reprex,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
reprex,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
reprex,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
reprex,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
reprex,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
reprex,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
reprex,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
reprex,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
reprex,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
reprex,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
reprex,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
reprex,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
reprex,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
reprex,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
reprex,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
reprex,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
reprex,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
reprex,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
reprex,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
reprex,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
reprex,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
reprex,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
reprex,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
reprex,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
reprex,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
reprex,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
reprex,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
reprex,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
reprex,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
reprex,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
reprex,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
reprex,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
reprex,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
reprex,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
reprex,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
reprex,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
reprex,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
reprex,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
reprex,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
reprex,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
reprex,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
reprex,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
reprex,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
reprex,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
reprex,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
reprex,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
reprex,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
reprex,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
reprex,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
reprex,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
reprex,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
reprex,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
reprex,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
reprex,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
reprex,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
reprex,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
reprex,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
reprex,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
reprex,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
reprex,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
reprex,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
reprex,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
reprex,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
reprex,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
reprex,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
reprex,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
reprex,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
reprex,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
reprex,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
reprex,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
reprex,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
reprex,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
reprex,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
reprex,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
reprex,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
reprex,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
reprex,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
reprex,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
reprex,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
reprex,1,307,321,FALSE,This handler also works as a calling handler:,NA
reprex,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
reprex,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
reprex,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
reprex,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
reprex,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
reprex,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
reprex,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
reprex,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
reprex,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
reprex,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
reprex,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
reprex,1,316,332,FALSE,`calling()` now boxes its argument.,NA
reprex,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
reprex,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
reprex,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
reprex,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
reprex,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
reprex,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
reprex,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
reprex,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
reprex,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
reprex,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
reprex,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
reprex,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
reprex,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
reprex,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
reprex,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
reprex,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
reprex,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
reprex,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
reprex,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
reprex,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
reprex,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
reprex,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
reprex,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
reprex,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
reprex,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
reprex,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
reprex,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
reprex,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
reprex,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
reprex,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
reprex,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
reprex,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
reprex,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
reprex,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
reprex,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
reprex,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
reprex,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
reprex,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
reprex,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
reprex,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
reprex,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
reprex,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
reprex,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
reprex,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
reprex,1,357,375,FALSE,`!!!` disallows:,NA
reprex,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
reprex,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
reprex,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
reprex,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
reprex,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
reprex,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
reprex,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
reprex,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
reprex,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
reprex,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
reprex,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
reprex,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
reprex,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
reprex,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
reprex,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
reprex,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
reprex,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
reprex,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
reprex,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
reprex,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
reprex,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
reprex,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
reprex,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
reprex,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
reprex,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
reprex,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
reprex,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
reprex,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
reprex,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
reprex,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
reprex,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
reprex,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
reprex,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
reprex,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
reprex,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
reprex,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
reprex,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
reprex,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
reprex,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
reprex,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
reprex,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
reprex,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
reprex,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
reprex,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
reprex,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
reprex,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
reprex,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
reprex,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
reprex,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
reprex,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
reprex,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
reprex,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
reprex,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
reprex,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
reprex,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
reprex,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
reprex,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
reprex,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
reprex,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
reprex,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
reprex,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
reprex,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
reprex,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
reprex,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
reprex,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
reprex,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
reprex,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
reprex,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
reprex,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
reprex,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
reprex,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
reprex,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
reprex,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
reprex,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
reprex,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
reprex,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
reprex,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
reprex,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
reprex,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
reprex,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
reprex,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
reprex,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
reprex,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
reprex,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
reprex,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
reprex,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
reprex,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
reprex,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
reprex,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
reprex,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
reprex,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
reprex,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
reprex,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
reprex,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
reprex,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
reprex,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
reprex,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
reprex,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
reprex,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
reprex,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
reprex,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
reprex,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
reprex,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
reprex,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
reprex,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
reprex,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
reprex,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
reprex,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
reprex,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
reprex,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
reprex,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
reprex,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
reprex,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
reprex,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
reprex,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
reprex,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
reprex,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
reprex,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
reprex,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
reprex,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
reprex,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
reprex,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
reprex,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
reprex,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
reprex,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
reprex,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
reprex,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
reprex,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
reprex,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
reprex,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
reprex,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
reprex,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
reprex,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
reprex,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
reprex,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
reprex,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
reprex,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
reprex,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
reprex,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
reprex,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
reprex,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
reprex,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
reprex,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
reprex,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
reprex,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
reprex,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
reprex,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
reprex,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
reprex,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
reprex,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
reprex,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
reprex,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
reprex,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
reprex,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
reprex,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
reprex,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
reprex,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
reprex,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
reprex,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
reprex,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
reprex,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
reprex,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
reprex,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
reprex,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
reprex,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
reprex,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
reprex,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
reprex,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
reprex,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
reprex,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
reprex,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
reprex,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
reprex,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
reprex,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
reprex,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
reprex,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
reprex,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
reprex,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
reprex,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
reprex,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
rlang,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
rlang,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
rlang,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
rlang,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
rlang,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
rlang,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
rlang,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
rlang,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
rlang,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
rlang,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
rlang,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
rlang,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
rlang,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
rlang,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
rlang,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
rlang,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
rlang,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
rlang,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
rlang,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
rlang,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
rlang,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
rlang,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
rlang,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
rlang,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
rlang,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
rlang,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
rlang,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
rlang,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
rlang,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
rlang,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
rlang,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
rlang,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
rlang,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
rlang,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
rlang,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
rlang,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
rlang,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
rlang,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
rlang,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
rlang,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
rlang,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
rlang,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
rlang,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
rlang,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
rlang,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
rlang,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
rlang,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
rlang,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
rlang,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
rlang,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
rlang,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
rlang,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
rlang,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
rlang,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
rlang,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
rlang,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
rlang,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
rlang,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
rlang,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
rlang,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
rlang,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
rlang,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
rlang,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rlang,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rlang,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
rlang,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
rlang,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
rlang,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
rlang,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
rlang,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
rlang,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
rlang,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
rlang,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
rlang,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
rlang,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
rlang,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
rlang,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
rlang,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
rlang,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
rlang,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
rlang,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
rlang,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
rlang,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
rlang,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
rlang,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
rlang,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
rlang,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
rlang,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
rlang,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
rlang,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
rlang,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rlang,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rlang,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rlang,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
rlang,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
rlang,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
rlang,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rlang,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rlang,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
rlang,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
rlang,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
rlang,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
rlang,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
rlang,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
rlang,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
rlang,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
rlang,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
rlang,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
rlang,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
rlang,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
rlang,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
rlang,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
rlang,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
rlang,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
rlang,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
rlang,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
rlang,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
rlang,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
rlang,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
rlang,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
rlang,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
rlang,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
rlang,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
rlang,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
rlang,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
rlang,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
rlang,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
rlang,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
rlang,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
rlang,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
rlang,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
rlang,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
rlang,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
rlang,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
rlang,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
rlang,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
rlang,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
rlang,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
rlang,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
rlang,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
rlang,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
rlang,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
rlang,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
rlang,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
rlang,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
rlang,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rlang,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rlang,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
rlang,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
rlang,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
rlang,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
rlang,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
rlang,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
rlang,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
rlang,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
rlang,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
rlang,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
rlang,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
rlang,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
rlang,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
rlang,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
rlang,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
rlang,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
rlang,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
rlang,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
rlang,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
rlang,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
rlang,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
rlang,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
rlang,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
rlang,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
rlang,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
rlang,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
rlang,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
rlang,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
rlang,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
rlang,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
rlang,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
rlang,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
rlang,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
rlang,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
rlang,1,178,183,FALSE,`obj_address()` is now exported.,NA
rlang,1,179,184,FALSE,`%<~%` now actually works.,NA
rlang,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
rlang,1,182,187,FALSE,Fix for CRAN checks.,NA
rlang,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
rlang,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
rlang,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
rlang,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
rlang,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
rlang,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
rlang,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
rlang,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
rlang,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
rlang,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
rlang,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
rlang,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
rlang,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
rlang,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
rlang,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
rlang,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
rlang,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
rlang,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
rlang,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
rlang,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
rlang,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
rlang,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
rlang,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
rlang,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
rlang,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
rlang,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
rlang,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
rlang,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
rlang,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
rlang,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
rlang,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
rlang,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
rlang,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
rlang,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
rlang,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
rlang,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
rlang,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
rlang,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
rlang,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
rlang,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
rlang,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
rlang,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
rlang,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
rlang,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
rlang,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
rlang,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
rlang,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
rlang,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
rlang,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
rlang,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
rlang,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
rlang,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
rlang,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
rlang,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
rlang,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
rlang,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
rlang,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
rlang,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
rlang,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
rlang,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
rlang,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
rlang,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
rlang,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
rlang,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
rlang,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
rlang,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
rlang,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
rlang,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
rlang,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
rlang,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
rlang,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
rlang,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
rlang,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
rlang,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
rlang,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
rlang,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
rlang,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
rlang,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
rlang,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
rlang,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
rlang,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
rlang,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
rlang,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
rlang,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
rlang,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
rlang,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
rlang,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
rlang,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
rlang,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
rlang,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
rlang,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
rlang,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
rlang,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
rlang,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
rlang,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
rlang,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
rlang,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
rlang,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
rlang,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
rlang,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
rlang,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
rlang,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
rlang,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
rlang,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
rlang,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
rlang,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
rlang,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
rlang,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
rlang,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
rlang,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
rlang,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
rlang,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
rlang,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
rlang,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
rlang,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
rlang,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
rlang,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
rlang,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
rlang,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
rlang,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
rlang,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
rlang,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
rlang,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
rlang,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
rlang,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
rlang,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
rlang,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
rlang,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
rlang,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
rlang,1,307,321,FALSE,This handler also works as a calling handler:,NA
rlang,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
rlang,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
rlang,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
rlang,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
rlang,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
rlang,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
rlang,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
rlang,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
rlang,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
rlang,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
rlang,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
rlang,1,316,332,FALSE,`calling()` now boxes its argument.,NA
rlang,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
rlang,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
rlang,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
rlang,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
rlang,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
rlang,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
rlang,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
rlang,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
rlang,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
rlang,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
rlang,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
rlang,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
rlang,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
rlang,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
rlang,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
rlang,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
rlang,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
rlang,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
rlang,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
rlang,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
rlang,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
rlang,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
rlang,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
rlang,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
rlang,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
rlang,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
rlang,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
rlang,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
rlang,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
rlang,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
rlang,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
rlang,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
rlang,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
rlang,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
rlang,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
rlang,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
rlang,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
rlang,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
rlang,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
rlang,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
rlang,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
rlang,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rlang,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rlang,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rlang,1,357,375,FALSE,`!!!` disallows:,NA
rlang,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
rlang,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
rlang,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
rlang,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
rlang,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
rlang,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
rlang,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
rlang,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
rlang,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
rlang,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
rlang,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
rlang,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
rlang,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
rlang,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
rlang,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rlang,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
rlang,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
rlang,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
rlang,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
rlang,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
rlang,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
rlang,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
rlang,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
rlang,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
rlang,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
rlang,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
rlang,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
rlang,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
rlang,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
rlang,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
rlang,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
rlang,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
rlang,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
rlang,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
rlang,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
rlang,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
rlang,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
rlang,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
rlang,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
rlang,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
rlang,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
rlang,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
rlang,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
rlang,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
rlang,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
rlang,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
rlang,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
rlang,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
rlang,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
rlang,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
rlang,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
rlang,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
rlang,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
rlang,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
rlang,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
rlang,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
rlang,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
rlang,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
rlang,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
rlang,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
rlang,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
rlang,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
rlang,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
rlang,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
rlang,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
rlang,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
rlang,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
rlang,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
rlang,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
rlang,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
rlang,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
rlang,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
rlang,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
rlang,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
rlang,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
rlang,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
rlang,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
rlang,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
rlang,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
rlang,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
rlang,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
rlang,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
rlang,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
rlang,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
rlang,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
rlang,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
rlang,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
rlang,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
rlang,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
rlang,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
rlang,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rlang,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
rlang,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
rlang,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
rlang,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
rlang,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
rlang,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
rlang,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
rlang,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
rlang,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
rlang,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
rlang,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
rlang,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
rlang,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
rlang,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
rlang,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
rlang,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
rlang,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
rlang,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
rlang,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
rlang,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
rlang,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
rlang,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
rlang,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
rlang,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
rlang,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
rlang,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
rlang,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
rlang,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
rlang,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
rlang,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
rlang,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
rlang,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
rlang,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
rlang,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
rlang,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
rlang,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
rlang,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
rlang,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
rlang,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
rlang,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
rlang,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
rlang,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
rlang,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
rlang,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
rlang,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
rlang,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
rlang,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
rlang,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
rlang,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
rlang,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
rlang,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rlang,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rlang,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
rlang,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
rlang,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
rlang,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
rlang,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
rlang,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
rlang,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
rlang,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
rlang,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
rlang,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
rlang,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
rlang,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
rlang,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
rlang,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
rlang,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
rlang,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
rlang,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
rlang,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
rlang,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
rlang,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
rlang,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
rlang,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
rlang,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
rlang,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
rlang,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
rlang,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
rlang,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
rlang,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
rlang,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
rlang,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
rlang,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
rlang,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
rlang,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
rlang,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
rlang,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
rlang,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
rlang,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
rstudioapi,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
rstudioapi,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
rstudioapi,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
rstudioapi,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
rstudioapi,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
rstudioapi,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
rstudioapi,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
rstudioapi,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
rstudioapi,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
rstudioapi,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
rstudioapi,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
rstudioapi,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
rstudioapi,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
rstudioapi,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
rstudioapi,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
rstudioapi,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
rstudioapi,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
rstudioapi,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
rstudioapi,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
rstudioapi,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
rstudioapi,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
rstudioapi,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
rstudioapi,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
rstudioapi,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
rstudioapi,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
rstudioapi,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
rstudioapi,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
rstudioapi,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
rstudioapi,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
rstudioapi,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
rstudioapi,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
rstudioapi,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
rstudioapi,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
rstudioapi,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
rstudioapi,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
rstudioapi,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
rstudioapi,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
rstudioapi,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
rstudioapi,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
rstudioapi,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
rstudioapi,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
rstudioapi,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
rstudioapi,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
rstudioapi,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
rstudioapi,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
rstudioapi,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
rstudioapi,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
rstudioapi,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
rstudioapi,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
rstudioapi,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
rstudioapi,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
rstudioapi,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
rstudioapi,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
rstudioapi,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
rstudioapi,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
rstudioapi,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
rstudioapi,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
rstudioapi,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
rstudioapi,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
rstudioapi,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
rstudioapi,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
rstudioapi,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
rstudioapi,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rstudioapi,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rstudioapi,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
rstudioapi,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
rstudioapi,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
rstudioapi,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
rstudioapi,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
rstudioapi,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
rstudioapi,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
rstudioapi,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
rstudioapi,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
rstudioapi,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
rstudioapi,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
rstudioapi,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
rstudioapi,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
rstudioapi,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
rstudioapi,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
rstudioapi,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
rstudioapi,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
rstudioapi,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
rstudioapi,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
rstudioapi,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
rstudioapi,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
rstudioapi,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
rstudioapi,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
rstudioapi,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
rstudioapi,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
rstudioapi,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
rstudioapi,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rstudioapi,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rstudioapi,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rstudioapi,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
rstudioapi,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
rstudioapi,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
rstudioapi,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rstudioapi,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rstudioapi,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
rstudioapi,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
rstudioapi,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
rstudioapi,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
rstudioapi,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
rstudioapi,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rstudioapi,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rstudioapi,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rstudioapi,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rstudioapi,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
rstudioapi,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
rstudioapi,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
rstudioapi,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
rstudioapi,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
rstudioapi,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
rstudioapi,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
rstudioapi,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
rstudioapi,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
rstudioapi,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
rstudioapi,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
rstudioapi,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
rstudioapi,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
rstudioapi,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
rstudioapi,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
rstudioapi,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
rstudioapi,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
rstudioapi,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
rstudioapi,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
rstudioapi,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
rstudioapi,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
rstudioapi,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
rstudioapi,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
rstudioapi,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
rstudioapi,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
rstudioapi,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
rstudioapi,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
rstudioapi,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
rstudioapi,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
rstudioapi,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
rstudioapi,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
rstudioapi,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
rstudioapi,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
rstudioapi,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
rstudioapi,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
rstudioapi,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
rstudioapi,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
rstudioapi,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
rstudioapi,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
rstudioapi,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
rstudioapi,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
rstudioapi,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
rstudioapi,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
rstudioapi,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rstudioapi,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rstudioapi,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
rstudioapi,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
rstudioapi,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
rstudioapi,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
rstudioapi,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
rstudioapi,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
rstudioapi,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
rstudioapi,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
rstudioapi,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
rstudioapi,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
rstudioapi,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
rstudioapi,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
rstudioapi,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
rstudioapi,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
rstudioapi,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
rstudioapi,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
rstudioapi,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
rstudioapi,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
rstudioapi,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
rstudioapi,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
rstudioapi,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
rstudioapi,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
rstudioapi,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
rstudioapi,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
rstudioapi,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
rstudioapi,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
rstudioapi,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
rstudioapi,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
rstudioapi,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
rstudioapi,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
rstudioapi,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
rstudioapi,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
rstudioapi,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
rstudioapi,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
rstudioapi,1,178,183,FALSE,`obj_address()` is now exported.,NA
rstudioapi,1,179,184,FALSE,`%<~%` now actually works.,NA
rstudioapi,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
rstudioapi,1,182,187,FALSE,Fix for CRAN checks.,NA
rstudioapi,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
rstudioapi,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
rstudioapi,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
rstudioapi,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
rstudioapi,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
rstudioapi,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
rstudioapi,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
rstudioapi,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
rstudioapi,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
rstudioapi,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
rstudioapi,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
rstudioapi,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
rstudioapi,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
rstudioapi,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
rstudioapi,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
rstudioapi,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
rstudioapi,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
rstudioapi,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
rstudioapi,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
rstudioapi,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
rstudioapi,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
rstudioapi,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
rstudioapi,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
rstudioapi,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
rstudioapi,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
rstudioapi,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
rstudioapi,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
rstudioapi,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
rstudioapi,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
rstudioapi,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
rstudioapi,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
rstudioapi,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
rstudioapi,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
rstudioapi,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
rstudioapi,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
rstudioapi,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
rstudioapi,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
rstudioapi,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
rstudioapi,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
rstudioapi,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
rstudioapi,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
rstudioapi,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
rstudioapi,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
rstudioapi,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
rstudioapi,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
rstudioapi,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
rstudioapi,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
rstudioapi,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
rstudioapi,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
rstudioapi,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
rstudioapi,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
rstudioapi,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
rstudioapi,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
rstudioapi,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
rstudioapi,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
rstudioapi,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
rstudioapi,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
rstudioapi,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
rstudioapi,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
rstudioapi,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
rstudioapi,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
rstudioapi,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
rstudioapi,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
rstudioapi,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
rstudioapi,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
rstudioapi,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
rstudioapi,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
rstudioapi,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
rstudioapi,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
rstudioapi,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
rstudioapi,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
rstudioapi,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
rstudioapi,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
rstudioapi,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
rstudioapi,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
rstudioapi,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
rstudioapi,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
rstudioapi,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
rstudioapi,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
rstudioapi,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
rstudioapi,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
rstudioapi,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
rstudioapi,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
rstudioapi,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
rstudioapi,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
rstudioapi,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
rstudioapi,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
rstudioapi,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
rstudioapi,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
rstudioapi,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
rstudioapi,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
rstudioapi,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
rstudioapi,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
rstudioapi,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
rstudioapi,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
rstudioapi,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
rstudioapi,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
rstudioapi,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
rstudioapi,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
rstudioapi,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
rstudioapi,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
rstudioapi,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
rstudioapi,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
rstudioapi,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
rstudioapi,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
rstudioapi,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
rstudioapi,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
rstudioapi,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
rstudioapi,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
rstudioapi,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
rstudioapi,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
rstudioapi,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
rstudioapi,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
rstudioapi,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
rstudioapi,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
rstudioapi,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
rstudioapi,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
rstudioapi,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
rstudioapi,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
rstudioapi,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
rstudioapi,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
rstudioapi,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
rstudioapi,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
rstudioapi,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
rstudioapi,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
rstudioapi,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
rstudioapi,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
rstudioapi,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
rstudioapi,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
rstudioapi,1,307,321,FALSE,This handler also works as a calling handler:,NA
rstudioapi,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
rstudioapi,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
rstudioapi,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
rstudioapi,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
rstudioapi,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
rstudioapi,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
rstudioapi,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
rstudioapi,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
rstudioapi,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
rstudioapi,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
rstudioapi,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
rstudioapi,1,316,332,FALSE,`calling()` now boxes its argument.,NA
rstudioapi,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
rstudioapi,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
rstudioapi,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
rstudioapi,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
rstudioapi,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
rstudioapi,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
rstudioapi,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
rstudioapi,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
rstudioapi,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
rstudioapi,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
rstudioapi,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
rstudioapi,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
rstudioapi,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
rstudioapi,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
rstudioapi,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
rstudioapi,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
rstudioapi,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
rstudioapi,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
rstudioapi,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
rstudioapi,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
rstudioapi,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
rstudioapi,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
rstudioapi,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
rstudioapi,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
rstudioapi,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
rstudioapi,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
rstudioapi,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
rstudioapi,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
rstudioapi,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
rstudioapi,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
rstudioapi,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
rstudioapi,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
rstudioapi,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
rstudioapi,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
rstudioapi,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
rstudioapi,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
rstudioapi,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
rstudioapi,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
rstudioapi,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
rstudioapi,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
rstudioapi,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
rstudioapi,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rstudioapi,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rstudioapi,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rstudioapi,1,357,375,FALSE,`!!!` disallows:,NA
rstudioapi,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
rstudioapi,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
rstudioapi,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
rstudioapi,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
rstudioapi,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
rstudioapi,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
rstudioapi,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
rstudioapi,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
rstudioapi,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
rstudioapi,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
rstudioapi,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
rstudioapi,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
rstudioapi,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
rstudioapi,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
rstudioapi,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rstudioapi,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
rstudioapi,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
rstudioapi,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
rstudioapi,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
rstudioapi,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
rstudioapi,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
rstudioapi,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
rstudioapi,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
rstudioapi,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
rstudioapi,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
rstudioapi,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
rstudioapi,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
rstudioapi,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
rstudioapi,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
rstudioapi,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
rstudioapi,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
rstudioapi,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
rstudioapi,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
rstudioapi,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
rstudioapi,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
rstudioapi,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
rstudioapi,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
rstudioapi,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
rstudioapi,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
rstudioapi,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
rstudioapi,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
rstudioapi,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
rstudioapi,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
rstudioapi,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
rstudioapi,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
rstudioapi,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
rstudioapi,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
rstudioapi,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
rstudioapi,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
rstudioapi,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
rstudioapi,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
rstudioapi,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
rstudioapi,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
rstudioapi,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
rstudioapi,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
rstudioapi,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
rstudioapi,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
rstudioapi,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
rstudioapi,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
rstudioapi,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
rstudioapi,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
rstudioapi,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
rstudioapi,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
rstudioapi,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
rstudioapi,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
rstudioapi,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
rstudioapi,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
rstudioapi,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
rstudioapi,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
rstudioapi,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
rstudioapi,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
rstudioapi,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
rstudioapi,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
rstudioapi,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
rstudioapi,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
rstudioapi,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
rstudioapi,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
rstudioapi,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
rstudioapi,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
rstudioapi,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
rstudioapi,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
rstudioapi,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
rstudioapi,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
rstudioapi,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
rstudioapi,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
rstudioapi,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
rstudioapi,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
rstudioapi,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
rstudioapi,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
rstudioapi,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
rstudioapi,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rstudioapi,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
rstudioapi,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
rstudioapi,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
rstudioapi,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
rstudioapi,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
rstudioapi,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
rstudioapi,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
rstudioapi,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
rstudioapi,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
rstudioapi,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
rstudioapi,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
rstudioapi,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
rstudioapi,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
rstudioapi,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
rstudioapi,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
rstudioapi,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
rstudioapi,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
rstudioapi,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
rstudioapi,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
rstudioapi,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
rstudioapi,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
rstudioapi,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
rstudioapi,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
rstudioapi,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
rstudioapi,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
rstudioapi,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
rstudioapi,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
rstudioapi,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
rstudioapi,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
rstudioapi,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
rstudioapi,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
rstudioapi,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
rstudioapi,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
rstudioapi,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
rstudioapi,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
rstudioapi,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
rstudioapi,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
rstudioapi,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
rstudioapi,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
rstudioapi,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
rstudioapi,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
rstudioapi,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
rstudioapi,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
rstudioapi,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
rstudioapi,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
rstudioapi,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
rstudioapi,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
rstudioapi,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
rstudioapi,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
rstudioapi,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
rstudioapi,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rstudioapi,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rstudioapi,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
rstudioapi,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
rstudioapi,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
rstudioapi,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
rstudioapi,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
rstudioapi,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
rstudioapi,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
rstudioapi,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
rstudioapi,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
rstudioapi,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
rstudioapi,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
rstudioapi,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
rstudioapi,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
rstudioapi,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
rstudioapi,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
rstudioapi,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
rstudioapi,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
rstudioapi,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
rstudioapi,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
rstudioapi,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
rstudioapi,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
rstudioapi,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
rstudioapi,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
rstudioapi,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
rstudioapi,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
rstudioapi,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
rstudioapi,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
rstudioapi,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
rstudioapi,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
rstudioapi,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
rstudioapi,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
rstudioapi,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
rstudioapi,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
rstudioapi,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
rstudioapi,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
rstudioapi,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
rstudioapi,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
rvest,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
rvest,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
rvest,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
rvest,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
rvest,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
rvest,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
rvest,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
rvest,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
rvest,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
rvest,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
rvest,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
rvest,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
rvest,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
rvest,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
rvest,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
rvest,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
rvest,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
rvest,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
rvest,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
rvest,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
rvest,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
rvest,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
rvest,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
rvest,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
rvest,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
rvest,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
rvest,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
rvest,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
rvest,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
rvest,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
rvest,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
rvest,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
rvest,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
rvest,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
rvest,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
rvest,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
rvest,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
rvest,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
rvest,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
rvest,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
rvest,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
rvest,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
rvest,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
rvest,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
rvest,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
rvest,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
rvest,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
rvest,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
rvest,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
rvest,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
rvest,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
rvest,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
rvest,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
rvest,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
rvest,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
rvest,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
rvest,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
rvest,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
rvest,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
rvest,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
rvest,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
rvest,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
rvest,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rvest,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rvest,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
rvest,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
rvest,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
rvest,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
rvest,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
rvest,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
rvest,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
rvest,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
rvest,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
rvest,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
rvest,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
rvest,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
rvest,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
rvest,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
rvest,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
rvest,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
rvest,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
rvest,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
rvest,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
rvest,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
rvest,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
rvest,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
rvest,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
rvest,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
rvest,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
rvest,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
rvest,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rvest,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rvest,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rvest,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
rvest,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
rvest,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
rvest,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rvest,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rvest,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
rvest,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
rvest,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
rvest,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
rvest,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
rvest,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rvest,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rvest,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rvest,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rvest,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
rvest,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
rvest,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
rvest,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
rvest,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
rvest,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
rvest,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
rvest,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
rvest,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
rvest,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
rvest,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
rvest,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
rvest,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
rvest,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
rvest,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
rvest,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
rvest,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
rvest,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
rvest,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
rvest,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
rvest,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
rvest,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
rvest,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
rvest,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
rvest,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
rvest,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
rvest,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
rvest,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
rvest,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
rvest,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
rvest,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
rvest,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
rvest,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
rvest,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
rvest,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
rvest,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
rvest,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
rvest,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
rvest,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
rvest,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
rvest,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
rvest,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
rvest,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
rvest,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rvest,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rvest,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
rvest,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
rvest,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
rvest,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
rvest,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
rvest,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
rvest,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
rvest,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
rvest,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
rvest,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
rvest,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
rvest,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
rvest,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
rvest,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
rvest,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
rvest,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
rvest,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
rvest,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
rvest,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
rvest,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
rvest,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
rvest,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
rvest,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
rvest,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
rvest,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
rvest,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
rvest,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
rvest,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
rvest,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
rvest,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
rvest,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
rvest,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
rvest,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
rvest,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
rvest,1,178,183,FALSE,`obj_address()` is now exported.,NA
rvest,1,179,184,FALSE,`%<~%` now actually works.,NA
rvest,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
rvest,1,182,187,FALSE,Fix for CRAN checks.,NA
rvest,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
rvest,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
rvest,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
rvest,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
rvest,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
rvest,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
rvest,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
rvest,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
rvest,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
rvest,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
rvest,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
rvest,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
rvest,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
rvest,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
rvest,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
rvest,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
rvest,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
rvest,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
rvest,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
rvest,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
rvest,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
rvest,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
rvest,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
rvest,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
rvest,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
rvest,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
rvest,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
rvest,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
rvest,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
rvest,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
rvest,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
rvest,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
rvest,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
rvest,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
rvest,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
rvest,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
rvest,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
rvest,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
rvest,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
rvest,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
rvest,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
rvest,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
rvest,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
rvest,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
rvest,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
rvest,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
rvest,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
rvest,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
rvest,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
rvest,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
rvest,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
rvest,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
rvest,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
rvest,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
rvest,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
rvest,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
rvest,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
rvest,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
rvest,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
rvest,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
rvest,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
rvest,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
rvest,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
rvest,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
rvest,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
rvest,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
rvest,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
rvest,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
rvest,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
rvest,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
rvest,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
rvest,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
rvest,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
rvest,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
rvest,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
rvest,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
rvest,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
rvest,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
rvest,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
rvest,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
rvest,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
rvest,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
rvest,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
rvest,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
rvest,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
rvest,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
rvest,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
rvest,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
rvest,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
rvest,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
rvest,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
rvest,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
rvest,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
rvest,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
rvest,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
rvest,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
rvest,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
rvest,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
rvest,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
rvest,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
rvest,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
rvest,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
rvest,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
rvest,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
rvest,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
rvest,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
rvest,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
rvest,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
rvest,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
rvest,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
rvest,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
rvest,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
rvest,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
rvest,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
rvest,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
rvest,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
rvest,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
rvest,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
rvest,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
rvest,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
rvest,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
rvest,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
rvest,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
rvest,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
rvest,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
rvest,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
rvest,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
rvest,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
rvest,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
rvest,1,307,321,FALSE,This handler also works as a calling handler:,NA
rvest,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
rvest,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
rvest,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
rvest,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
rvest,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
rvest,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
rvest,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
rvest,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
rvest,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
rvest,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
rvest,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
rvest,1,316,332,FALSE,`calling()` now boxes its argument.,NA
rvest,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
rvest,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
rvest,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
rvest,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
rvest,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
rvest,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
rvest,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
rvest,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
rvest,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
rvest,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
rvest,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
rvest,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
rvest,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
rvest,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
rvest,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
rvest,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
rvest,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
rvest,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
rvest,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
rvest,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
rvest,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
rvest,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
rvest,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
rvest,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
rvest,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
rvest,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
rvest,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
rvest,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
rvest,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
rvest,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
rvest,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
rvest,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
rvest,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
rvest,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
rvest,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
rvest,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
rvest,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
rvest,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
rvest,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
rvest,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
rvest,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
rvest,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rvest,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rvest,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rvest,1,357,375,FALSE,`!!!` disallows:,NA
rvest,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
rvest,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
rvest,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
rvest,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
rvest,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
rvest,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
rvest,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
rvest,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
rvest,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
rvest,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
rvest,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
rvest,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
rvest,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
rvest,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
rvest,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rvest,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
rvest,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
rvest,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
rvest,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
rvest,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
rvest,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
rvest,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
rvest,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
rvest,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
rvest,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
rvest,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
rvest,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
rvest,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
rvest,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
rvest,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
rvest,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
rvest,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
rvest,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
rvest,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
rvest,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
rvest,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
rvest,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
rvest,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
rvest,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
rvest,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
rvest,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
rvest,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
rvest,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
rvest,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
rvest,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
rvest,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
rvest,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
rvest,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
rvest,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
rvest,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
rvest,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
rvest,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
rvest,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
rvest,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
rvest,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
rvest,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
rvest,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
rvest,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
rvest,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
rvest,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
rvest,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
rvest,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
rvest,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
rvest,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
rvest,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
rvest,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
rvest,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
rvest,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
rvest,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
rvest,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
rvest,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
rvest,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
rvest,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
rvest,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
rvest,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
rvest,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
rvest,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
rvest,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
rvest,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
rvest,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
rvest,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
rvest,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
rvest,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
rvest,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
rvest,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
rvest,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
rvest,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
rvest,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
rvest,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
rvest,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
rvest,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rvest,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
rvest,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
rvest,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
rvest,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
rvest,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
rvest,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
rvest,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
rvest,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
rvest,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
rvest,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
rvest,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
rvest,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
rvest,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
rvest,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
rvest,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
rvest,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
rvest,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
rvest,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
rvest,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
rvest,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
rvest,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
rvest,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
rvest,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
rvest,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
rvest,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
rvest,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
rvest,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
rvest,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
rvest,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
rvest,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
rvest,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
rvest,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
rvest,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
rvest,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
rvest,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
rvest,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
rvest,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
rvest,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
rvest,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
rvest,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
rvest,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
rvest,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
rvest,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
rvest,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
rvest,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
rvest,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
rvest,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
rvest,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
rvest,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
rvest,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
rvest,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rvest,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rvest,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
rvest,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
rvest,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
rvest,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
rvest,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
rvest,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
rvest,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
rvest,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
rvest,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
rvest,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
rvest,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
rvest,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
rvest,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
rvest,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
rvest,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
rvest,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
rvest,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
rvest,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
rvest,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
rvest,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
rvest,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
rvest,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
rvest,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
rvest,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
rvest,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
rvest,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
rvest,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
rvest,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
rvest,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
rvest,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
rvest,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
rvest,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
rvest,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
rvest,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
rvest,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
rvest,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
rvest,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
stringr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
stringr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
stringr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
stringr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
stringr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
stringr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
stringr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
stringr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
stringr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
stringr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
stringr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
stringr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
stringr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
stringr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
stringr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
stringr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
stringr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
stringr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
stringr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
stringr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
stringr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
stringr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
stringr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
stringr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
stringr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
stringr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
stringr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
stringr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
stringr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
stringr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
stringr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
stringr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
stringr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
stringr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
stringr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
stringr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
stringr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
stringr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
stringr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
stringr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
stringr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
stringr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
stringr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
stringr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
stringr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
stringr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
stringr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
stringr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
stringr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
stringr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
stringr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
stringr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
stringr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
stringr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
stringr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
stringr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
stringr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
stringr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
stringr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
stringr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
stringr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
stringr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
stringr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
stringr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
stringr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
stringr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
stringr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
stringr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
stringr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
stringr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
stringr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
stringr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
stringr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
stringr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
stringr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
stringr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
stringr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
stringr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
stringr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
stringr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
stringr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
stringr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
stringr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
stringr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
stringr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
stringr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
stringr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
stringr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
stringr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
stringr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
stringr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
stringr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
stringr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
stringr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
stringr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
stringr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
stringr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
stringr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
stringr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
stringr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
stringr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
stringr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
stringr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
stringr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
stringr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
stringr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
stringr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
stringr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
stringr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
stringr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
stringr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
stringr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
stringr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
stringr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
stringr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
stringr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
stringr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
stringr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
stringr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
stringr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
stringr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
stringr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
stringr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
stringr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
stringr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
stringr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
stringr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
stringr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
stringr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
stringr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
stringr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
stringr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
stringr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
stringr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
stringr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
stringr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
stringr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
stringr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
stringr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
stringr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
stringr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
stringr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
stringr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
stringr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
stringr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
stringr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
stringr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
stringr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
stringr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
stringr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
stringr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
stringr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
stringr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
stringr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
stringr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
stringr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
stringr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
stringr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
stringr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
stringr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
stringr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
stringr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
stringr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
stringr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
stringr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
stringr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
stringr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
stringr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
stringr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
stringr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
stringr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
stringr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
stringr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
stringr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
stringr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
stringr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
stringr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
stringr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
stringr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
stringr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
stringr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
stringr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
stringr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
stringr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
stringr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
stringr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
stringr,1,178,183,FALSE,`obj_address()` is now exported.,NA
stringr,1,179,184,FALSE,`%<~%` now actually works.,NA
stringr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
stringr,1,182,187,FALSE,Fix for CRAN checks.,NA
stringr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
stringr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
stringr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
stringr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
stringr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
stringr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
stringr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
stringr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
stringr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
stringr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
stringr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
stringr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
stringr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
stringr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
stringr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
stringr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
stringr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
stringr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
stringr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
stringr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
stringr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
stringr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
stringr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
stringr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
stringr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
stringr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
stringr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
stringr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
stringr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
stringr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
stringr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
stringr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
stringr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
stringr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
stringr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
stringr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
stringr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
stringr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
stringr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
stringr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
stringr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
stringr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
stringr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
stringr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
stringr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
stringr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
stringr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
stringr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
stringr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
stringr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
stringr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
stringr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
stringr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
stringr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
stringr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
stringr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
stringr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
stringr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
stringr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
stringr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
stringr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
stringr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
stringr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
stringr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
stringr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
stringr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
stringr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
stringr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
stringr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
stringr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
stringr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
stringr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
stringr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
stringr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
stringr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
stringr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
stringr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
stringr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
stringr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
stringr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
stringr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
stringr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
stringr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
stringr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
stringr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
stringr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
stringr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
stringr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
stringr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
stringr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
stringr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
stringr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
stringr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
stringr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
stringr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
stringr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
stringr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
stringr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
stringr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
stringr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
stringr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
stringr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
stringr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
stringr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
stringr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
stringr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
stringr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
stringr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
stringr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
stringr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
stringr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
stringr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
stringr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
stringr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
stringr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
stringr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
stringr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
stringr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
stringr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
stringr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
stringr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
stringr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
stringr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
stringr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
stringr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
stringr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
stringr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
stringr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
stringr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
stringr,1,307,321,FALSE,This handler also works as a calling handler:,NA
stringr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
stringr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
stringr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
stringr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
stringr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
stringr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
stringr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
stringr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
stringr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
stringr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
stringr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
stringr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
stringr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
stringr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
stringr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
stringr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
stringr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
stringr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
stringr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
stringr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
stringr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
stringr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
stringr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
stringr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
stringr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
stringr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
stringr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
stringr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
stringr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
stringr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
stringr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
stringr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
stringr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
stringr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
stringr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
stringr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
stringr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
stringr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
stringr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
stringr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
stringr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
stringr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
stringr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
stringr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
stringr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
stringr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
stringr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
stringr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
stringr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
stringr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
stringr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
stringr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
stringr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
stringr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
stringr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
stringr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
stringr,1,357,375,FALSE,`!!!` disallows:,NA
stringr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
stringr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
stringr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
stringr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
stringr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
stringr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
stringr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
stringr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
stringr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
stringr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
stringr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
stringr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
stringr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
stringr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
stringr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
stringr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
stringr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
stringr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
stringr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
stringr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
stringr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
stringr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
stringr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
stringr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
stringr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
stringr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
stringr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
stringr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
stringr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
stringr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
stringr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
stringr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
stringr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
stringr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
stringr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
stringr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
stringr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
stringr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
stringr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
stringr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
stringr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
stringr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
stringr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
stringr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
stringr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
stringr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
stringr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
stringr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
stringr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
stringr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
stringr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
stringr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
stringr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
stringr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
stringr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
stringr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
stringr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
stringr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
stringr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
stringr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
stringr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
stringr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
stringr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
stringr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
stringr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
stringr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
stringr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
stringr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
stringr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
stringr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
stringr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
stringr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
stringr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
stringr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
stringr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
stringr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
stringr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
stringr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
stringr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
stringr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
stringr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
stringr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
stringr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
stringr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
stringr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
stringr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
stringr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
stringr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
stringr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
stringr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
stringr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
stringr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
stringr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
stringr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
stringr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
stringr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
stringr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
stringr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
stringr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
stringr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
stringr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
stringr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
stringr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
stringr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
stringr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
stringr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
stringr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
stringr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
stringr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
stringr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
stringr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
stringr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
stringr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
stringr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
stringr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
stringr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
stringr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
stringr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
stringr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
stringr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
stringr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
stringr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
stringr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
stringr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
stringr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
stringr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
stringr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
stringr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
stringr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
stringr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
stringr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
stringr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
stringr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
stringr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
stringr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
stringr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
stringr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
stringr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
stringr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
stringr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
stringr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
stringr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
stringr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
stringr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
stringr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
stringr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
stringr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
stringr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
stringr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
stringr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
stringr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
stringr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
stringr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
stringr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
stringr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
stringr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
stringr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
stringr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
stringr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
stringr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
stringr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
stringr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
stringr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
stringr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
stringr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
stringr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
stringr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
stringr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
stringr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
stringr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
stringr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
stringr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
stringr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
stringr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
stringr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
stringr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
stringr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
stringr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
stringr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
stringr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
tibble,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
tibble,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
tibble,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
tibble,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
tibble,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
tibble,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
tibble,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
tibble,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
tibble,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
tibble,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
tibble,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
tibble,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
tibble,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
tibble,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
tibble,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
tibble,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
tibble,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
tibble,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
tibble,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
tibble,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
tibble,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
tibble,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
tibble,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
tibble,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
tibble,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
tibble,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
tibble,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
tibble,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
tibble,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
tibble,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
tibble,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
tibble,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
tibble,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
tibble,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
tibble,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
tibble,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
tibble,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
tibble,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
tibble,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
tibble,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
tibble,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
tibble,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
tibble,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
tibble,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
tibble,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
tibble,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
tibble,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
tibble,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
tibble,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
tibble,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
tibble,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
tibble,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
tibble,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
tibble,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
tibble,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
tibble,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
tibble,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
tibble,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
tibble,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
tibble,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
tibble,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
tibble,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
tibble,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
tibble,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
tibble,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
tibble,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
tibble,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
tibble,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
tibble,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
tibble,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
tibble,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
tibble,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
tibble,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
tibble,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
tibble,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
tibble,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
tibble,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
tibble,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
tibble,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
tibble,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
tibble,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
tibble,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
tibble,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
tibble,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
tibble,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
tibble,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
tibble,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
tibble,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
tibble,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
tibble,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
tibble,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tibble,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tibble,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tibble,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
tibble,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
tibble,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
tibble,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
tibble,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
tibble,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
tibble,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
tibble,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
tibble,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
tibble,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
tibble,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tibble,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tibble,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tibble,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tibble,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
tibble,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
tibble,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
tibble,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
tibble,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
tibble,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
tibble,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
tibble,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
tibble,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
tibble,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
tibble,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
tibble,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
tibble,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
tibble,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
tibble,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
tibble,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
tibble,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
tibble,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
tibble,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
tibble,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
tibble,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
tibble,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
tibble,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
tibble,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
tibble,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
tibble,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
tibble,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
tibble,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
tibble,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
tibble,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
tibble,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
tibble,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
tibble,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
tibble,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
tibble,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
tibble,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
tibble,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
tibble,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
tibble,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
tibble,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
tibble,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
tibble,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
tibble,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
tibble,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
tibble,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
tibble,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
tibble,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
tibble,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
tibble,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
tibble,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
tibble,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
tibble,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
tibble,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
tibble,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
tibble,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
tibble,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
tibble,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
tibble,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
tibble,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
tibble,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
tibble,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
tibble,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
tibble,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
tibble,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
tibble,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
tibble,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
tibble,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
tibble,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
tibble,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
tibble,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
tibble,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
tibble,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
tibble,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
tibble,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
tibble,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
tibble,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
tibble,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
tibble,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
tibble,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
tibble,1,178,183,FALSE,`obj_address()` is now exported.,NA
tibble,1,179,184,FALSE,`%<~%` now actually works.,NA
tibble,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
tibble,1,182,187,FALSE,Fix for CRAN checks.,NA
tibble,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
tibble,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
tibble,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
tibble,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
tibble,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
tibble,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
tibble,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
tibble,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
tibble,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
tibble,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
tibble,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
tibble,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
tibble,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
tibble,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
tibble,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
tibble,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
tibble,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
tibble,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
tibble,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
tibble,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
tibble,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
tibble,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
tibble,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
tibble,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
tibble,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
tibble,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
tibble,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
tibble,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
tibble,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
tibble,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
tibble,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
tibble,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
tibble,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
tibble,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
tibble,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
tibble,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
tibble,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
tibble,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
tibble,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
tibble,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
tibble,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
tibble,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
tibble,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
tibble,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
tibble,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
tibble,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
tibble,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
tibble,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
tibble,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
tibble,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
tibble,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
tibble,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
tibble,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
tibble,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
tibble,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
tibble,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
tibble,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
tibble,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
tibble,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
tibble,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
tibble,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
tibble,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
tibble,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
tibble,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
tibble,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
tibble,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
tibble,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
tibble,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
tibble,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
tibble,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
tibble,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
tibble,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
tibble,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
tibble,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
tibble,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
tibble,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
tibble,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
tibble,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
tibble,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
tibble,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
tibble,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
tibble,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
tibble,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
tibble,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
tibble,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
tibble,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
tibble,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
tibble,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
tibble,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
tibble,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
tibble,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
tibble,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
tibble,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
tibble,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
tibble,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
tibble,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
tibble,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
tibble,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
tibble,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
tibble,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
tibble,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
tibble,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
tibble,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
tibble,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
tibble,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
tibble,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
tibble,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
tibble,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
tibble,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
tibble,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
tibble,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
tibble,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
tibble,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
tibble,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
tibble,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
tibble,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
tibble,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
tibble,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
tibble,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
tibble,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
tibble,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
tibble,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
tibble,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
tibble,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
tibble,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
tibble,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
tibble,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
tibble,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
tibble,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
tibble,1,307,321,FALSE,This handler also works as a calling handler:,NA
tibble,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
tibble,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
tibble,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
tibble,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
tibble,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
tibble,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
tibble,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
tibble,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
tibble,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
tibble,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
tibble,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
tibble,1,316,332,FALSE,`calling()` now boxes its argument.,NA
tibble,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
tibble,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
tibble,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
tibble,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
tibble,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
tibble,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
tibble,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
tibble,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
tibble,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
tibble,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
tibble,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
tibble,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
tibble,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
tibble,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
tibble,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
tibble,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
tibble,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
tibble,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
tibble,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
tibble,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
tibble,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
tibble,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
tibble,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
tibble,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
tibble,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
tibble,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
tibble,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
tibble,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
tibble,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
tibble,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
tibble,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
tibble,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
tibble,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
tibble,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
tibble,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
tibble,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
tibble,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
tibble,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
tibble,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
tibble,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
tibble,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
tibble,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tibble,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tibble,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tibble,1,357,375,FALSE,`!!!` disallows:,NA
tibble,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
tibble,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
tibble,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
tibble,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
tibble,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
tibble,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
tibble,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
tibble,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
tibble,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
tibble,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
tibble,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
tibble,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
tibble,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
tibble,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
tibble,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
tibble,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
tibble,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
tibble,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
tibble,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
tibble,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
tibble,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
tibble,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
tibble,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
tibble,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
tibble,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
tibble,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
tibble,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
tibble,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
tibble,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
tibble,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
tibble,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
tibble,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
tibble,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
tibble,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
tibble,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
tibble,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
tibble,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
tibble,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
tibble,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
tibble,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
tibble,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
tibble,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
tibble,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
tibble,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
tibble,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
tibble,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
tibble,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
tibble,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
tibble,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
tibble,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
tibble,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
tibble,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
tibble,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
tibble,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
tibble,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
tibble,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
tibble,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
tibble,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
tibble,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
tibble,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
tibble,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
tibble,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
tibble,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
tibble,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
tibble,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
tibble,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
tibble,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
tibble,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
tibble,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
tibble,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
tibble,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
tibble,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
tibble,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
tibble,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
tibble,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
tibble,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
tibble,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
tibble,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
tibble,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
tibble,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
tibble,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
tibble,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
tibble,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
tibble,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
tibble,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
tibble,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
tibble,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
tibble,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
tibble,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
tibble,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
tibble,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
tibble,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
tibble,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
tibble,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
tibble,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
tibble,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
tibble,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
tibble,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
tibble,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
tibble,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
tibble,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
tibble,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
tibble,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
tibble,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
tibble,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
tibble,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
tibble,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
tibble,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
tibble,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
tibble,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
tibble,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
tibble,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
tibble,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
tibble,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
tibble,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
tibble,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
tibble,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
tibble,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
tibble,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
tibble,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
tibble,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
tibble,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
tibble,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
tibble,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
tibble,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
tibble,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
tibble,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
tibble,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
tibble,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
tibble,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
tibble,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
tibble,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
tibble,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
tibble,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
tibble,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
tibble,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
tibble,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
tibble,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
tibble,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
tibble,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
tibble,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
tibble,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
tibble,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
tibble,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
tibble,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
tibble,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
tibble,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
tibble,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
tibble,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
tibble,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
tibble,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
tibble,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
tibble,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
tibble,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
tibble,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
tibble,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
tibble,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
tibble,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
tibble,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
tibble,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
tibble,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
tibble,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
tibble,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
tibble,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
tibble,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
tibble,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
tibble,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
tibble,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
tibble,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
tibble,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
tibble,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
tibble,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
tibble,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
tibble,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
tibble,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
tibble,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
tibble,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
tibble,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
tibble,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
tibble,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
tidyr,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
tidyr,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
tidyr,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
tidyr,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
tidyr,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
tidyr,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
tidyr,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
tidyr,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
tidyr,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
tidyr,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
tidyr,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
tidyr,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
tidyr,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
tidyr,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
tidyr,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
tidyr,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
tidyr,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
tidyr,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
tidyr,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
tidyr,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
tidyr,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
tidyr,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
tidyr,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
tidyr,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
tidyr,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
tidyr,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
tidyr,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
tidyr,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
tidyr,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
tidyr,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
tidyr,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
tidyr,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
tidyr,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
tidyr,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
tidyr,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
tidyr,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
tidyr,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
tidyr,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
tidyr,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
tidyr,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
tidyr,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
tidyr,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
tidyr,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
tidyr,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
tidyr,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
tidyr,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
tidyr,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
tidyr,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
tidyr,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
tidyr,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
tidyr,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
tidyr,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
tidyr,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
tidyr,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
tidyr,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
tidyr,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
tidyr,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
tidyr,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
tidyr,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
tidyr,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
tidyr,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
tidyr,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
tidyr,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
tidyr,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
tidyr,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
tidyr,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
tidyr,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
tidyr,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
tidyr,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
tidyr,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
tidyr,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
tidyr,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
tidyr,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
tidyr,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
tidyr,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
tidyr,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
tidyr,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
tidyr,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
tidyr,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
tidyr,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
tidyr,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
tidyr,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
tidyr,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
tidyr,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
tidyr,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
tidyr,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
tidyr,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
tidyr,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
tidyr,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
tidyr,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
tidyr,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tidyr,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tidyr,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tidyr,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
tidyr,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
tidyr,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
tidyr,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
tidyr,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
tidyr,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
tidyr,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
tidyr,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
tidyr,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
tidyr,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyr,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyr,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyr,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyr,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyr,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
tidyr,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
tidyr,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
tidyr,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
tidyr,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
tidyr,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
tidyr,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
tidyr,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
tidyr,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
tidyr,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
tidyr,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
tidyr,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
tidyr,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
tidyr,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
tidyr,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
tidyr,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
tidyr,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
tidyr,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
tidyr,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
tidyr,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
tidyr,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
tidyr,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
tidyr,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
tidyr,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
tidyr,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
tidyr,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
tidyr,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
tidyr,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
tidyr,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
tidyr,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
tidyr,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
tidyr,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
tidyr,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
tidyr,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
tidyr,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
tidyr,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
tidyr,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
tidyr,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
tidyr,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
tidyr,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
tidyr,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
tidyr,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
tidyr,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
tidyr,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
tidyr,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
tidyr,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
tidyr,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
tidyr,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
tidyr,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
tidyr,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
tidyr,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
tidyr,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
tidyr,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
tidyr,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
tidyr,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
tidyr,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
tidyr,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
tidyr,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
tidyr,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
tidyr,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
tidyr,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
tidyr,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
tidyr,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
tidyr,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
tidyr,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
tidyr,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
tidyr,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
tidyr,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
tidyr,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
tidyr,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
tidyr,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
tidyr,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
tidyr,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
tidyr,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
tidyr,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
tidyr,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
tidyr,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
tidyr,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
tidyr,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
tidyr,1,178,183,FALSE,`obj_address()` is now exported.,NA
tidyr,1,179,184,FALSE,`%<~%` now actually works.,NA
tidyr,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
tidyr,1,182,187,FALSE,Fix for CRAN checks.,NA
tidyr,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
tidyr,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
tidyr,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
tidyr,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
tidyr,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
tidyr,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
tidyr,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
tidyr,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
tidyr,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
tidyr,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
tidyr,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
tidyr,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
tidyr,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
tidyr,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
tidyr,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
tidyr,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
tidyr,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
tidyr,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
tidyr,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
tidyr,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
tidyr,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
tidyr,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
tidyr,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
tidyr,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
tidyr,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
tidyr,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
tidyr,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
tidyr,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
tidyr,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
tidyr,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
tidyr,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
tidyr,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
tidyr,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
tidyr,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
tidyr,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
tidyr,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
tidyr,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
tidyr,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
tidyr,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
tidyr,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
tidyr,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
tidyr,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
tidyr,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
tidyr,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
tidyr,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
tidyr,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
tidyr,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
tidyr,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
tidyr,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
tidyr,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
tidyr,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
tidyr,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
tidyr,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
tidyr,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
tidyr,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
tidyr,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
tidyr,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
tidyr,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
tidyr,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
tidyr,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
tidyr,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
tidyr,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
tidyr,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
tidyr,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
tidyr,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
tidyr,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
tidyr,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
tidyr,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
tidyr,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
tidyr,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
tidyr,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
tidyr,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
tidyr,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
tidyr,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
tidyr,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
tidyr,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
tidyr,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
tidyr,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
tidyr,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
tidyr,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
tidyr,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
tidyr,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
tidyr,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
tidyr,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
tidyr,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
tidyr,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
tidyr,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
tidyr,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
tidyr,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
tidyr,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
tidyr,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
tidyr,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
tidyr,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
tidyr,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
tidyr,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
tidyr,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
tidyr,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
tidyr,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
tidyr,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
tidyr,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
tidyr,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
tidyr,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
tidyr,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
tidyr,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
tidyr,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
tidyr,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
tidyr,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
tidyr,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
tidyr,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
tidyr,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
tidyr,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
tidyr,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
tidyr,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
tidyr,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
tidyr,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
tidyr,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
tidyr,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
tidyr,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
tidyr,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
tidyr,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
tidyr,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
tidyr,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
tidyr,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
tidyr,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
tidyr,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
tidyr,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
tidyr,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
tidyr,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
tidyr,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
tidyr,1,307,321,FALSE,This handler also works as a calling handler:,NA
tidyr,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
tidyr,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
tidyr,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
tidyr,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
tidyr,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
tidyr,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
tidyr,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
tidyr,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
tidyr,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
tidyr,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
tidyr,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
tidyr,1,316,332,FALSE,`calling()` now boxes its argument.,NA
tidyr,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
tidyr,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
tidyr,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
tidyr,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
tidyr,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
tidyr,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
tidyr,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
tidyr,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
tidyr,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
tidyr,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
tidyr,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
tidyr,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
tidyr,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
tidyr,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
tidyr,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
tidyr,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
tidyr,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
tidyr,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
tidyr,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
tidyr,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
tidyr,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
tidyr,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
tidyr,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
tidyr,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
tidyr,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
tidyr,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
tidyr,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
tidyr,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
tidyr,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
tidyr,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
tidyr,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
tidyr,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
tidyr,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
tidyr,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
tidyr,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
tidyr,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
tidyr,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
tidyr,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
tidyr,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
tidyr,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
tidyr,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
tidyr,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tidyr,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tidyr,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tidyr,1,357,375,FALSE,`!!!` disallows:,NA
tidyr,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
tidyr,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
tidyr,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
tidyr,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
tidyr,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
tidyr,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
tidyr,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
tidyr,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
tidyr,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
tidyr,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
tidyr,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
tidyr,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
tidyr,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
tidyr,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
tidyr,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
tidyr,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
tidyr,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
tidyr,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
tidyr,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
tidyr,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
tidyr,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
tidyr,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
tidyr,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
tidyr,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
tidyr,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
tidyr,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
tidyr,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
tidyr,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
tidyr,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
tidyr,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
tidyr,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
tidyr,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
tidyr,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
tidyr,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
tidyr,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
tidyr,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
tidyr,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
tidyr,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
tidyr,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
tidyr,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
tidyr,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
tidyr,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
tidyr,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
tidyr,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
tidyr,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
tidyr,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
tidyr,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
tidyr,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
tidyr,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
tidyr,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
tidyr,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
tidyr,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
tidyr,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
tidyr,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
tidyr,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
tidyr,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
tidyr,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
tidyr,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
tidyr,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
tidyr,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
tidyr,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
tidyr,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
tidyr,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
tidyr,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
tidyr,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
tidyr,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
tidyr,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
tidyr,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
tidyr,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
tidyr,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
tidyr,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
tidyr,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
tidyr,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
tidyr,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
tidyr,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
tidyr,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
tidyr,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
tidyr,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
tidyr,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
tidyr,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
tidyr,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
tidyr,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
tidyr,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
tidyr,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
tidyr,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
tidyr,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
tidyr,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
tidyr,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
tidyr,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
tidyr,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
tidyr,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
tidyr,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
tidyr,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
tidyr,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
tidyr,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
tidyr,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
tidyr,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
tidyr,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
tidyr,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
tidyr,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
tidyr,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
tidyr,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
tidyr,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
tidyr,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
tidyr,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
tidyr,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
tidyr,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
tidyr,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
tidyr,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
tidyr,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
tidyr,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
tidyr,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
tidyr,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
tidyr,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
tidyr,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
tidyr,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
tidyr,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
tidyr,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
tidyr,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
tidyr,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
tidyr,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
tidyr,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
tidyr,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
tidyr,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
tidyr,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
tidyr,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
tidyr,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
tidyr,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
tidyr,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
tidyr,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
tidyr,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
tidyr,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
tidyr,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
tidyr,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
tidyr,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
tidyr,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
tidyr,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
tidyr,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
tidyr,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
tidyr,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
tidyr,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
tidyr,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
tidyr,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
tidyr,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
tidyr,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
tidyr,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
tidyr,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
tidyr,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
tidyr,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
tidyr,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
tidyr,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
tidyr,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
tidyr,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
tidyr,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
tidyr,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
tidyr,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
tidyr,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
tidyr,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
tidyr,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
tidyr,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
tidyr,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
tidyr,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
tidyr,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
tidyr,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
tidyr,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
tidyr,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
tidyr,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
tidyr,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
tidyr,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
tidyr,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
tidyr,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
tidyr,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
tidyr,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
tidyr,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
tidyr,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
tidyr,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
tidyr,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
tidyr,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
tidyr,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
tidyr,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
xml2,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
xml2,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
xml2,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
xml2,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
xml2,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
xml2,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
xml2,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
xml2,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
xml2,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
xml2,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
xml2,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
xml2,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
xml2,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
xml2,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
xml2,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
xml2,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
xml2,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
xml2,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
xml2,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
xml2,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
xml2,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
xml2,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
xml2,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
xml2,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
xml2,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
xml2,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
xml2,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
xml2,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
xml2,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
xml2,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
xml2,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
xml2,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
xml2,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
xml2,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
xml2,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
xml2,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
xml2,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
xml2,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
xml2,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
xml2,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
xml2,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
xml2,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
xml2,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
xml2,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
xml2,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
xml2,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
xml2,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
xml2,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
xml2,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
xml2,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
xml2,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
xml2,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
xml2,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
xml2,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
xml2,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
xml2,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
xml2,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
xml2,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
xml2,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
xml2,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
xml2,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
xml2,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
xml2,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
xml2,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
xml2,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
xml2,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
xml2,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
xml2,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
xml2,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
xml2,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
xml2,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
xml2,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
xml2,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
xml2,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
xml2,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
xml2,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
xml2,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
xml2,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
xml2,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
xml2,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
xml2,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
xml2,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
xml2,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
xml2,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
xml2,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
xml2,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
xml2,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
xml2,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
xml2,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
xml2,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
xml2,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
xml2,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
xml2,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
xml2,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
xml2,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
xml2,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
xml2,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
xml2,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
xml2,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
xml2,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
xml2,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
xml2,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
xml2,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
xml2,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
xml2,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
xml2,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
xml2,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
xml2,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
xml2,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
xml2,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
xml2,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
xml2,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
xml2,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
xml2,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
xml2,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
xml2,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
xml2,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
xml2,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
xml2,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
xml2,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
xml2,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
xml2,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
xml2,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
xml2,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
xml2,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
xml2,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
xml2,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
xml2,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
xml2,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
xml2,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
xml2,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
xml2,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
xml2,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
xml2,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
xml2,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
xml2,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
xml2,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
xml2,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
xml2,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
xml2,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
xml2,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
xml2,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
xml2,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
xml2,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
xml2,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
xml2,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
xml2,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
xml2,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
xml2,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
xml2,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
xml2,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
xml2,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
xml2,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
xml2,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
xml2,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
xml2,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
xml2,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
xml2,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
xml2,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
xml2,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
xml2,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
xml2,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
xml2,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
xml2,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
xml2,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
xml2,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
xml2,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
xml2,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
xml2,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
xml2,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
xml2,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
xml2,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
xml2,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
xml2,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
xml2,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
xml2,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
xml2,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
xml2,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
xml2,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
xml2,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
xml2,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
xml2,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
xml2,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
xml2,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
xml2,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
xml2,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
xml2,1,178,183,FALSE,`obj_address()` is now exported.,NA
xml2,1,179,184,FALSE,`%<~%` now actually works.,NA
xml2,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
xml2,1,182,187,FALSE,Fix for CRAN checks.,NA
xml2,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
xml2,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
xml2,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
xml2,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
xml2,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
xml2,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
xml2,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
xml2,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
xml2,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
xml2,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
xml2,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
xml2,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
xml2,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
xml2,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
xml2,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
xml2,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
xml2,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
xml2,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
xml2,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
xml2,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
xml2,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
xml2,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
xml2,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
xml2,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
xml2,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
xml2,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
xml2,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
xml2,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
xml2,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
xml2,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
xml2,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
xml2,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
xml2,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
xml2,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
xml2,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
xml2,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
xml2,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
xml2,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
xml2,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
xml2,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
xml2,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
xml2,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
xml2,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
xml2,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
xml2,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
xml2,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
xml2,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
xml2,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
xml2,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
xml2,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
xml2,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
xml2,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
xml2,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
xml2,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
xml2,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
xml2,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
xml2,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
xml2,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
xml2,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
xml2,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
xml2,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
xml2,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
xml2,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
xml2,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
xml2,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
xml2,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
xml2,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
xml2,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
xml2,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
xml2,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
xml2,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
xml2,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
xml2,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
xml2,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
xml2,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
xml2,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
xml2,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
xml2,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
xml2,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
xml2,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
xml2,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
xml2,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
xml2,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
xml2,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
xml2,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
xml2,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
xml2,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
xml2,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
xml2,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
xml2,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
xml2,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
xml2,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
xml2,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
xml2,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
xml2,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
xml2,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
xml2,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
xml2,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
xml2,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
xml2,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
xml2,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
xml2,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
xml2,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
xml2,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
xml2,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
xml2,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
xml2,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
xml2,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
xml2,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
xml2,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
xml2,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
xml2,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
xml2,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
xml2,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
xml2,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
xml2,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
xml2,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
xml2,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
xml2,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
xml2,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
xml2,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
xml2,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
xml2,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
xml2,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
xml2,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
xml2,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
xml2,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
xml2,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
xml2,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
xml2,1,307,321,FALSE,This handler also works as a calling handler:,NA
xml2,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
xml2,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
xml2,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
xml2,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
xml2,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
xml2,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
xml2,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
xml2,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
xml2,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
xml2,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
xml2,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
xml2,1,316,332,FALSE,`calling()` now boxes its argument.,NA
xml2,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
xml2,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
xml2,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
xml2,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
xml2,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
xml2,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
xml2,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
xml2,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
xml2,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
xml2,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
xml2,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
xml2,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
xml2,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
xml2,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
xml2,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
xml2,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
xml2,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
xml2,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
xml2,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
xml2,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
xml2,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
xml2,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
xml2,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
xml2,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
xml2,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
xml2,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
xml2,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
xml2,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
xml2,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
xml2,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
xml2,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
xml2,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
xml2,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
xml2,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
xml2,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
xml2,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
xml2,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
xml2,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
xml2,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
xml2,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
xml2,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
xml2,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
xml2,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
xml2,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
xml2,1,357,375,FALSE,`!!!` disallows:,NA
xml2,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
xml2,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
xml2,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
xml2,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
xml2,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
xml2,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
xml2,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
xml2,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
xml2,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
xml2,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
xml2,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
xml2,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
xml2,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
xml2,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
xml2,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
xml2,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
xml2,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
xml2,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
xml2,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
xml2,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
xml2,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
xml2,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
xml2,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
xml2,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
xml2,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
xml2,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
xml2,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
xml2,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
xml2,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
xml2,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
xml2,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
xml2,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
xml2,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
xml2,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
xml2,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
xml2,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
xml2,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
xml2,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
xml2,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
xml2,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
xml2,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
xml2,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
xml2,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
xml2,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
xml2,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
xml2,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
xml2,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
xml2,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
xml2,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
xml2,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
xml2,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
xml2,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
xml2,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
xml2,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
xml2,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
xml2,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
xml2,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
xml2,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
xml2,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
xml2,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
xml2,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
xml2,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
xml2,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
xml2,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
xml2,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
xml2,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
xml2,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
xml2,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
xml2,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
xml2,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
xml2,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
xml2,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
xml2,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
xml2,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
xml2,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
xml2,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
xml2,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
xml2,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
xml2,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
xml2,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
xml2,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
xml2,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
xml2,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
xml2,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
xml2,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
xml2,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
xml2,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
xml2,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
xml2,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
xml2,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
xml2,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
xml2,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
xml2,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
xml2,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
xml2,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
xml2,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
xml2,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
xml2,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
xml2,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
xml2,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
xml2,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
xml2,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
xml2,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
xml2,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
xml2,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
xml2,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
xml2,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
xml2,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
xml2,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
xml2,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
xml2,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
xml2,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
xml2,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
xml2,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
xml2,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
xml2,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
xml2,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
xml2,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
xml2,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
xml2,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
xml2,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
xml2,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
xml2,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
xml2,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
xml2,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
xml2,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
xml2,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
xml2,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
xml2,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
xml2,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
xml2,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
xml2,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
xml2,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
xml2,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
xml2,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
xml2,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
xml2,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
xml2,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
xml2,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
xml2,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
xml2,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
xml2,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
xml2,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
xml2,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
xml2,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
xml2,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
xml2,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
xml2,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
xml2,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
xml2,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
xml2,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
xml2,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
xml2,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
xml2,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
xml2,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
xml2,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
xml2,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
xml2,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
xml2,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
xml2,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
xml2,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
xml2,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
xml2,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
xml2,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
xml2,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
xml2,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
xml2,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
xml2,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
xml2,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
xml2,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
xml2,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
xml2,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
xml2,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
xml2,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
xml2,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
xml2,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
xml2,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
xml2,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
xml2,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
xml2,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
tidyverse,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
tidyverse,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
tidyverse,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
tidyverse,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
tidyverse,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
tidyverse,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
tidyverse,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
tidyverse,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
tidyverse,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
tidyverse,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
tidyverse,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
tidyverse,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
tidyverse,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
tidyverse,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
tidyverse,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
tidyverse,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
tidyverse,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
tidyverse,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
tidyverse,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
tidyverse,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
tidyverse,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
tidyverse,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
tidyverse,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
tidyverse,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
tidyverse,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
tidyverse,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
tidyverse,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
tidyverse,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
tidyverse,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
tidyverse,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
tidyverse,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
tidyverse,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
tidyverse,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
tidyverse,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
tidyverse,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
tidyverse,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
tidyverse,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
tidyverse,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
tidyverse,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
tidyverse,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
tidyverse,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
tidyverse,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
tidyverse,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
tidyverse,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
tidyverse,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
tidyverse,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
tidyverse,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
tidyverse,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
tidyverse,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
tidyverse,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
tidyverse,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
tidyverse,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
tidyverse,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
tidyverse,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
tidyverse,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
tidyverse,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
tidyverse,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
tidyverse,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
tidyverse,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
tidyverse,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
tidyverse,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
tidyverse,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
tidyverse,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
tidyverse,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
tidyverse,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
tidyverse,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
tidyverse,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
tidyverse,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
tidyverse,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
tidyverse,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
tidyverse,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
tidyverse,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
tidyverse,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
tidyverse,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
tidyverse,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
tidyverse,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
tidyverse,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
tidyverse,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
tidyverse,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
tidyverse,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
tidyverse,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
tidyverse,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
tidyverse,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
tidyverse,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
tidyverse,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
tidyverse,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
tidyverse,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
tidyverse,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
tidyverse,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
tidyverse,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
tidyverse,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tidyverse,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tidyverse,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
tidyverse,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
tidyverse,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
tidyverse,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
tidyverse,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
tidyverse,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
tidyverse,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
tidyverse,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
tidyverse,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
tidyverse,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
tidyverse,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyverse,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyverse,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyverse,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyverse,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
tidyverse,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
tidyverse,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
tidyverse,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
tidyverse,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
tidyverse,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
tidyverse,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
tidyverse,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
tidyverse,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
tidyverse,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
tidyverse,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
tidyverse,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
tidyverse,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
tidyverse,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
tidyverse,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
tidyverse,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
tidyverse,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
tidyverse,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
tidyverse,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
tidyverse,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
tidyverse,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
tidyverse,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
tidyverse,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
tidyverse,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
tidyverse,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
tidyverse,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
tidyverse,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
tidyverse,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
tidyverse,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
tidyverse,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
tidyverse,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
tidyverse,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
tidyverse,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
tidyverse,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
tidyverse,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
tidyverse,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
tidyverse,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
tidyverse,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
tidyverse,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
tidyverse,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
tidyverse,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
tidyverse,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
tidyverse,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
tidyverse,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
tidyverse,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
tidyverse,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
tidyverse,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
tidyverse,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
tidyverse,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
tidyverse,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
tidyverse,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
tidyverse,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
tidyverse,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
tidyverse,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
tidyverse,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
tidyverse,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
tidyverse,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
tidyverse,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
tidyverse,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
tidyverse,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
tidyverse,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
tidyverse,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
tidyverse,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
tidyverse,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
tidyverse,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
tidyverse,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
tidyverse,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
tidyverse,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
tidyverse,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
tidyverse,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
tidyverse,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
tidyverse,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
tidyverse,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
tidyverse,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
tidyverse,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
tidyverse,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
tidyverse,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
tidyverse,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
tidyverse,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
tidyverse,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
tidyverse,1,178,183,FALSE,`obj_address()` is now exported.,NA
tidyverse,1,179,184,FALSE,`%<~%` now actually works.,NA
tidyverse,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
tidyverse,1,182,187,FALSE,Fix for CRAN checks.,NA
tidyverse,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
tidyverse,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
tidyverse,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
tidyverse,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
tidyverse,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
tidyverse,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
tidyverse,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
tidyverse,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
tidyverse,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
tidyverse,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
tidyverse,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
tidyverse,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
tidyverse,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
tidyverse,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
tidyverse,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
tidyverse,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
tidyverse,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
tidyverse,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
tidyverse,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
tidyverse,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
tidyverse,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
tidyverse,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
tidyverse,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
tidyverse,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
tidyverse,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
tidyverse,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
tidyverse,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
tidyverse,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
tidyverse,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
tidyverse,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
tidyverse,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
tidyverse,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
tidyverse,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
tidyverse,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
tidyverse,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
tidyverse,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
tidyverse,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
tidyverse,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
tidyverse,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
tidyverse,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
tidyverse,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
tidyverse,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
tidyverse,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
tidyverse,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
tidyverse,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
tidyverse,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
tidyverse,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
tidyverse,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
tidyverse,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
tidyverse,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
tidyverse,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
tidyverse,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
tidyverse,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
tidyverse,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
tidyverse,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
tidyverse,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
tidyverse,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
tidyverse,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
tidyverse,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
tidyverse,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
tidyverse,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
tidyverse,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
tidyverse,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
tidyverse,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
tidyverse,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
tidyverse,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
tidyverse,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
tidyverse,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
tidyverse,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
tidyverse,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
tidyverse,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
tidyverse,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
tidyverse,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
tidyverse,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
tidyverse,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
tidyverse,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
tidyverse,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
tidyverse,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
tidyverse,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
tidyverse,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
tidyverse,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
tidyverse,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
tidyverse,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
tidyverse,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
tidyverse,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
tidyverse,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
tidyverse,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
tidyverse,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
tidyverse,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
tidyverse,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
tidyverse,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
tidyverse,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
tidyverse,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
tidyverse,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
tidyverse,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
tidyverse,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
tidyverse,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
tidyverse,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
tidyverse,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
tidyverse,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
tidyverse,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
tidyverse,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
tidyverse,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
tidyverse,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
tidyverse,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
tidyverse,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
tidyverse,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
tidyverse,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
tidyverse,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
tidyverse,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
tidyverse,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
tidyverse,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
tidyverse,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
tidyverse,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
tidyverse,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
tidyverse,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
tidyverse,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
tidyverse,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
tidyverse,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
tidyverse,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
tidyverse,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
tidyverse,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
tidyverse,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
tidyverse,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
tidyverse,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
tidyverse,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
tidyverse,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
tidyverse,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
tidyverse,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
tidyverse,1,307,321,FALSE,This handler also works as a calling handler:,NA
tidyverse,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
tidyverse,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
tidyverse,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
tidyverse,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
tidyverse,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
tidyverse,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
tidyverse,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
tidyverse,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
tidyverse,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
tidyverse,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
tidyverse,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
tidyverse,1,316,332,FALSE,`calling()` now boxes its argument.,NA
tidyverse,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
tidyverse,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
tidyverse,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
tidyverse,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
tidyverse,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
tidyverse,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
tidyverse,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
tidyverse,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
tidyverse,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
tidyverse,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
tidyverse,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
tidyverse,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
tidyverse,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
tidyverse,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
tidyverse,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
tidyverse,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
tidyverse,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
tidyverse,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
tidyverse,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
tidyverse,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
tidyverse,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
tidyverse,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
tidyverse,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
tidyverse,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
tidyverse,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
tidyverse,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
tidyverse,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
tidyverse,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
tidyverse,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
tidyverse,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
tidyverse,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
tidyverse,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
tidyverse,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
tidyverse,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
tidyverse,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
tidyverse,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
tidyverse,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
tidyverse,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
tidyverse,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
tidyverse,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
tidyverse,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
tidyverse,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tidyverse,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tidyverse,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
tidyverse,1,357,375,FALSE,`!!!` disallows:,NA
tidyverse,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
tidyverse,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
tidyverse,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
tidyverse,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
tidyverse,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
tidyverse,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
tidyverse,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
tidyverse,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
tidyverse,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
tidyverse,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
tidyverse,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
tidyverse,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
tidyverse,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
tidyverse,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
tidyverse,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
tidyverse,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
tidyverse,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
tidyverse,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
tidyverse,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
tidyverse,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
tidyverse,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
tidyverse,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
tidyverse,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
tidyverse,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
tidyverse,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
tidyverse,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
tidyverse,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
tidyverse,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
tidyverse,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
tidyverse,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
tidyverse,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
tidyverse,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
tidyverse,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
tidyverse,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
tidyverse,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
tidyverse,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
tidyverse,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
tidyverse,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
tidyverse,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
tidyverse,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
tidyverse,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
tidyverse,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
tidyverse,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
tidyverse,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
tidyverse,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
tidyverse,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
tidyverse,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
tidyverse,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
tidyverse,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
tidyverse,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
tidyverse,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
tidyverse,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
tidyverse,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
tidyverse,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
tidyverse,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
tidyverse,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
tidyverse,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
tidyverse,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
tidyverse,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
tidyverse,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
tidyverse,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
tidyverse,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
tidyverse,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
tidyverse,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
tidyverse,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
tidyverse,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
tidyverse,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
tidyverse,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
tidyverse,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
tidyverse,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
tidyverse,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
tidyverse,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
tidyverse,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
tidyverse,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
tidyverse,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
tidyverse,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
tidyverse,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
tidyverse,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
tidyverse,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
tidyverse,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
tidyverse,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
tidyverse,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
tidyverse,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
tidyverse,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
tidyverse,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
tidyverse,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
tidyverse,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
tidyverse,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
tidyverse,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
tidyverse,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
tidyverse,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
tidyverse,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
tidyverse,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
tidyverse,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
tidyverse,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
tidyverse,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
tidyverse,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
tidyverse,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
tidyverse,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
tidyverse,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
tidyverse,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
tidyverse,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
tidyverse,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
tidyverse,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
tidyverse,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
tidyverse,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
tidyverse,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
tidyverse,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
tidyverse,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
tidyverse,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
tidyverse,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
tidyverse,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
tidyverse,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
tidyverse,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
tidyverse,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
tidyverse,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
tidyverse,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
tidyverse,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
tidyverse,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
tidyverse,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
tidyverse,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
tidyverse,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
tidyverse,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
tidyverse,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
tidyverse,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
tidyverse,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
tidyverse,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
tidyverse,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
tidyverse,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
tidyverse,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
tidyverse,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
tidyverse,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
tidyverse,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
tidyverse,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
tidyverse,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
tidyverse,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
tidyverse,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
tidyverse,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
tidyverse,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
tidyverse,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
tidyverse,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
tidyverse,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
tidyverse,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
tidyverse,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
tidyverse,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
tidyverse,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
tidyverse,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
tidyverse,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
tidyverse,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
tidyverse,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
tidyverse,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
tidyverse,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
tidyverse,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
tidyverse,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
tidyverse,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
tidyverse,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
tidyverse,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
tidyverse,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
tidyverse,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
tidyverse,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
tidyverse,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
tidyverse,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
tidyverse,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
tidyverse,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
tidyverse,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
tidyverse,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
tidyverse,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
tidyverse,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
tidyverse,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
tidyverse,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
tidyverse,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
tidyverse,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
tidyverse,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
tidyverse,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
tidyverse,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
tidyverse,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
tidyverse,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
tidyverse,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
tidyverse,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
tidyverse,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
fake_package,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
fake_package,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
fake_package,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
fake_package,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
fake_package,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
fake_package,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
fake_package,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
fake_package,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
fake_package,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
fake_package,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
fake_package,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
fake_package,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
fake_package,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
fake_package,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
fake_package,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
fake_package,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
fake_package,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
fake_package,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
fake_package,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
fake_package,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
fake_package,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
fake_package,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
fake_package,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
fake_package,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
fake_package,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
fake_package,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
fake_package,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
fake_package,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
fake_package,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
fake_package,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
fake_package,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
fake_package,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
fake_package,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
fake_package,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
fake_package,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
fake_package,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
fake_package,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
fake_package,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
fake_package,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
fake_package,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
fake_package,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
fake_package,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
fake_package,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
fake_package,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
fake_package,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
fake_package,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
fake_package,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
fake_package,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
fake_package,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
fake_package,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
fake_package,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
fake_package,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
fake_package,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
fake_package,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
fake_package,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
fake_package,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
fake_package,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
fake_package,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
fake_package,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
fake_package,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
fake_package,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
fake_package,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
fake_package,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
fake_package,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
fake_package,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
fake_package,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
fake_package,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
fake_package,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
fake_package,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
fake_package,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
fake_package,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
fake_package,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
fake_package,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
fake_package,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
fake_package,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
fake_package,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
fake_package,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
fake_package,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
fake_package,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
fake_package,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
fake_package,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
fake_package,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
fake_package,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
fake_package,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
fake_package,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
fake_package,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
fake_package,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
fake_package,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
fake_package,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
fake_package,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
fake_package,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
fake_package,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
fake_package,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
fake_package,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
fake_package,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
fake_package,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
fake_package,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
fake_package,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
fake_package,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
fake_package,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
fake_package,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
fake_package,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
fake_package,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
fake_package,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
fake_package,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
fake_package,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
fake_package,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
fake_package,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
fake_package,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
fake_package,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
fake_package,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
fake_package,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
fake_package,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
fake_package,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
fake_package,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
fake_package,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
fake_package,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
fake_package,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
fake_package,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
fake_package,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
fake_package,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
fake_package,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
fake_package,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
fake_package,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
fake_package,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
fake_package,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
fake_package,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
fake_package,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
fake_package,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
fake_package,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
fake_package,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
fake_package,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
fake_package,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
fake_package,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
fake_package,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
fake_package,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
fake_package,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
fake_package,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
fake_package,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
fake_package,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
fake_package,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
fake_package,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
fake_package,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
fake_package,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
fake_package,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
fake_package,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
fake_package,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
fake_package,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
fake_package,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
fake_package,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
fake_package,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
fake_package,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
fake_package,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
fake_package,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
fake_package,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
fake_package,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
fake_package,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
fake_package,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
fake_package,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
fake_package,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
fake_package,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
fake_package,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
fake_package,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
fake_package,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
fake_package,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
fake_package,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
fake_package,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
fake_package,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
fake_package,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
fake_package,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
fake_package,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
fake_package,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
fake_package,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
fake_package,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
fake_package,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
fake_package,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
fake_package,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
fake_package,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
fake_package,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
fake_package,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
fake_package,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
fake_package,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
fake_package,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
fake_package,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
fake_package,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
fake_package,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
fake_package,1,178,183,FALSE,`obj_address()` is now exported.,NA
fake_package,1,179,184,FALSE,`%<~%` now actually works.,NA
fake_package,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
fake_package,1,182,187,FALSE,Fix for CRAN checks.,NA
fake_package,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
fake_package,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
fake_package,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
fake_package,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
fake_package,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
fake_package,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
fake_package,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
fake_package,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
fake_package,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
fake_package,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
fake_package,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
fake_package,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
fake_package,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
fake_package,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
fake_package,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
fake_package,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
fake_package,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
fake_package,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
fake_package,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
fake_package,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
fake_package,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
fake_package,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
fake_package,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
fake_package,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
fake_package,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
fake_package,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
fake_package,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
fake_package,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
fake_package,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
fake_package,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
fake_package,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
fake_package,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
fake_package,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
fake_package,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
fake_package,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
fake_package,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
fake_package,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
fake_package,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
fake_package,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
fake_package,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
fake_package,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
fake_package,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
fake_package,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
fake_package,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
fake_package,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
fake_package,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
fake_package,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
fake_package,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
fake_package,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
fake_package,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
fake_package,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
fake_package,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
fake_package,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
fake_package,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
fake_package,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
fake_package,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
fake_package,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
fake_package,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
fake_package,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
fake_package,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
fake_package,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
fake_package,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
fake_package,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
fake_package,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
fake_package,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
fake_package,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
fake_package,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
fake_package,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
fake_package,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
fake_package,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
fake_package,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
fake_package,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
fake_package,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
fake_package,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
fake_package,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
fake_package,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
fake_package,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
fake_package,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
fake_package,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
fake_package,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
fake_package,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
fake_package,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
fake_package,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
fake_package,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
fake_package,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
fake_package,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
fake_package,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
fake_package,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
fake_package,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
fake_package,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
fake_package,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
fake_package,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
fake_package,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
fake_package,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
fake_package,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
fake_package,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
fake_package,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
fake_package,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
fake_package,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
fake_package,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
fake_package,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
fake_package,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
fake_package,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
fake_package,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
fake_package,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
fake_package,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
fake_package,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
fake_package,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
fake_package,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
fake_package,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
fake_package,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
fake_package,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
fake_package,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
fake_package,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
fake_package,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
fake_package,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
fake_package,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
fake_package,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
fake_package,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
fake_package,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
fake_package,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
fake_package,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
fake_package,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
fake_package,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
fake_package,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
fake_package,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
fake_package,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
fake_package,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
fake_package,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
fake_package,1,307,321,FALSE,This handler also works as a calling handler:,NA
fake_package,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
fake_package,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
fake_package,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
fake_package,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
fake_package,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
fake_package,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
fake_package,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
fake_package,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
fake_package,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
fake_package,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
fake_package,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
fake_package,1,316,332,FALSE,`calling()` now boxes its argument.,NA
fake_package,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
fake_package,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
fake_package,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
fake_package,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
fake_package,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
fake_package,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
fake_package,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
fake_package,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
fake_package,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
fake_package,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
fake_package,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
fake_package,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
fake_package,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
fake_package,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
fake_package,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
fake_package,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
fake_package,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
fake_package,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
fake_package,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
fake_package,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
fake_package,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
fake_package,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
fake_package,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
fake_package,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
fake_package,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
fake_package,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
fake_package,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
fake_package,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
fake_package,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
fake_package,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
fake_package,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
fake_package,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
fake_package,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
fake_package,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
fake_package,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
fake_package,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
fake_package,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
fake_package,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
fake_package,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
fake_package,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
fake_package,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
fake_package,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
fake_package,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
fake_package,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
fake_package,1,357,375,FALSE,`!!!` disallows:,NA
fake_package,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
fake_package,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
fake_package,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
fake_package,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
fake_package,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
fake_package,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
fake_package,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
fake_package,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
fake_package,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
fake_package,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
fake_package,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
fake_package,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
fake_package,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
fake_package,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
fake_package,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
fake_package,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
fake_package,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
fake_package,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
fake_package,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
fake_package,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
fake_package,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
fake_package,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
fake_package,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
fake_package,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
fake_package,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
fake_package,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
fake_package,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
fake_package,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
fake_package,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
fake_package,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
fake_package,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
fake_package,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
fake_package,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
fake_package,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
fake_package,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
fake_package,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
fake_package,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
fake_package,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
fake_package,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
fake_package,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
fake_package,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
fake_package,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
fake_package,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
fake_package,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
fake_package,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
fake_package,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
fake_package,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
fake_package,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
fake_package,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
fake_package,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
fake_package,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
fake_package,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
fake_package,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
fake_package,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
fake_package,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
fake_package,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
fake_package,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
fake_package,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
fake_package,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
fake_package,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
fake_package,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
fake_package,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
fake_package,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
fake_package,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
fake_package,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
fake_package,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
fake_package,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
fake_package,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
fake_package,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
fake_package,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
fake_package,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
fake_package,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
fake_package,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
fake_package,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
fake_package,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
fake_package,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
fake_package,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
fake_package,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
fake_package,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
fake_package,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
fake_package,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
fake_package,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
fake_package,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
fake_package,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
fake_package,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
fake_package,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
fake_package,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
fake_package,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
fake_package,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
fake_package,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
fake_package,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
fake_package,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
fake_package,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
fake_package,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
fake_package,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
fake_package,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
fake_package,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
fake_package,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
fake_package,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
fake_package,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
fake_package,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
fake_package,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
fake_package,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
fake_package,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
fake_package,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
fake_package,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
fake_package,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
fake_package,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
fake_package,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
fake_package,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
fake_package,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
fake_package,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
fake_package,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
fake_package,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
fake_package,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
fake_package,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
fake_package,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
fake_package,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
fake_package,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
fake_package,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
fake_package,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
fake_package,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
fake_package,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
fake_package,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
fake_package,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
fake_package,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
fake_package,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
fake_package,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
fake_package,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
fake_package,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
fake_package,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
fake_package,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
fake_package,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
fake_package,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
fake_package,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
fake_package,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
fake_package,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
fake_package,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
fake_package,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
fake_package,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
fake_package,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
fake_package,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
fake_package,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
fake_package,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
fake_package,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
fake_package,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
fake_package,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
fake_package,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
fake_package,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
fake_package,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
fake_package,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
fake_package,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
fake_package,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
fake_package,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
fake_package,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
fake_package,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
fake_package,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
fake_package,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
fake_package,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
fake_package,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
fake_package,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
fake_package,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
fake_package,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
fake_package,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
fake_package,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
fake_package,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
fake_package,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
fake_package,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
fake_package,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
fake_package,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
fake_package,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
fake_package,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
fake_package,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
fake_package,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
fake_package,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
fake_package,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
fake_package,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
fake_package,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
fake_package,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
fake_package,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
