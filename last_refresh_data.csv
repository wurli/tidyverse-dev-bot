package,bullets_level,bullet_id,section_id,is_codeblock,text,parent_text
broom,1,1,1,FALSE,Improves performance of `tidy.lm()` and `tidy.glm()` for full-rank,NA
broom,1,2,2,FALSE,"Moves forward with deprecation of tidiers for sparse matrices outputted from the Matrix package, initially soft-deprecated in broom 0.5.0. The Matrix tidiers were light wrappers around coercion methods that will now be deprecated from Matrix itself in the upcoming 1.4-2 release. The affected methods are `tidy.sparseMatrix()`, `tidy.dgCMatrix()`, and `tidy.dgTMatrix()`. Note that `tidy.confusionMatrix()`, for relevant objects outputted",NA
broom,1,3,3,FALSE,`tidy.anova()` works again with `anova` objects from the `lme4` package (broken by addition of the `terms` column in the previous,NA
broom,1,4,4,FALSE,Adds minimal ellipsis checking to warn on commonly misspecified arguments passed through ellipses. Notably:,NA
broom,2,4,5,FALSE,* `tidy()` methods will now warn when supplied an `exponentiate` argument if it will be ignored.,Adds minimal ellipsis checking to warn on commonly misspecified arguments passed through ellipses. Notably:
broom,2,4,6,FALSE,* `augment()` methods will now warn when supplied a `newdata` argument if it will be ignored.,Adds minimal ellipsis checking to warn on commonly misspecified arguments passed through ellipses. Notably:
broom,1,7,7,FALSE,"The warning regarding tidiers only maintained via dispatch to `lm` and `glm` is now displayed only once per session, per unique dispatch. That is, if a `class_a` object is tidied using a `(g)lm` method, broom will not warn when tidying `class_a` objects for the rest of the session, but if a `class_b` object is tidied using a",NA
broom,1,9,9,FALSE,Update in `tidy.htest()` converting matrix-columns to vector-columns,NA
broom,1,11,11,FALSE,Address failures in `tidy.zoo()` when input data does not have,NA
broom,1,12,12,FALSE,Transition tidiers for bivariate linear or spline-based interpolation---using list tidiers to interface with objects from the akima package is now considered off-label. See the interp,NA
broom,1,13,13,FALSE,"Address failures in `tidy.svyolr()` when `p.values = TRUE`. Instead of aliasing `tidy.polr()` directly, `tidy.svyolr()` lightly wraps",NA
broom,1,14,14,FALSE,Adds a `term` column and introduces support for `car::lht()` output,NA
broom,1,15,15,FALSE,"Adds a dedicated `glance.anova` method (which previously dispatched to the\ deprecated `glance.data.frame()` tidier, #1106 by",NA
broom,1,16,16,FALSE,Makes many improvements to documentation:,NA
broom,2,16,17,FALSE,* All tidiers now have example code demonstrating usage in their documentation. Tidiers for base packages as well as selected others also include sample code for visualization of results with ggplot2.,Makes many improvements to documentation:
broom,2,16,18,FALSE,"* Code examples in the documentation largely now follow consistent style---these changes were made largely to reflect the tidyverse style guide, addressing spacing, object naming, and commenting, among other things.",Makes many improvements to documentation:
broom,2,16,19,FALSE,* Examples previously marked with `\dontrun` or `\donttest` have been workshopped to run reliably.,Makes many improvements to documentation:
broom,1,20,20,FALSE,Clarifies errors and warnings for deprecated and unmaintained,NA
broom,1,21,21,FALSE,Ensures that tidiers are placed in files named according to the model-supplying package rather than the model object class for,NA
broom,1,22,22,FALSE,"Fix `glance.fixest` error when model includes only fixed effects and no regressors (`#1018` by `@arcruz0`, `#1088` by",NA
broom,1,23,23,FALSE,Address excessive messaging from `tidy.speedlm` (`#1084` by,NA
broom,1,24,24,FALSE,Add `nobs` column to the output of `glance.svyglm` (`#1085` by,NA
broom,1,25,25,FALSE,Ensure `tidy.prcomp` description entries use consistent punctuation,NA
broom,1,27,27,FALSE,Simplify handling of `MASS::polr` output in the corresponding `tidy`,NA
broom,1,28,28,FALSE,Align continuous integration with current standards in tidymodels,NA
broom,1,29,29,FALSE,Addressed issue with the ordering of original observations in `augment.rqs`. Now function preserves the original `data.frame` names also when the input `data.frame` only has one column (`#1052`,NA
broom,1,30,30,FALSE,Addressed warning from `tidy.rma` when `x$ddf` has length greater,NA
broom,1,31,31,FALSE,Fix errors in `glance.lavaan` in anticipation of upcoming `tidyr`,NA
broom,1,32,32,FALSE,Corrected the confidence interval in `tidy.crr()`. The `tidy.crr(conf.level=)` argument was previously ignored (`#1068` by,NA
broom,1,33,33,FALSE,Clarifies error when `pysch::mediate` output is dispatched to,NA
broom,1,34,34,FALSE,Allows user to specify confidence level for `tidy.rma` (`#1041` by,NA
broom,1,35,35,FALSE,Clarifies documentation related to usage of `augment_columns()`; most package users should use `augment()` in favor of,NA
broom,1,36,36,FALSE,Extends support for `emmeans` by fixing non-standard column names in case of asymptotically derived inferential statistics. (`#1046` by,NA
broom,1,37,37,FALSE,"Fixes use of index columns in `augment.mlogit` and adds `.resid` column to output. (`#1045`, `#1053`, `#1055`, and `#1056` by",NA
broom,1,38,38,FALSE,Correct column naming of standard error measures in,NA
broom,1,40,40,FALSE,"Fixes confidence intervals in `tidy.crr()`, which were previously",NA
broom,1,41,41,FALSE,"Deprecates `Rchoice` tidiers, as the newest 0.3-3 release requires R",NA
broom,1,42,42,FALSE,Updates to `ergm` tidiers in anticipation of changes in later,NA
broom,1,45,45,FALSE,Fixed bug in `tidy.epi.2by2` that resulted in errors with new,NA
broom,1,46,46,FALSE,Added `exponentiate` argument to `tidy.gam()` tidier applicable for,NA
broom,1,47,47,FALSE,Added `exponentiate` argument to `tidy.negbin()` tidier (`#1011` by,NA
broom,1,48,48,FALSE,Fixed failures in `spdep` tidiers following breaking changes in the,NA
broom,1,50,50,FALSE,Fixed bug in `augment` tidiers resulting in `.fitted` and `.se.fit`,NA
broom,1,51,51,FALSE,Fixed bug that made column `y` non-numeric after `tidy_xyz` (`#973`,NA
broom,1,53,53,FALSE,Fixed bug in `tidy.fixest` that sometimes prevented arguments like,NA
broom,1,54,54,FALSE,Fixed bug in `tidy.fixest` that resulted in errors when columns with,NA
broom,1,55,55,FALSE,Moved forward with planned deprecation of `gamlss` tidiers in favor,NA
broom,1,57,57,FALSE,Fixed bug in the `nnet::multinom` tidier in the case that the response variable has only two levels (`#993` by,NA
broom,1,59,59,FALSE,Add tidiers for `Rchoice` objects (`#961` by `@vincentarelbundock`,NA
broom,1,60,60,FALSE,Add tidiers for objects produced by `car::leveneTest` (`#968` by,NA
broom,1,61,61,FALSE,Add tidiers for objects produced by `cmprsk::crr` (`#971` and `#552`,NA
broom,1,62,62,FALSE,Add an `augment()` method for `gam` objects (`#975` and `#645` by,NA
broom,1,63,63,FALSE,Add tidiers for `vars` objects (`#979` and `#161` by,NA
broom,1,64,64,FALSE,`tidy.emmGrid` can now return `std.error` and `conf.*` columns at,NA
broom,1,65,65,FALSE,`tidy.garch` can now produce confidence intervals (`#964` by,NA
broom,1,66,66,FALSE,`tidy.coxph` can now report confidence intervals on models utilizing penalized/clustering terms (`#966` by `@vincentarelbundock` and,NA
broom,1,67,67,FALSE,`augment.lm` now works when some regression weights are equal to,NA
broom,1,68,68,FALSE,"`tidy.coxph` can now handle models utilizing penalized/clustering terms (`#966` and `#969` by `@vincentarelbundock`,",NA
broom,1,70,70,FALSE,tidy.multinom works with matrix response (`#977` and `#666` by,NA
broom,1,72,72,FALSE,Restores tidiers for `summary.lm` objects (`#953` by,NA
broom,1,73,73,FALSE,"Deprecate tidiers for the `lfe` package, which was archived from",NA
broom,1,77,77,FALSE,Added tidier methods for `mlogit` objects (`#887` by,NA
broom,1,80,80,FALSE,`glance.survfit()` now passes `...` to `summary.survfit()` to allow for adjustment of RMST and other measures (`#880` by,NA
broom,1,81,81,FALSE,Several unsupported model objects that subclass `glm` and `lm` now,NA
broom,1,83,83,FALSE,Fixed `newdata` warning message in `augment.*()` output when the `newdata` didn't contain the response variable---augment methods no longer expect the response variable in the supplied `newdata`,NA
broom,1,84,84,FALSE,Fixed a bug related to `tidy.geeglm()` not being sensitive to the,NA
broom,1,85,85,FALSE,Fixed `augment.fixest()` returning residuals in the `.fitted` column. The method also now takes a `type.residuals` argument and defaults to the same `type.predict` argument as the `fixest`,NA
broom,1,86,86,FALSE,"Fix `tidy.felm` confidence interval bug. Replaces ""robust"" argument with ""se.type"". (`#919` by `@grantmcdermott`; supersedes `#818` by",NA
broom,1,87,87,FALSE,Fix a bug in `tidy.drc()` where some term labels would result in the,NA
broom,1,88,88,FALSE,Fixed bug related to univariate zoo series in `tidy.zoo()` (`#916`,NA
broom,1,89,89,FALSE,Fixed a bug related to `tidy.prcomp()` assigning the wrong PC labels,NA
broom,1,90,90,FALSE,Fixed `tidy.polr()` bug where p-values could only be returned if,NA
broom,1,91,91,FALSE,"We have changed how we report degrees of freedom for `lm` objects (#212, #273). This is especially important for instructors in statistics courses. Previously the `df` column in `glance.lm()` reported the rank of the design matrix. Now it reports degrees of freedom of the numerator for the overall F-statistic. This is equal to the rank of the model matrix minus one (unless you omit an intercept column), so the new `df` should be the old `df` minus one.",NA
broom,1,92,92,FALSE,"We are moving away from supporting `summary.*()` objects. In particular, we have removed `tidy.summary.lm()` as part of a major overhaul of internals. Instead of calling `tidy()` on `summary`-like objects, please call `tidy()` directly on model objects moving forward.",NA
broom,1,93,93,FALSE,"We have removed all support for the `quick` argument in `tidy()` methods. This is to simplify internals and is for maintainability purposes. We anticipate this will not influence many users as few people seemed to use it. If this majorly cramps your style, let us know, as we are considering a new verb to return only model parameters. In the meantime, `stats::coef()` together with `tibble::enframe()` provides most of the functionality of `tidy(..., quick = TRUE)`.",NA
broom,1,94,94,FALSE,"All `conf.int` arguments now default to `FALSE`, and all `conf.level` arguments now default to `0.95`. This should primarily affect `tidy.survreg()`, which previously always returned confidence intervals, although there are some others.",NA
broom,1,95,95,FALSE,"Tidiers for `emmeans`-objects use the arguments `conf.int` and `conf.level` instead of relying on the argument names native to the `emmeans::summary()`-methods (i.e., `infer` and `level`). Similarly, `multcomp`-tidiers now include a call to `summary()` as previous behavior was akin to setting the now removed argument `quick = TRUE`. Both families of tidiers now use the `adj.p.value` column name when appropriate. Finally, `emmeans`-, `multcomp`-, and `TukeyHSD`-tidiers now consistently use the column names `contrast` and `null.value` instead of `comparison`, `level1` and `level2`, or `lhs` and `rhs` (see #692).",NA
broom,1,96,96,FALSE,"Tidier methods for data frames, rowwise data frames, vectors and",NA
broom,1,102,102,FALSE,`tidy.table()` and `tidy.ftable()` have been deprecated in favor of,NA
broom,1,103,103,FALSE,`tidy.summaryDefault()` and `glance.summaryDefault()` have been,NA
broom,1,109,109,FALSE,"`augment.factanal()` now returns a tibble with columns names `.fs1`, `.fs2`, ..., instead of `factor1`, `factor2`, ... (#650)",NA
broom,1,110,110,FALSE,"We have renamed the output of `augment.htest()`. In particular, we have renamed the `.residuals` column to `.resid` and the `.stdres` to `.std.resid` for consistency. These changes will only affect chi-squared tests.",NA
broom,1,111,111,FALSE,`tidy.ridgelm()` now always return a `GCV` column and never returns an `xm` column. (#533 by @jmuhlenkamp),NA
broom,1,112,112,FALSE,`tidy.dist()` no longer supports the `upper` argument.,NA
broom,1,113,113,FALSE,"If you pass a dataset to `augment()` via the `data` or `newdata` arguments, you are now guaranteed that the augmented dataset will have exactly the same number of rows as the original dataset. This differs from previous behavior primarily when there are missing values. Previously `augment()` would drop rows containing `NA`. This should no longer be the case.",NA
broom,1,114,114,FALSE,`augment.*()` methods no longer accept an `na.action` argument.,NA
broom,1,115,115,FALSE,"In previous versions, several `augment.*()` methods inherited the `augment.lm()` method, but required additions to the `augment.lm()` method itself. We have shifted away from this approach in favor of re-implementing many `augment.*()` methods as standalone methods making use of internal helper functions. As a result, `augment.lm()` and some related methods have deprecated (previously unused) arguments.",NA
broom,1,116,116,FALSE,`augment()` tries to give an informative error when `data` isn't the original training data.,NA
broom,1,117,117,FALSE,The `.resid` column in the output of `augment().*` methods is now consistently defined as `y - y_hat`,NA
broom,1,126,126,FALSE,"`rma` objects from the `metafor` package (#674 by @malcolmbarrett,",NA
broom,1,127,127,FALSE,"`mfx`, `logitmfx`, `negbinmfx`, `poissonmfx`, `probitmfx`, and",NA
broom,1,128,128,FALSE,"`lmrob` and `glmrob` objects from the `robustbase` package (#205,",NA
broom,1,129,129,FALSE,`sarlm` objects from the `spatialreg` package (#847 by,NA
broom,1,133,133,FALSE,"We have restored a simplified version of `glance.aov()`, which used to inherit from the `glance.lm()` method and now contains only the following columns: `logLik`, `AIC`, `BIC, deviance`, `df.residual`, and `nobs` (see #212). Note that `tidy.aov()` gives more complete",NA
broom,1,134,134,FALSE,`tidy.felm()` now has a `robust = TRUE/FALSE` option that supports robust and cluster standard errors. (#781 by @kuriwaki),NA
broom,1,135,135,FALSE,Make `.fitted` values respect `type.predict` argument of `augment.clm()`. (#617),NA
broom,1,136,136,FALSE,Return factor rather than numeric class predictions in `.fitted` of `augment.polr()`. (#619) Add an option to return `p.values` in `tidy.polr()`. (#833 by @LukasWallrich),NA
broom,1,137,137,FALSE,`tidy.kmeans()` now uses the names of the input variables in the output by default. Set `col.names = NULL` to recover the old behavior.,NA
broom,1,138,138,FALSE,"Previously, F-statistics for weak instruments were returned through `glance.ivreg()`. F-statistics are now returned through `tidy.ivreg(instruments = TRUE)`. Default is `tidy.ivreg(instruments = FALSE)`. `glance.ivreg()` still returns Wu-Hausman and Sargan test statistics.",NA
broom,1,139,139,FALSE,`glance.biglm()` now returns a `df.residual` column.,NA
broom,1,140,140,FALSE,"`tidy.prcomp()` argument `matrix` gained new options `""scores""`, `""loadings""`, and `""eigenvalues""`. (#557 by @GegznaV)",NA
broom,1,141,141,FALSE,`tidy_optim()` now provides the standard error if the Hessian is present. (#529 by @billdenney),NA
broom,1,142,142,FALSE,`tidy.htest()` column names are now run through `make.names()` to ensure syntactic correctness. (#549 by @karissawhiting),NA
broom,1,143,143,FALSE,`tidy.lmodel2()` now returns a `p.value` column. (#570),NA
broom,1,144,144,FALSE,`tidy.lsmobj()` gained a `conf.int` argument for consistency with other tidiers.,NA
broom,1,145,145,FALSE,`tidy.polr()` now returns p-values if `p.values` is set to TRUE and the model does not contain factors with more than two levels.,NA
broom,1,146,146,FALSE,`tidy.zoo()` now doesn't change column names that have spaces or other special characters (previously they were converted to `data.frame` friendly column names by `make.names`.),NA
broom,1,147,147,FALSE,`glance.lavaan()` now uses lavaan extractor functions instead of subsetting the fit object manually. (#835),NA
broom,1,148,148,FALSE,`glance.lm()` no longer errors when only an intercept is provided as an explanatory variable. (#865),NA
broom,1,149,149,FALSE,Bug fix for `tidy.survreg()` when `robust` is set to `TRUE` in model,NA
broom,1,150,150,FALSE,Bug fixes in `glance.lavaan()`: address confidence interval error,NA
broom,1,151,151,FALSE,Bug fix in muhaz tidiers to ensure output is always a `tibble`,NA
broom,1,152,152,FALSE,Several `glance.*()` methods have been refactored in order to return,NA
broom,1,153,153,FALSE,Bug fix to return confidence intervals correct in `tidy.drc()`,NA
broom,1,154,154,FALSE,Added default methods for objects that subclass `glm` and `lm` in,NA
broom,1,156,156,FALSE,Bug fix to allow `augment.Mclust()` to work on univariate data,NA
broom,1,158,158,FALSE,Bug fix to better allow `tidy.boot()` to support confidence,NA
broom,1,160,160,FALSE,"Many `glance()` methods now return a `nobs` column, which contains the number of data points used to fit the model! (#597 by @vincentarelbundock)",NA
broom,1,161,161,FALSE,"`tidy()` no longer checks for a log or logit link when `exponentiate = TRUE`, and we have refactored to remove extraneous `exponentiate` arguments. If you set `exponentiate = TRUE`, we assume you know what you are doing and that you want exponentiated coefficients (and confidence intervals if `conf.int = TRUE`) regardless of link function.",NA
broom,1,162,162,FALSE,We now use `rlang::arg_match()` when possible instead of `arg.match()` to give more informative errors on argument mismatches.,NA
broom,1,163,163,FALSE,The package's site has moved from https://broom.tidyverse.org/ to https://broom.tidymodels.org/.,NA
broom,1,164,164,FALSE,Revised several vignettes and moved them to the tidymodels.org website. The existing vignettes will now simply link to the revised versions.,NA
broom,1,165,165,FALSE,Many improvements to consistency and clarity of documentation.,NA
broom,1,166,166,FALSE,Various warnings resulting from changes to the tidyr API in v1.0.0 have been fixed. (#870),NA
broom,1,167,167,FALSE,Removed dependencies on reshape2 and superseded functions in dplyr.,NA
broom,1,168,168,FALSE,All documentation now links to help files rather than topics.,NA
broom,1,169,169,FALSE,Moved core tests to the `modeltests` package.,NA
broom,1,170,170,FALSE,"Generally, after this release, the broom dev team will first ask that attempts to add tidier methods supporting a model object are first directed to the model-owning package. An article describing best practices in doing so can be found on the {tidymodels} website at https://www.tidymodels.org/learn/develop/broom/, and we will continue adding additional resources to that article as we develop them. In the case that the maintainer is uninterested in taking on the tidier methods, please note this in your issue or PR.",NA
broom,1,171,171,FALSE,Added a new vignette discussing how to implement new tidier methods in non-broom packages.,NA
broom,1,172,172,FALSE,Fix failing CRAN checks to due `tibble 3.0.0` release. Removed,NA
broom,1,173,173,FALSE,Remove tidiers for robust package and drop robust dependency,NA
broom,1,174,174,FALSE,Fixes failing CRAN checks as the joineRML package has been removed,NA
broom,1,176,176,FALSE,Fixes failing CRAN checks,NA
broom,1,177,177,FALSE,Changes to accommodate ergm 3.10 release. `tidy.ergm()` no longer has a `quick` argument. The old default of `quick = FALSE` is now the only option.,NA
broom,1,178,178,FALSE,"`tidy()`, `glance()` and `augment()` are now re-exported from the",NA
broom,1,179,180,FALSE,"subsetting tibbles with `[`, which returns a tibble rather than a vector.",NA
broom,1,180,181,FALSE,"setting rownames on tibbles, which is deprecated.",NA
broom,1,181,182,FALSE,"using matrix and vector tidiers, now deprecated.",NA
broom,1,182,183,FALSE,handling the additional tibble classes `tbl_df` and `tbl` beyond the `data.frame` class,NA
broom,1,183,184,FALSE,linking to defunct documentation files -- broom recently moved all tidiers to a `roxygen2` template based documentation system.,NA
broom,1,184,185,FALSE,"`vignette(""available-methods"", package = ""broom"")` contains a table detailing which tidying methods are available",NA
broom,1,185,186,FALSE,"`vignette(""adding-tidiers"", package = ""broom"")` is an *in-progress* guide for contributors on how to add new tidiers to broom",NA
broom,1,186,187,FALSE,"`vignette(""glossary"", package = ""broom"")` contains tables describing acceptable argument names and column names for the *in-progress* new specification.",NA
broom,1,187,188,FALSE,"`vignette(""bootstrapping"", package = ""broom"")` now relies on the `rsample` package and a `tidyr::nest`-`purrr::map`-`tidyr::unnest` workflow. This is now the recommended workflow for working with multiple models, as opposed to the old `dplyr::rowwise`-`dplyr::do`",NA
broom,1,188,189,FALSE,Matrix and vector tidiers have been deprecated in favor of `tibble::as_tibble` and `tibble::enframe`,NA
broom,1,189,190,FALSE,Dataframe tidiers and rowwise dataframe tidiers have been deprecated,NA
broom,1,190,191,FALSE,`bootstrap()` has been deprecated in favor of the [`rsample`](https://rsample.tidymodels.org/),NA
broom,1,191,192,FALSE,`inflate` has been removed from `broom`,NA
broom,1,192,193,FALSE,The `alpha` argument has been removed from `quantreg` tidy methods,NA
broom,1,193,194,FALSE,"The `separate.levels` argument has been removed from `tidy.TukeyHSD`. To obtain the effect of `separate.levels = TRUE`, users may `tidyr::separate` after tidying. This is consistent with the `multcomp` tidier behavior.",NA
broom,1,194,195,FALSE,"The `fe.error` argument was removed from `tidy.felm`. When fixed effects are tidier, their standard errors are now always included.",NA
broom,1,195,196,FALSE,The `diag` argument in `tidy.dist` has been renamed `diagonal`,NA
broom,1,196,197,FALSE,Advice to help beginners make PRs (#397 by @karldw),NA
broom,1,197,198,FALSE,"`glance` support for `arima` objects fit with `method = ""CSS""` (#396 by @josue-rodriguez)",NA
broom,1,198,199,FALSE,A bug fix to re-enable tidying `glmnet` objects with `family = multinomial` (#395 by @erleholgersen),NA
broom,1,199,200,FALSE,A bug fix to allow tidying `quantreg` intercept only models (#378 by @erleholgersen),NA
broom,1,200,201,FALSE,A bug fix for `aovlist` objects (#377 by @mvevans89),NA
broom,1,201,202,FALSE,Support for `glmnetUtils` objects (#352 by @Hong-Revo),NA
broom,1,202,203,FALSE,A bug fix to allow `tidy_emmeans` to handle column names with dashes (#351 by @bmannakee),NA
broom,1,203,204,FALSE,`augment.felm` no longer returns `.fe_` and `.comp` columns,NA
broom,1,204,205,FALSE,Support saved formulas in `augment.felm` (#347 by @ShreyasSingh),NA
broom,1,205,206,FALSE,`confint_tidy` now drops rows of all `NA` (#345 by @atyre2),NA
broom,1,206,207,FALSE,A new tidier for `caret::confusionMatrix` objects (#344 by @mkuehn10),NA
broom,1,207,208,FALSE,Tidiers for `Kendall::Kendall` objects (#343 by @cimentadaj),NA
broom,1,208,209,FALSE,A new tidying method for `car::durbinWatsonTest` objects (#341 by @mkuehn10),NA
broom,1,209,210,FALSE,`glance` throws an informative error for `quantreg:rq` models fit with multiple `tau` values (#338 by @bfgray3),NA
broom,1,210,211,FALSE,`tidy.glmnet` gains the ability to retain zero-valued coefficients with a `return_zeros` argument that defaults to `FALSE` (#337 by @bfgray3),NA
broom,1,211,212,FALSE,`tidy.manova` now retains a `Residuals` row (#334 by @jarvisc1),NA
broom,1,212,213,FALSE,"Tidiers for `ordinal::clm`, `ordinal::clmm`, `survey::svyolr` and `MASS::polr` ordinal model objects (#332 by @larmarange)",NA
broom,1,213,214,FALSE,Support for `anova` objects from `car::Anova` (#325 by @mariusbarth),NA
broom,1,214,215,FALSE,Tidiers for `tseries::garch` models (#323 by @wilsonfreitas),NA
broom,1,215,216,FALSE,Removed dependency on `psych` package (#313 by @nutterb),NA
broom,1,216,217,FALSE,Improved error messages (#303 by @michaelweylandt),NA
broom,1,217,218,FALSE,Compatibility with new `rstanarm` and `loo` packages (#298 by @jgabry),NA
broom,1,218,219,FALSE,Support for tidying lists return by `irlba::irlba`,NA
broom,1,219,220,FALSE,A truly huge increase in unit tests (#267 by @dchiu911),NA
broom,1,220,221,FALSE,Bug fix for `tidy.prcomp` when missing labels (#265 by @corybrunson),NA
broom,1,221,222,FALSE,Added a `pkgdown` site at https://broom.tidyverse.org/ (#260 by @jayhesselberth),NA
broom,1,222,223,FALSE,Added tidiers for `AER::ivreg` models (#247 by @hughjonesd),NA
broom,1,223,224,FALSE,Added tidiers for the `lavaan` package (#233 by @puterleat),NA
broom,1,224,225,FALSE,Added `conf.int` argument to `tidy.coxph` (#220 by @larmarange),NA
broom,1,225,226,FALSE,Added `augment` method for chi-squared tests (#138 by @larmarange),NA
broom,1,226,227,FALSE,changed default se.type for `tidy.rq` to match that of `quantreg::summary.rq()` (#404 by @ethchr),NA
broom,1,227,228,FALSE,Added argument `quick` for `tidy.plm` and `tidy.felm` (#502 and #509 by @MatthieuStigler),NA
broom,1,228,229,FALSE,Many small improvements throughout,NA
broom,1,229,230,FALSE,"Fixed gam tidiers to work with ""Gam"" objects, due to an update in gam 1.15. This fixes failing CRAN tests",NA
broom,1,230,231,FALSE,Improved test coverage (thanks to #267 from Derek Chiu),NA
broom,1,231,232,FALSE,Changed the deprecated `dplyr::failwith` to `purrr::possibly`,NA
broom,1,232,233,FALSE,`augment` and `glance` on NULLs now return an empty data frame,NA
broom,1,233,234,FALSE,Deprecated the `inflate()` function in favor of `tidyr::crossing`,NA
broom,1,234,235,FALSE,Fixed confidence intervals in the gmm tidier (thanks to #242 from David Hugh-Jones),NA
broom,1,235,236,FALSE,Fixed a bug in bootstrap tidiers (thanks to #167 from Jeremy Biesanz),NA
broom,1,236,237,FALSE,Fixed tidy.lm with `quick = TRUE` to return terms as character rather than factor (thanks to #191 from Matteo Sostero),NA
broom,1,237,238,FALSE,Added tidiers for `ivreg` objects from the AER package (thanks to #245 from David Hugh-Jones),NA
broom,1,238,239,FALSE,Added tidiers for `survdiff` objects from the survival package (thanks to #147 from Michał Bojanowski),NA
broom,1,239,240,FALSE,Added tidiers for `emmeans` from the emmeans package (thanks to #252 from Matthew Kay),NA
broom,1,240,241,FALSE,"Added tidiers for `speedlm` and `speedglm` from the speedglm package (#685, thanks to #248 from David Hugh-Jones)",NA
broom,1,241,242,FALSE,Added tidiers for `muhaz` objects from the muhaz package (thanks to #251 from Andreas Bender),NA
broom,1,242,243,FALSE,Added tidiers for `decompose` and `stl` objects from stats (thanks to #165 from Aaron Jacobs),NA
broom,1,243,244,FALSE,Added tidiers for `lsmobj` and `ref.grid` objects from the lsmeans package,NA
broom,1,244,245,FALSE,Added tidiers for `betareg` objects from the betareg package,NA
broom,1,245,246,FALSE,Added tidiers for `lmRob` and `glmRob` objects from the robust package,NA
broom,1,246,247,FALSE,Added tidiers for `brms` objects from the brms package (thanks to #149 from Paul Buerkner),NA
broom,1,247,248,FALSE,Fixed tidiers for orcutt 2.0,NA
broom,1,248,249,FALSE,Changed `tidy.glmnet` to filter out rows where estimate == 0.,NA
broom,1,249,250,FALSE,Updates to `rstanarm` tidiers (thanks to #177 from Jonah Gabry),NA
broom,1,250,251,FALSE,Fixed issue with survival package 2.40-1 (thanks to #180 from Marcus Walz),NA
broom,1,251,252,FALSE,"Added AppVeyor, codecov.io, and code of conduct",NA
broom,1,252,253,FALSE,"Changed name of ""NA's"" column in summaryDefault output to ""na""",NA
broom,1,253,254,FALSE,"Fixed `tidy.TukeyHSD` to include `term` column. Also added `separate.levels` argument, with option to separate `comparison` into `level1` and `level2`",NA
broom,1,254,255,FALSE,"Fixed `tidy.manova` to use correct column name for test (previously, always `pillai`)",NA
broom,1,255,256,FALSE,Added `kde_tidiers` to tidy kernel density estimates,NA
broom,1,256,257,FALSE,Added `orcutt_tidiers` to tidy the results of `cochrane.orcutt` orcutt package,NA
broom,1,257,258,FALSE,Added `tidy.dist` to tidy the distance matrix output of `dist` from the stats package,NA
broom,1,258,259,FALSE,Added `tidy` and `glance` for `lmodel2` objects from the lmodel2 package,NA
broom,1,259,260,FALSE,Added tidiers for `poLCA` objects from the poLCA package,NA
broom,1,260,261,FALSE,Added tidiers for sparse matrices from the Matrix package,NA
broom,1,261,262,FALSE,Added tidiers for `prcomp` objects,NA
broom,1,262,263,FALSE,Added tidiers for `Mclust` objects from the Mclust package,NA
broom,1,263,264,FALSE,Added tidiers for `acf` objects,NA
broom,1,264,265,FALSE,"Fixed to be compatible with dplyr 0.5, which is being submitted to CRAN",NA
broom,1,265,266,FALSE,"Added tidiers for geeglm, nlrq, roc, boot, bgterm, kappa, binWidth, binDesign, rcorr, stanfit, rjags, gamlss, and mle2 objects.",NA
broom,1,266,267,FALSE,"Added `tidy` methods for lists, including u, d, v lists from `svd`, and x, y, z lists used by `image` and `persp`",NA
broom,1,267,268,FALSE,"Added `quick` argument to `tidy.lm`, `tidy.nls`, and `tidy.biglm`, to create a smaller and faster version of the output.",NA
broom,1,268,269,FALSE,"Changed `rowwise_df_tidiers` to allow the original data to be saved as a list column, then provided as a column name to `augment`. This required removing `data` from the `augment` S3 signature. Also added `tests-rowwise.R`",NA
broom,1,269,270,FALSE,Fixed various issues in ANOVA output,NA
broom,1,270,271,FALSE,Fixed various issues in lme4 output,NA
broom,1,271,272,FALSE,Fixed issues in tests caused by dev version of ggplot2,NA
broom,1,272,273,FALSE,"Added tidiers for ""plm"" (panel linear model) objects from the plm package.",NA
broom,1,273,274,FALSE,Added `tidy.coeftest` for coeftest objects from the lmtest package.,NA
broom,1,274,275,FALSE,"Set up `tidy.lm` to work with ""mlm"" (multiple linear model) objects (those with multiple response columns).",NA
broom,1,275,276,FALSE,"Added `tidy` and `glance` for ""biglm"" and ""bigglm"" objects from the biglm package.",NA
broom,1,276,277,FALSE,Fixed bug in `tidy.coxph` when one-row matrices are returned,NA
broom,1,277,278,FALSE,Added `tidy.power.htest`,NA
broom,1,278,279,FALSE,Added `tidy` and `glance` for `summaryDefault` objects,NA
broom,1,279,280,FALSE,"Added tidiers for ""lme"" (linear mixed effects models) from the nlme package",NA
broom,1,280,281,FALSE,Added `tidy` and `glance` for `multinom` objects from the nnet package.,NA
broom,1,281,282,FALSE,"Fixed bug in `tidy.pairwise.htest`, which now can handle cases where the grouping variable is numeric.",NA
broom,1,282,283,FALSE,Added `tidy.aovlist` method. This added `stringr` package to IMPORTS to trim whitespace from the beginning and end of the `term` and `stratum` columns. This also required adjusting `tidy.aov` so that it could handle strata that are missing p-values.,NA
broom,1,283,284,FALSE,Set up `glance.lm` to work with `aov` objects along with `lm` objects.,NA
broom,1,284,285,FALSE,"Added `tidy` and `glance` for matrix objects, with `tidy.matrix` converting a matrix to a data frame with rownames included, and `glance.matrix` returning the same result as `glance.data.frame`.",NA
broom,1,285,286,FALSE,Changed DESCRIPTION Authors@R to new format,NA
broom,1,286,287,FALSE,Fixed small bug in `felm` where the `.fitted` and `.resid` columns were matrices rather than vectors.,NA
broom,1,287,288,FALSE,"Added tidiers for `rlm` (robust linear model) and `gam` (generalized additive model) objects, including adjustments to ""lm"" tidiers in order to handle them. See `?rlm_tidiers` and `?gam_tidiers` for more.",NA
broom,1,288,289,FALSE,Removed rownames from `tidy.cv.glmnet` output,NA
broom,1,289,290,FALSE,"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:",NA
broom,2,289,291,FALSE,* `lm`,"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:"
broom,2,289,292,FALSE,* `glm`,"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:"
broom,2,289,293,FALSE,* `nls`,"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:"
broom,2,289,294,FALSE,* `merMod` (`lme4`),"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:"
broom,2,289,295,FALSE,* `survreg` (`survival`),"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:"
broom,2,289,296,FALSE,* `coxph` (`survival`),"The behavior of `augment`, particularly with regard to missing data and the `na.exclude` argument, has through the use of the `augment_columns` function been made consistent across the following models:"
broom,1,296,297,FALSE,"`tidy`, `augment` and `glance` methods were added for `rowwise_df` objects, and are set up to apply across their rows. This allows for",NA
broom,1,297,298,FALSE,"Added `tidy` and `glance` methods for `Arima` objects, and `tidy` for `pairwise.htest` objects.",NA
broom,1,298,299,FALSE,"Fixes for CRAN: change package description to title case, removed NOTES, mostly by adding `globals.R` to declare global variables.",NA
broom,1,299,300,FALSE,This is the original version published on CRAN.,NA
broom,1,300,301,FALSE,Tidiers have been added for S3 objects from the following packages:,NA
broom,2,300,302,FALSE,* `lme4`,Tidiers have been added for S3 objects from the following packages:
broom,2,300,303,FALSE,* `glmnet`,Tidiers have been added for S3 objects from the following packages:
broom,2,300,304,FALSE,* `survival`,Tidiers have been added for S3 objects from the following packages:
broom,2,300,305,FALSE,* `zoo`,Tidiers have been added for S3 objects from the following packages:
broom,2,300,306,FALSE,* `felm`,Tidiers have been added for S3 objects from the following packages:
broom,2,300,307,FALSE,* `MASS` (`ridgelm` objects),Tidiers have been added for S3 objects from the following packages:
broom,1,307,308,FALSE,"`tidy` and `glance` methods for data.frames have also been added, and `augment.data.frame` produces an error (rather than returning the same data.frame).",NA
broom,1,308,309,FALSE,`stderror` has been changed to `std.error` (affects many functions) to be consistent with broom's naming conventions for columns.,NA
broom,1,309,310,FALSE,"A function `bootstrap` has been added based on [this example](https://github.com/tidyverse/dplyr/issues/269), to perform the common use case of bootstrapping models.",NA
broom,1,310,311,FALSE,"Added ""augment"" S3 generic and various implementations. ""augment"" does something different from tidy: it adds columns to the original dataset, including predictions, residuals, or cluster assignments. This was originally described as ""fortify"" in ggplot2.",NA
broom,1,311,312,FALSE,"Added ""glance"" S3 generic and various implementations. ""glance"" produces a *one-row* data frame summary, which is necessary for tidy outputs with values like R\^2 or F-statistics.",NA
broom,1,312,313,FALSE,Re-wrote intro broom vignette/README to introduce all three methods.,NA
broom,1,313,314,FALSE,Wrote a new kmeans vignette.,NA
broom,1,314,315,FALSE,"Added tidying methods for multcomp, sp, and map objects (from fortify-multcomp, fortify-sp, and fortify-map from ggplot2).",NA
broom,1,315,316,FALSE,"Because this integrates substantial amounts of ggplot2 code (with permission), added Hadley Wickham as an author in DESCRIPTION.",NA
cli,1,1,1,FALSE,cli has better error messages now.,NA
cli,1,2,2,FALSE,"New `format_inline()` argument: `collapse`, to collapse multi-line output, potentially because of `\f` characters.",NA
cli,1,3,3,FALSE,New experimental styles to create ANSI hyperlinks in RStudio and terminals that support them. See `?cli::links` for details (#513).,NA
cli,1,4,4,FALSE,Expressions that start and end with a `{}` substitution are now styled correctly. E.g. `{.code {var1} + {var2}}` (#517).,NA
cli,1,5,5,FALSE,New `{.obj_type_friendly}` inline style to format the type of an R object in a user friendly way (#463).,NA
cli,1,6,6,FALSE,"Improved vector collapsing behavior. cli now shows both the beginning and end of the collapsed vector, by default (#419).",NA
cli,1,7,7,FALSE,Nested `cli()` calls work now (#497).,NA
cli,1,8,8,FALSE,Return values now work as they should within `cli()` calls (#496).,NA
cli,1,9,9,FALSE,"Style attributes with underscores have new names with dashes instead: `vec_sep`, `vec_last`, `vec_trunc`, `string-quote`. The old names still work, but the new ones take precedence (#483).",NA
cli,1,10,10,FALSE,cli now does not crash at the end of the R session on Arm Windows (#494; @kevinushey),NA
cli,1,11,11,FALSE,"Vectors are truncated at 20 elements now by default, instead of 100 (#430).",NA
cli,1,12,12,FALSE,"20 new spinners from the awesome [cli-spinners](https://github.com/sindresorhus/cli-spinners) package, and from @HenrikBengtsson in #469. Run this to demo them, some need UTF-8 and emoji support:",NA
cli,1,12,13,TRUE,"```
new <- c(""dots13"", ""dots8Bit"", ""sand"", ""material"", ""weather"", ""christmas"",
  ""grenade"", ""point"", ""layer"", ""betaWave"", ""fingerDance"", ""fistBump"",
  ""soccerHeader"", ""mindblown"", ""speaker"", ""orangePulse"", ""bluePulse"",
  ""orangeBluePulse"", ""timeTravel"", ""aesthetic"", ""growVeriticalDotsLR"",
  ""growVeriticalDotsRL"", ""growVeriticalDotsLL"", ""growVeriticalDotsRR"")
demo_spinners(new)
```",NA
cli,1,13,14,FALSE,cli exit handlers are now compatible again with the withr package (#437).,NA
cli,1,14,15,FALSE,cli functions now keep trailing `\f` characters as newlines. They also keep multiple consecutive `\f` as multiple newlinees (#491).,NA
cli,1,15,16,FALSE,"`{}` substitutions within inline styles are now formatted correctly. E.g. `{.code download({url})}` will not add backticks to `url`, and `{.val pre-{x}-post}` will format the whole value instead of `x`. (#422, #474).",NA
cli,1,16,17,FALSE,"cli now replaces newline characters within `{.class ... }` inline styles with spaces. If the `cli.warn_inline_newlines` option is set to TRUE, then it also throws a warning. (#417).",NA
cli,1,17,18,FALSE,"`code_highlight` now falls back to the default theme (instead of no theme) for unknown RStudio themes (#482, @rossellhayes).",NA
cli,1,18,19,FALSE,`cli_abort()` now supplies `.frame` to `abort()`. This fixes an issue with the `.internal = TRUE` argument (r-lib/rlang#1386).,NA
cli,1,19,20,FALSE,"cli now does a better job at detecting the RStudio build pane, job pane and render pane, and their capabilities w.r.t. ANSI colors and hyperlinks. Note that this requires a daily build of RStudio (#465).",NA
cli,1,20,21,FALSE,"New functions for ANSI strings: `ansi_grep()`, `ansi_grepl()`, `ansi_nzchar()`. They work like the corresponding base R functions, but handle ANSI markup.",NA
cli,1,21,22,FALSE,"`style_hyperlink()` (really) no longer breaks if the env variable `VTE_VERSION` is of the form `\d{4}`, i.e., 4 consecutive numbers (#441, @michaelchirico)",NA
cli,1,22,23,FALSE,`cli_dl()` and its corresponding `cli_li()` can now style the labels.,NA
cli,1,23,24,FALSE,"The behavior cli's inline styling expressions is now more predictable. cli does not try to evaluate a styled string as an R expression any more. E.g. the meaning of `""{.emph +1}""` is now always the ""+1"", with style `.emph`, even if an `.emph` variable is available and the `.emph + 1` expression can be evaluated.",NA
cli,1,24,25,FALSE,"Functions that apply bright background colors (e.g. `bg_br_yellow()`) now close themselves. They no longer format text after the end of the function (#484, @rossellhayes).",NA
cli,1,25,26,FALSE,"`style_hyperlink()` no longer breaks if the env variable `VTE_VERSION` is of the form `\d{4}`, i.e., 4 consecutive numbers (#441, @michaelchirico)",NA
cli,1,26,27,FALSE,`ansi_*()` functions support ANSI hyperlinks again (#444).,NA
cli,1,27,28,FALSE,Turning off ANSI colors via the `cli.num_colors` option or the `R_CLI_NUM_COLORS` or the `NO_COLOR` environment variable now also turns off ANSI hyperlinks (#447).,NA
cli,1,28,29,FALSE,`symbol` now only has two variants: UTF-8 and ASCII. There are no special variants for RStudio and Windows RGui any more (#424).,NA
cli,1,29,30,FALSE,"The `cli_theme_dark` option is now known as `cli.theme_dark`, to be",NA
cli,1,30,31,FALSE,"The preferred names of the S3 classes `ansi_string`, `ansi_style`, `boxx`, `rule` and `tree` now have `cli_` prefix: `cli_ansi_string`, etc. This will help avoiding name conflicts with other packages eventually, but for now the old names are kept as well, for compatibility.",NA
cli,1,31,32,FALSE,`cli_abort()` has been updated to work nicely with rlang 1.0. The default `call` and backtrace soft-truncation are set to `.envir` (which itself is set to the immediate caller of `cli_abort()` by default). Line formatting now happens lazily at display time via `rlang::cnd_message()` (which is called by the `conditionMessage()` method for rlang errors).,NA
cli,1,32,33,FALSE,"New `hash_sha256()` function to calculate SHA-256 hashes. New `hash_raw_*()`, `hash_obj_*()` and `hash_file_*()` functions to calculate various hashes of raw vectors, R objects and files.",NA
cli,1,33,34,FALSE,"You can use the new `cli.default_num_colors` option to set the default number of ANSI colors, only if ANSI support is otherwise detected. See the details in the manual of `num_ansi_colors()`.",NA
cli,1,34,35,FALSE,You can set the new `ESS_BACKGROUND_MODE` environment variable to `dark` to indicate dark mode.,NA
cli,1,35,36,FALSE,cli now handles quotes and comment characters better in the semantion `cli_*()` functions that perform glue string interpolation (#370).,NA
cli,1,37,38,FALSE,The C progress bar API now uses `double` instead of `int` as the,NA
cli,1,38,39,FALSE,Several improvements and changes in the `ansi_*()` functions:,NA
cli,2,38,40,FALSE,* most `ansi_*()` functions are now implemented in C and they are much faster (#316).,Several improvements and changes in the `ansi_*()` functions:
cli,2,38,41,FALSE,* they handle `NA` values better.,Several improvements and changes in the `ansi_*()` functions:
cli,2,38,42,FALSE,"* many functions now use UTF-8 graphemes by default instead of code points. E.g. `ansi_nchar()` counts graphemes, etc.",Several improvements and changes in the `ansi_*()` functions:
cli,2,38,43,FALSE,* they convert their input to UTF-8 and always return UTF-8 encoded strings.,Several improvements and changes in the `ansi_*()` functions:
cli,2,38,44,FALSE,* new function `ansi_simplify()` to remove superfluous ANSI tags.,Several improvements and changes in the `ansi_*()` functions:
cli,2,38,45,FALSE,* new function `ansi_html()` to convert ANSI-highlighted strings to HTML.,Several improvements and changes in the `ansi_*()` functions:
cli,2,38,46,FALSE,"* `ansi_has_any()` and `ansi_strip()` now have `sgr` and `csi` arguments to look for SGR tags, CSI tags, or both.",Several improvements and changes in the `ansi_*()` functions:
cli,1,46,47,FALSE,"New functions that handle UTF-8 encoded strings correctly: `utf8_graphemes()`, `utf8_nchar()`, `utf8_substr()`.",NA
cli,1,47,48,FALSE,"Support for palettes, including a colorblind friendly palette. See `?ansi_palettes` for details.",NA
cli,1,48,49,FALSE,"True color support: `num_ansi_colors()` now detects terminals with 24 bit color support, and `make_ansi_style()` uses the exact RGB colors on these terminals (#208).",NA
cli,1,49,50,FALSE,The new `col_br_*()` and `bg_br_()` functions create bright versions of eight base ANSI colors (#327).,NA
cli,1,50,51,FALSE,"New function `code_highlight()` to syntax highlight R code. It supports several themes out of the box, see `code_theme_list()` (#348).",NA
cli,1,51,52,FALSE,"New functions for hashing: `hash_animal()`, `hash_emoji()` and `hash_md5()`.",NA
cli,1,52,53,FALSE,New `diff_chr()` and `diff_str()` functions to calculate the difference of character vectors and letters of strings.,NA
cli,1,53,54,FALSE,"Progress bars with `clear = FALSE` now print the last, completed, state properly.",NA
cli,1,54,55,FALSE,The progress bar for Shiny apps now handles output from `cli_progress_output()`.,NA
cli,1,55,56,FALSE,Progress variables in C `format_done` strings work correctly now (#337).,NA
cli,1,56,57,FALSE,"`cli_dl()` now works with an empty description, and gives a better error for invalid input (#347).",NA
cli,1,57,58,FALSE,`rule()` is now works better if the labels have ANSI markup.,NA
cli,1,58,59,FALSE,`cli_spark` objects now have `format()` and `print()` methods.,NA
cli,1,59,60,FALSE,`cli_process_done()` now does not error without a process (#351).,NA
cli,1,60,61,FALSE,ANSI markup is now supported in RStudio jobs (#353).,NA
cli,1,61,62,FALSE,The lack of ANSI support is now again correctly detected if there is an active `sink()` (#366).,NA
cli,1,62,63,FALSE,`ansi_strtrim()` now correctly keeps `NA` values (#309).,NA
cli,1,63,64,FALSE,"`format_inline()` now uses the correct environment (@rundel, #314).",NA
cli,1,64,65,FALSE,"New functions for progress bars, please see the new articles at https://cli.r-lib.org/articles/ for details.",NA
cli,1,65,66,FALSE,"New `cli_abort()`, `cli_warn()` and `cli_inform()` functions, to throw errors with cli pluralization and styling.",NA
cli,1,66,67,FALSE,New `format_inline()` function to format a cli string without emitting it (#278).,NA
cli,1,67,68,FALSE,New `style_no_*()` functions to locally undo styling. New `col_none()` and `bg_none()` functions to locally undo text color and background color.,NA
cli,1,68,69,FALSE,"It is now possible to undo text and background color in a theme, by setting them to `NULL` or `""none""`.",NA
cli,1,69,70,FALSE,"`cli_memo()` was renamed to `cli_bullets()`, as it is by default formatted as a bullet list (#250).",NA
cli,1,70,71,FALSE,"New `ansi_toupper()`, `ansi_tolower` and `ansi_chartr()` functions, the ANSI styling aware variants of `toupper()`, `tolower()` and `chartr()` (#248).",NA
cli,1,71,72,FALSE,New `test_that_cli()` helper function to write testthat tests for cli output.,NA
cli,1,72,73,FALSE,`tree()` now does not produce warnings for tibbles (#238).,NA
cli,1,73,74,FALSE,"New inline style: `.cls` to format class names, e.g. `""{.var fit} must be an {.cls lm} object""`.",NA
cli,1,74,75,FALSE,New `cli_memo()` function to create a list of items or tasks.,NA
cli,1,75,76,FALSE,New `cli::cli()` function to create a single cli message from multiple cli calls (#170).,NA
cli,1,76,77,FALSE,"cli now highlights weird names, e.g. path names with leading or trailing space (#227).",NA
cli,1,77,78,FALSE,"Styling is fixed at several places. In particular, nested lists should be now formatted better (#221).",NA
cli,1,78,79,FALSE,New `spark_bar()` and `spark_line()` functions to draw small bar or line charts.,NA
cli,1,79,80,FALSE,"ANSI color support detection works correctly now in older RStudio, and also on older R versions.",NA
cli,1,80,81,FALSE,"`cli_h1()`, `cli_h2()` and `cli_h3()` now work with multiple glue substitutions (#218).",NA
cli,1,81,82,FALSE,`boxx()` now correctly calculates the width of the box for non-ASCII characters.,NA
cli,1,82,83,FALSE,"New `ansi_trimws()` and `ansi_strwrap()` functions, they are similar to `trimws()` and `strwrap()` but work on ANSI strings.",NA
cli,1,83,84,FALSE,New `ansi_columns()` function to format ANSI strings in multiple columns.,NA
cli,1,84,85,FALSE,"`ansi_substr()`, `ansi_substring()`, `ansi_strsplit()`, `ansi_align()` now always return `cli_ansi_string` objects.",NA
cli,1,85,86,FALSE,"`ansi_nchar()`, `ansi_align()`, `ansi_strtrim()` and the new `ansi_strwrap()` as well handle wide Unicode correctly, according to their display width.",NA
cli,1,86,87,FALSE,`boxx()` can now add headers and footers to boxes.,NA
cli,1,87,88,FALSE,"New `style_hyperlink()` function to add hyperlinks, on terminals that support them.",NA
cli,1,88,89,FALSE,"`cli_format_method()` now works properly in knitr, and other environments that catch message conditions (#159).",NA
cli,1,89,90,FALSE,"ANSI strings created by `col_*`, `bg_*` and `style_*` now also add the `character` class to the result. This fixes issues with code that expect `character` objects.",NA
cli,1,90,91,FALSE,"New functions to manipulate ANSI strings: `ansi_aling()`, `ansi_has_any()`, `ansi_nchar()`, `ansi_regex()`, `ansi_strip()`, `ansi_strsplit()`, `ansi_substr()`, `ansi_substring()`.",NA
cli,1,91,92,FALSE,New `cli_vec()` function to allow easier formatting of collapsed vectors. It is now also possible to use styling to set the collapsing parameters (#129).,NA
cli,1,92,93,FALSE,New `pluralize()` function to perform pluralization without generating cli output (#155).,NA
cli,1,93,94,FALSE,"`console_width()` works better now in RStudio, and also in terminals.",NA
cli,1,94,95,FALSE,"Styling of verbatim text work properly now (#147, @tzakharko).",NA
cli,1,95,96,FALSE,"Messages (i.e. `message` conditions) coming from cli now have the `cliMessage` class, so you can easily suppress them without suppressing other messages (#156).",NA
cli,1,96,97,FALSE,"cli prints the output to `stderr()` now, if there is an output or message sink. This is to make interactive and non-interactive sessions consistent (#153).",NA
cli,1,97,98,FALSE,Pluralization works correctly now if the last alternative is the empty string (#158).,NA
cli,1,98,99,FALSE,cli now caches the result of the dark background detection in iTerm on macOS. Reload cli to delete the cache (#131).,NA
cli,1,99,100,FALSE,"The `is_dynamic_tty()`, `is_ansi_tty()` and `ansi_hide_cursor()` and related functions now default to the `""auto""` stream, which is automatically selected to be either `stdout()` or `stderr()`. See the manual for details (#144).",NA
cli,1,100,101,FALSE,"The default theme now quotes file names, paths, email addresses if they don't start or end with an alphanumeric character or a slash. This is to make it easier to spot names that start or end with a space (#167).",NA
cli,1,101,102,FALSE,"`make_spinner()` clears the line properly now (@tzakharko, #164).",NA
cli,1,102,103,FALSE,"Semantic cli functions now automatically replace Unicode non-breaking space characters (`\u00a0`) with regular space characters, right before output. They are still used to calculate the line breaks, but not outputted (#161).",NA
cli,1,103,104,FALSE,"Progress bars now respect `is_dynamic_tty()` and do not output `\r` when this is false (@jimhester, #177)",NA
cli,1,104,105,FALSE,The status bar now does not simplify multiple spaces by a single space.,NA
cli,1,105,106,FALSE,cli now does not crash if it fails to detect whether the RStudio theme is a dark theme (#138).,NA
cli,1,106,107,FALSE,"cli now works better with wide Unicode characters, for example emojis. In particular, a status bar containing emojis is cleared properly (#133).",NA
cli,1,107,108,FALSE,"The status bar now does not flicker when updated, in terminals (#135).",NA
cli,1,108,109,FALSE,Symbols (`symbol$*`) are now correctly printed in RStudio on Windows (#124).,NA
cli,1,109,110,FALSE,"The default theme for `cli_code()` output looks better now, especially in RStudio (#123).",NA
cli,1,110,111,FALSE,"Remove spurious newline after a `cli_process_start()` was cleared manually, and also at the end of the function.",NA
cli,1,111,112,FALSE,"Use Oxford comma when listing 3 or more items (@jonocarroll, #128).",NA
cli,1,112,113,FALSE,"Fix a bug in `is_dynamic_tty()`, setting `R_CLI_DYNAMIC=""FALSE""` now",NA
cli,1,113,114,FALSE,"cli has now functions to add ANSI styles to text. These use the crayon package internally, and provide a simpler interface. See the `col_*`, `bg_*`, `style_*` and also the `make_ansi_style()` and `combine_ansi_styles()` functions (#51).",NA
cli,1,114,115,FALSE,New `is_dynamic_tty()` function detects if `\r` should be used for a stream (#62).,NA
cli,1,115,116,FALSE,New `is_ansi_tty()` function detects if ANSI control sequences can be used for a stream.,NA
cli,1,116,117,FALSE,"New `ansi_hide_cursor()`, `ansi_show_cursor()` and `ansi_with_hidden_cursor()` functions to hide and show the cursor in terminals.",NA
cli,1,117,118,FALSE,New `make_spinner()` function helps integrating spinners into your functions.,NA
cli,1,118,119,FALSE,Now `symbol` always uses ASCII symbols when the `cli.unicode` option is set to `FALSE`.,NA
cli,1,119,120,FALSE,"New `cli_sitrep()` function, situation report about UTF-8 and ANSI color support (#53).",NA
cli,1,120,121,FALSE,"Fall back to ASCII only characters on non-Windows platforms without UTF-8 support, and also in LaTeX when running knitr (#34).",NA
crayon,1,1,1,FALSE,crayon now does not fail to install from source if the utils package,NA
crayon,1,2,2,FALSE,"You can use the new `cli.default_num_colors` option to set the default number of ANSI colors, only if ANSI support is otherwise detected. See the details in the manual of `num_ansi_colors()`. (From cli.)",NA
crayon,1,3,3,FALSE,crayon now install cleanly on R 3.4.x and R 3.5.x on Windows (#131).,NA
crayon,1,4,4,FALSE,Better ANSI support detection if there is an active `sink()`.,NA
crayon,1,5,5,FALSE,Support ANSI markup in RStudio jobs.,NA
crayon,1,6,6,FALSE,ANSI color support detection works correctly now in older RStudio (#112).,NA
crayon,1,7,7,FALSE,ANSI color support detection works correctly now on older R versions (#109).,NA
crayon,1,8,8,FALSE,Overhauled and much improved detection of ANSI color support and number of ANSI colors.,NA
crayon,1,9,9,FALSE,`NO_COLOR` environment variable disables color (#64),NA
crayon,1,10,10,FALSE,Now colors are turned on if ANSICON (<https://github.com/adoxa/ansicon>) is active.,NA
crayon,1,11,11,FALSE,New `hyperlink()` function to add hyperlinks to terminal output. The new `has_hyperlink()` function tests if the current `stdout()` supports this.,NA
crayon,1,12,12,FALSE,"`reset` style now restores previous style for text following it (@brodieG, #35).",NA
crayon,1,13,13,FALSE,Warnings are no longer generated when the INSIDE_EMACS environment variable is set but does not include a version number.,NA
crayon,1,14,14,FALSE,Style functions convert arguments to character now,NA
crayon,1,15,15,FALSE,Autodetect RStudio ANSI support,NA
crayon,1,16,16,FALSE,"`col_align()` gains `type` argument, default `""width""` (#54).",NA
crayon,1,17,17,FALSE,"Removed dependency to `memoise` (@brodieG, #25)",NA
crayon,1,18,18,FALSE,"Fixed a test case that changed the `crayon.enabled` setting, potentially (@brodieG)",NA
crayon,1,19,19,FALSE,"Added `crayon.colors` option, to specify the number of colors explicitly",NA
crayon,1,20,20,FALSE,"`TERM=xterm` and `tput colors=8` will use 256 colors, as 256 colors are usually supported in this case (#17)",NA
crayon,1,21,21,FALSE,"Support colors in ConEmu and cmder, on Windows",NA
crayon,1,22,22,FALSE,Fix color detection in Emacs tramp,NA
crayon,1,23,23,FALSE,`col_strsplit` and `col_substr` corner cases:,NA
crayon,2,23,24,FALSE,"* handle empty chunks at beginning or end of strings like `base::strsplit` (@brodieG, #26)",`col_strsplit` and `col_substr` corner cases:
crayon,2,23,25,FALSE,* explicitly deal with 'split' values that are not length 1 as that is not currently supported,`col_strsplit` and `col_substr` corner cases:
crayon,2,23,26,FALSE,"* handle zero length `x` argument in `col_substr`, and add more explicit error messages for corner cases",`col_strsplit` and `col_substr` corner cases:
crayon,1,27,27,FALSE,Some performance improvements to `col_substr` (@brodieG),NA
crayon,1,28,28,FALSE,"Change rgb to ANSI code mapping, based on the ""paint"" ruby gem (@richfitz, #33, #34)",NA
crayon,1,30,30,FALSE,Colors are turned on by default in Emacs ESS 23.x and above.,NA
crayon,1,31,31,FALSE,"Functions to turn on and off a style: `start`, `finish`.",NA
crayon,1,32,32,FALSE,"Really fix `tput` corner cases (@jimhester, #21)",NA
crayon,1,33,33,FALSE,"Fix detecting number of colors when `tput` exists, but fails with an",NA
crayon,1,34,34,FALSE,"Fix detection of number of colors, it was cached from installation time (#17).",NA
crayon,1,35,35,FALSE,Color aware string operations. They are slow and experimental currently.,NA
crayon,1,36,36,FALSE,`show_ansi_colors()` prints all supported colors on the screen.,NA
crayon,1,37,37,FALSE,"256 colors, on terminals that support it.",NA
crayon,1,38,38,FALSE,"Disable colors on Windows, they are not supported in the default setup.",NA
dbplyr,1,1,1,FALSE,"Variables that are neither found in the data nor in the environment now produce an error (@mgirlich, #907).",NA
dbplyr,1,2,2,FALSE,"The keyword highlighting can now be customised via the option `dbplyr_highlight`. Turn it off via `options(dbplyr_highlight = FALSE)` or pass a custom ansi style, e.g. `options(dbplyr_highlight = cli::combine_ansi_styles(""bold"", ""cyan""))` (@mgirlich, #974).",NA
dbplyr,1,3,3,FALSE,"`cur_column()` is now supported (@mgirlich, #951).",NA
dbplyr,1,4,4,FALSE,"Many errors have been improved and now show the function where the error happened instead of a helper function (@mgirlich, #907).",NA
dbplyr,1,5,5,FALSE,"Errors produced by the database, e.g. in `collect()` or `rows_*()`, now show the verb where the error happened (@mgirlich).",NA
dbplyr,1,6,6,FALSE,"`window_order()` now produces a better error message when applied to a data frame (@mgirlich, #947).",NA
dbplyr,1,7,7,FALSE,"Using a named `across()` now gives a clear error message (@mgirlich, #761).",NA
dbplyr,1,8,8,FALSE,"Using `quantile()` for SQLite now gives a better error saying that it is not supported (@mgirlich, #1000).",NA
dbplyr,1,9,9,FALSE,"`pivot_wider()` works again for MS SQL (@mgirlich, #929).",NA
dbplyr,1,10,10,FALSE,"Querying Teradata databases works again. Unfortunately, the fix requires every column to be explicitly selected again (@mgirlich, #966).",NA
dbplyr,1,11,11,FALSE,"Grouping by renamed columns works again (@mgirlich, #928).",NA
dbplyr,1,12,12,FALSE,"Fixed an installation issue due to missing namespace for `setOldClass()` (@mgirlich, #927).",NA
dbplyr,1,13,13,FALSE,"`str_flatten()` uses `collapse = """"` by default, consistent with `stringr`, for Snowflake, Redshift, Postgres, and MySQL (@fh-afrachioni, #993).",NA
dbplyr,1,14,14,FALSE,"`slice_sample()` now works for Oracle (@mgirlich, #986).",NA
dbplyr,1,15,15,FALSE,"`copy_inline()` now works for Hana (#950), Oracle (#972), and Redshift (#949, thanks to @ejneer for an initial implementation).",NA
dbplyr,1,16,16,FALSE,"`copy_inline()` gains a `types` argument to specify the SQL column types (@mgirlich, #963).",NA
dbplyr,1,17,17,FALSE,"`rows_*()` now uses the column types of `x` when auto copying a local data frame to a Postgres database (@mgirlich, #909).",NA
dbplyr,1,18,18,FALSE,"dbplyr now needs less subqueries resulting in shorter, more readable and in some cases even faster SQL. The following combination of verbs now avoids a subquery if possible:",NA
dbplyr,2,18,19,FALSE,"* `*_join()` + `select()` (@mgirlich, #876).","dbplyr now needs less subqueries resulting in shorter, more readable and in some cases even faster SQL. The following combination of verbs now avoids a subquery if possible:"
dbplyr,2,18,20,FALSE,"* `select()` + `*_join()` (@mgirlich, #875).","dbplyr now needs less subqueries resulting in shorter, more readable and in some cases even faster SQL. The following combination of verbs now avoids a subquery if possible:"
dbplyr,2,18,21,FALSE,"* `mutate()` + `filter()` and `filter()` + `filter()` (@mgirlich, #792).","dbplyr now needs less subqueries resulting in shorter, more readable and in some cases even faster SQL. The following combination of verbs now avoids a subquery if possible:"
dbplyr,2,18,22,FALSE,"* `distinct()` (@mgirlich, #880).","dbplyr now needs less subqueries resulting in shorter, more readable and in some cases even faster SQL. The following combination of verbs now avoids a subquery if possible:"
dbplyr,2,18,23,FALSE,"* `summarise()` + `filter()` now translates to `HAVING` where possible (@mgirlich, #877).","dbplyr now needs less subqueries resulting in shorter, more readable and in some cases even faster SQL. The following combination of verbs now avoids a subquery if possible:"
dbplyr,1,24,24,FALSE,The generated SQL is now shorter and more readable:,NA
dbplyr,2,24,25,FALSE,"* Joins now don't use the table alias ""LHS"" and ""RHS"" unless necessary (@mgirlich).",The generated SQL is now shorter and more readable:
dbplyr,2,24,26,FALSE,"* When using common table expressions the results of joins and set operations are now reused (@mgirlich, #978).",The generated SQL is now shorter and more readable:
dbplyr,2,24,27,FALSE,"* When possible, dbplyr now uses `SELECT *` after a join instead of explicitly selecting every column (@mgirlich, #898).",The generated SQL is now shorter and more readable:
dbplyr,1,28,28,FALSE,"A call to `sql()` is now translated differently. The `...` are now evaluated locally instead of being translated with `translate_sql()` (@mgirlich, #952).\",NA
dbplyr,1,29,29,FALSE,"New translations for Teradata: `as.Date()`, `week()`, `quarter()`, `paste()`, `startsWith()`, `row_number()`, `weighted.mean()`, `lead()`, `lag()`, and `cumsum()` (@overmar, #913).",NA
dbplyr,1,30,30,FALSE,New translations for Snowflake:,NA
dbplyr,2,30,31,FALSE,"* numeric functions: `all()`, `any()`, `log10()`, `round()`, `cor()`, `cov()` and `sd()`.",New translations for Snowflake:
dbplyr,2,30,32,FALSE,"* date functions: `day()`, `mday()`, `wday()`, `yday()`, `week()`, `isoweek()`, `month()`, `quarter()`, `isoyear()`, `seconds()`, `minutes()`, `hours()`, `days()`, `weeks()`, `months()`, `years()` and `floor_date()`.",New translations for Snowflake:
dbplyr,2,30,33,FALSE,"* string functions: `grepl()`, `paste()`, `paste0()`, `str_c()`, `str_locate()`, `str_detect()`, `str_replace()`, `str_replace_all()`, `str_remove()`, `str_remove_all()`, `str_trim()`, `str_squish()` and `str_flatten()` (@fh-afrachioni, #860).",New translations for Snowflake:
dbplyr,1,34,34,FALSE,"Querying Oracle databases works again. Unfortunately, the fix requires every column to be explicitly selected again (@mgirlich, #908).",NA
dbplyr,1,35,35,FALSE,"`semi_join()` and `anti_join()` work again for Spark (@mgirlich, #915).",NA
dbplyr,1,36,36,FALSE,"`str_c()` is now translated to `||` in Oracle (@mgirlich, #921).",NA
dbplyr,1,37,37,FALSE,"`sd()`, `var()`, `cor()` and `cov()` now give clear error messages on databases that don't support them.",NA
dbplyr,1,38,38,FALSE,`any()` and `all()` gain default translations for all backends.,NA
dbplyr,1,39,39,FALSE,"SQL formatting has been considerably improved with new wrapping and indenting. `show_query()` creates more readable queries by printing the keywords in blue (@mgirlich, #644). When possible dbplyr now uses `SELECT *` instead of explicitly selecting every column (@mgirlich).",NA
dbplyr,1,40,40,FALSE,"Added support for `rows_insert()`, `rows_append()`, `rows_update()`, `rows_patch()`, `rows_upsert()`, and `rows_delete()` (@mgirlich, #736).",NA
dbplyr,1,41,41,FALSE,"Added `copy_inline()` as a `copy_to()` equivalent that does not need write access (@mgirlich, #628).",NA
dbplyr,1,42,42,FALSE,"`remote_query()`, `show_query()`, `compute()` and `collect()` have an experimental `cte` argument. If `TRUE` the SQL query will use common table expressions instead of nested queries (@mgirlich, #638).",NA
dbplyr,1,43,43,FALSE,"New `in_catalog()`, which works like `in_schema()`, but allows creation of table identifiers consisting of three components: catalog, schema, name (#806, @krlmlr).",NA
dbplyr,1,44,44,FALSE,"When possible, dbplyr now uses `SELECT *` instead of explicitly selecting every column (@mgirlich).",NA
dbplyr,1,45,45,FALSE,"New translation for `cut()` (@mgirlich, #697).",NA
dbplyr,1,46,46,FALSE,Improved translations for specific backends:,NA
dbplyr,2,46,47,FALSE,"* `as.Date()` for Oracle (@mgirlich, #661).",Improved translations for specific backends:
dbplyr,2,46,48,FALSE,"* `case_when()` with a final clause of the form `TRUE ~ ...` uses `ELSE ...` for SQLite (@mgirlich, #754).",Improved translations for specific backends:
dbplyr,2,46,49,FALSE,"* `day()`, `week()`, `isoweek()`, and `isoyear()` for Postgres (@mgirlich, #675).",Improved translations for specific backends:
dbplyr,2,46,50,FALSE,* `explain()` for ROracle (@mgirlich).,Improved translations for specific backends:
dbplyr,2,46,51,FALSE,"* `fill()` for SQL Server (#651, @mgirlich) and RPostgreSQL (@mgirlich).",Improved translations for specific backends:
dbplyr,2,46,52,FALSE,"* `quantile()` for SQL Server (@mgirlich, #620).",Improved translations for specific backends:
dbplyr,2,46,53,FALSE,"* `str_flatten()` for Redshift (@hdplsa, #804)",Improved translations for specific backends:
dbplyr,2,46,54,FALSE,"* `slice_sample()` for MySQL/MariaDB and SQL Server (@mgirlich, #617).",Improved translations for specific backends:
dbplyr,2,46,55,FALSE,"* `union()` for Hive (@mgirlich, #663).",Improved translations for specific backends:
dbplyr,1,56,56,FALSE,"The backend function `dbplyr_fill0()` (used for databases that lack `IGNORE NULLS` support) now respects database specific translations (@rsund, #753).",NA
dbplyr,1,57,57,FALSE,"Calls of the form `stringr::foo()` or `lubridate::foo()` are now evaluated in the database, rather than locally (#197).",NA
dbplyr,1,58,58,FALSE,"Unary plus (e.g. `db %>% filter(x == +1)`) now works (@mgirlich, #674).",NA
dbplyr,1,59,59,FALSE,"`is.na()`, `ifelse()`, `if_else()`, `case_when()`, and `if()` generate slightly more compact SQL (@mgirlich, #738).",NA
dbplyr,1,60,60,FALSE,"`if_else()` now supports the `missing` argument (@mgirlich, #641).",NA
dbplyr,1,61,61,FALSE,"`n()` now respects the window frame (@mgirlich, #700).",NA
dbplyr,1,62,62,FALSE,"`quantile()` no longer errors when using the `na.rm` argument (@mgirlich, #600).",NA
dbplyr,1,63,63,FALSE,"`remote_name()` now returns a name in more cases where it makes sense (@mgirlich, #850).",NA
dbplyr,1,64,64,FALSE,"The partial evaluation code is now more aligned with `dtplyr`. This makes it easier to transfer bug fixes and new features from one package to the other. In this process the second argument of `partial_eval()` was changed to a lazy frame instead of a character vector of variables (@mgirlich, #766). Partially evaluated expressions with infix operations are now correctly translated. For example `translate_sql(!!expr(2 - 1) * x)` now works (@mgirlich, #634).",NA
dbplyr,1,65,65,FALSE,"New `pillar::tbl_format_header()` method for lazy tables: Printing a lazy table where all rows are displayed also shows the exact number of rows in the header. The threshold is controlled by `getOption(""pillar.print_min"")`, with a default of 10 (#796, @krlmlr).",NA
dbplyr,1,66,66,FALSE,The 1st edition extension mechanism is formally deprecated (#507).,NA
dbplyr,1,67,67,FALSE,"`across()`, `if_any()` and `if_all()` now defaults to `.cols = everything()` (@mgirlich, #760). If `.fns` is not provided `if_any()` and `if_all()` work like a parallel version of `any()`/`any()` (@mgirlich, #734).",NA
dbplyr,1,68,68,FALSE,"`across()`, `if_any()`, and `if_all()` can now translate evaluated lists and functions (@mgirlich, #796), and accept the name of a list of functions (@mgirlich, #817).",NA
dbplyr,1,69,69,FALSE,"Multiple `across()` calls in `mutate()` and `transmute()` can now access freshly created variables (@mgirlich, #802).",NA
dbplyr,1,70,70,FALSE,"`add_count()` now doesn't change the groups of the input (@mgirlich, #614).",NA
dbplyr,1,71,71,FALSE,"`compute()` can now handle when `name` is named by unnaming it first (@mgirlich, #623), and now works when `temporary = TRUE` for Oracle (@mgirlich, #621).",NA
dbplyr,1,72,72,FALSE,"`distinct()` now supports `.keep_all = TRUE` (@mgirlich, #756).",NA
dbplyr,1,73,73,FALSE,"`expand()` now works in DuckDB (@mgirlich, #712).",NA
dbplyr,1,74,74,FALSE,"`explain()` passes `...` to methods (@mgirlich, #783), and works for Redshift (@mgirlich, #740).",NA
dbplyr,1,75,75,FALSE,"`filter()` throws an error if you supply a named argument (@mgirlich, #764).",NA
dbplyr,1,76,76,FALSE,"Joins disambiguates columns that only differ in case (@mgirlich, #702). New arguments `x_as` and `y_as` allow you to control the table alias used in SQL query (@mgirlich, #637). Joins with `na_matches = ""na""` now work for DuckDB (@mgirlich, #704).",NA
dbplyr,1,77,77,FALSE,"`mutate()` and `transmute()` use named windows if a window definition is used at least twice and the backend supports named windows (@mgirlich, #624).",NA
dbplyr,1,78,78,FALSE,"`mutate()` now supports the arguments `.keep`, `.before`, and `.after` (@mgirlich, #802).",NA
dbplyr,1,79,79,FALSE,`na.rm = FALSE` only warns once every 8 hours across all functions (#899).,NA
dbplyr,1,80,80,FALSE,"`nesting()` now supports the `.name_repair` argument (@mgirlich, #654).",NA
dbplyr,1,81,81,FALSE,"`pivot_longer()` can now pivot a column named `name` (@mgirlich, #692), can repair names (@mgirlich, #694), and can work with multiple `names_from` columns (@mgirlich, #693).",NA
dbplyr,1,82,82,FALSE,"`pivot_wider(values_fn = )` and `pivot_longer(values_transform = )` can now be formulas (@mgirlich, #745).",NA
dbplyr,1,83,83,FALSE,"`pivot_wider()` now supports the arguments `names_vary`, `names_expand`, and `unused_fn` (@mgirlich, #774).",NA
dbplyr,1,84,84,FALSE,"`remote_name()` now returns a name in more cases where it makes sense (@mgirlich, #850).",NA
dbplyr,1,85,85,FALSE,`sql_random()` is now exported.,NA
dbplyr,1,86,86,FALSE,"`ungroup()` removes variables in `...` from grouping (@mgirlich, #689).",NA
dbplyr,1,87,87,FALSE,"`transmute()` now keeps grouping variables (@mgirlich, #802).",NA
dbplyr,1,88,88,FALSE,New support for Snowflake (@edgararuiz),NA
dbplyr,1,89,89,FALSE,"`compute()`, `sql_table_index()`, and `sql_query_wrap()` now work with schemas (@mgirlich, #595).",NA
dbplyr,1,90,90,FALSE,`if_any()` and `if_all()` are now translated.,NA
dbplyr,1,91,91,FALSE,"`group_by()` now ungroups when the dots argument is empty and `.add` is `FALSE` (@mgirlich, #615).",NA
dbplyr,1,92,92,FALSE,"`sql_escape_date()` and `sql_escape_datetime` gain methods for MS Access (@erikvona, #608).",NA
dbplyr,1,93,93,FALSE,"Thanks to @mgirlich, dbplyr gains support for key verbs from tidyr: `pivot_longer()` (#532), `pivot_wider()` (#543), `expand()` (#538), `complete()` (#538), `replace_na()` (#538), `fill()` (#566).",NA
dbplyr,1,94,94,FALSE,@mgirlich is now a dbplyr author in recognition of his significant and sustained contributions.,NA
dbplyr,1,95,95,FALSE,"`across()` implementation has been rewritten to support more inputs: it now translates formulas (#525), works with SQL functions that don't have R translations (#534), and work with `NULL` (#554)",NA
dbplyr,1,96,96,FALSE,"`summarise()` now supports argument `.groups` (@mgirlich, #584).",NA
dbplyr,1,97,97,FALSE,"All backends: `str_sub()`, `substr()` and `substring()` get better translations (#577). Most importantly, the results of using negative locations should match the underlying R implementations more closely.",NA
dbplyr,1,98,98,FALSE,MS SQL:,NA
dbplyr,2,98,99,FALSE,"* `as.integer()` and `as.integer64()` translations cast first to `NUMERIC` to avoid CASTing weirdness (@DavidPatShuiFong, #496).",MS SQL:
dbplyr,2,98,100,FALSE,* Assumes a boolean context inside of `[` (#546),MS SQL:
dbplyr,2,98,101,FALSE,* `str_sub()` with `end = -1` now works (#577).,MS SQL:
dbplyr,1,102,102,FALSE,"Redshift: `lag()` and `lead()` lose the `default` parameter since it's not supported (@hdplsa, #548).",NA
dbplyr,1,103,103,FALSE,"SQLite: custom translation of `full_join()` and `right_join()` (@mgirlich, #536).",NA
dbplyr,1,104,104,FALSE,RPostgreSQL backend warns if `temporary = TRUE` since temporary tables are not supported by `RPostgreSQL::dbWriteTable()` (#574).,NA
dbplyr,1,105,105,FALSE,`count()` method provides closer match to dplyr semantics (#347).,NA
dbplyr,1,106,106,FALSE,"`distinct()` now respects grouping (@mgirlich, #535).",NA
dbplyr,1,107,107,FALSE,"`db_connection_describe()` no longer uses partial matching (@mgirlich, #564).",NA
dbplyr,1,108,108,FALSE,`pull()` no longer `select()`s the result when there's already only one variable (#562).,NA
dbplyr,1,109,109,FALSE,"`select()` no longer relocates grouping variables to the front (@mgirlich, #568). and informs when adding missing grouping variables (@mgirlich, #559).",NA
dbplyr,1,110,110,FALSE,`tbl.src_dbi(...)` now passed on to `tbl_sql()` (#530).,NA
dbplyr,1,111,111,FALSE,`across()` is now translated into individual SQL statements (#480).,NA
dbplyr,1,112,112,FALSE,`rename()` and `select()` support dplyr 1.0.0 tidyselect syntax (apart from predicate functions which can't easily work on computed queries) (#502).,NA
dbplyr,1,113,113,FALSE,`relocate()` makes it easy to move columns (#494) and `rename_with()` makes it easy to rename columns programmatically (#502).,NA
dbplyr,1,114,114,FALSE,"`slice_min()`, `slice_max()`, and `slice_order()` are now supported. `slice_head()` and `slice_tail()` throw clear error messages (#394)",NA
dbplyr,1,115,115,FALSE,Documentation has been radically improved with new topics for each major verb and each backend giving more details about the SQL translation.,NA
dbplyr,1,116,116,FALSE,"`intersect()`, `union()` and `setdiff()` gain an `all` argument to add the `ALL` argument (#414).",NA
dbplyr,1,117,117,FALSE,"Join functions gains a `na_matches` argument that allows you to control whether or not `NA` (`NULL`) values match other `NA` values. The default is `""never""`, which is the usual behaviour in databases. You can set `na_matches = ""na""` to match R's usual join behaviour (#180). Additional arguments error (instead of being silently swallowed) (#382).",NA
dbplyr,1,118,118,FALSE,Joins now only use aliases where needed to disambiguate columns; this should make generated queries more readable.,NA
dbplyr,1,119,119,FALSE,"Subqueries no longer include an `ORDER BY` clause. This is not part of the SQL spec, and has very limited support across databases. Now such queries generate a warning suggesting that you move your `arrange()` call later in the pipeline (#276). (There's one exception: `ORDER BY` is still generated if `LIMIT` is present; this tends to affect the returns rows but not necessarily their order).",NA
dbplyr,1,120,120,FALSE,Subquery names are now scoped within the query. This makes query text deterministic which helps some query optimisers/cachers (#336).,NA
dbplyr,1,121,121,FALSE,`sql_optimise()` now can partially optimise a pipeline; due to an unfortunate bug it previously gave up too easily.,NA
dbplyr,1,122,122,FALSE,"`in_schema()` quotes each input individually (#287) (use `sql()` to opt out of quoting, if needed). And `DBI::Id()` should work anywhere that `in_schema()` does.",NA
dbplyr,1,123,123,FALSE,Experimental new SAP HANA backend (#233). Requires the latest version of odbc.,NA
dbplyr,1,124,124,FALSE,All backends:,NA
dbplyr,2,124,125,FALSE,"* You can now use `::` in translations, so that (e.g.) `dbplyr::n()` is translated to `count(*)` (#207).",All backends:
dbplyr,2,124,126,FALSE,* `[[` can now also translate numeric indices (#520).,All backends:
dbplyr,2,124,127,FALSE,* `%/%` now generates a clear error message; previously it was translated to `/` which is not correct (#108).,All backends:
dbplyr,2,124,128,FALSE,* `n()` is translated to `count(*)` instead of `count()` (#343).,All backends:
dbplyr,2,124,129,FALSE,* `sub_str()` translation is more consistent in edge cases (@ianmcook).,All backends:
dbplyr,2,124,130,FALSE,"* All `median()` (@lorenzwalthert, #483), `pmin()`, `pmax()` (#479), `sd()` and `var()` functions have an `na.rm` argument that warns once when not `TRUE`. This makes them consistent with `mean()` and `sum()`.",All backends:
dbplyr,2,124,131,FALSE,* `substring()` is now translated the same way as `substr()` (#378).,All backends:
dbplyr,1,132,132,FALSE,"[blob](https://blob.tidyverse.org/) vectors can now be used with `!!` and `!!!` operators, for example in `filter()` (@okhoma, #433)",NA
dbplyr,1,133,133,FALSE,MySQL uses standard SQL for index creation.,NA
dbplyr,1,134,134,FALSE,"MS SQL translation does better a distinguishing between bit and boolean (#377, #318). `if` and `ifelse` once again generate `IIF`, creating simpler expressions. `as.*()` function uses `TRY_CAST()` instead of `CAST()` for version 11+ (2012+) (@DavidPatShuiFong, #380).",NA
dbplyr,1,135,135,FALSE,odbc no longer translates `count()`; this was an accidental inclusion.,NA
dbplyr,1,136,136,FALSE,"Oracle translation now depends on Oracle 12c, and uses a ""row-limiting"" clause for `head()`. It gains translations for `today()` and `now()`, and improved `as.Date()` translation (@rlh1994, #267).",NA
dbplyr,1,137,137,FALSE,"PostgreSQL: new translations for lubridate period functions `years()`, `months()`, `days()`, and `floor_date()` (@bkkkk, #333) and stringr functions `str_squish()`, `str_remove()`, and `str_remove_all()` (@shosaco).",NA
dbplyr,1,138,138,FALSE,New RedShift translations when used with `RPostgres::Redshift()`.,NA
dbplyr,2,138,139,FALSE,"* `str_replace()` errors since there's no Redshift translation, and `str_replace_all()` uses `REGEXP_REPLACE()` (#446).",New RedShift translations when used with `RPostgres::Redshift()`.
dbplyr,2,138,140,FALSE,* `paste()` and `paste0()` use `||` (#458).,New RedShift translations when used with `RPostgres::Redshift()`.
dbplyr,2,138,141,FALSE,* `as.numeric()` and `as.double()` cast to `FLOAT` (#408).,New RedShift translations when used with `RPostgres::Redshift()`.
dbplyr,2,138,142,FALSE,* `substr()` and `str_sub()` use `SUBSTRING()` (#327).,New RedShift translations when used with `RPostgres::Redshift()`.
dbplyr,1,143,143,FALSE,"SQLite gains translations for lubridate functions `today()`, `now()`, `year()`, `month()`, `day()`, `hour()`, `minute()`, `second()`,`yday()` (#262), and correct translation for `median()` (#357).",NA
dbplyr,1,144,144,FALSE,New `dbplyr_edition()` generic allows you to opt-in to the 2nd edition of the dbplyr API.,NA
dbplyr,1,145,145,FALSE,"`db_write_table()` now calls `DBI::dbWriteTable()` instead of nine generics that formerly each did a small part: `db_create_indexes()`, `db_begin()`, `db_rollback()`, `db_commit()`, `db_list_tables()`, `drop_drop_table()`, `db_has_table()`, `db_create_table()`, and `db_data_types()`. You can now delete the methods for these generics. `db_query_rows()` is no longer used; it appears that it hasn't been used for some time, so if you have a method, you can delete it.",NA
dbplyr,1,146,146,FALSE,`DBI::dbQuoteIdentifier()` is now used instead of `sql_escape_ident()` and `DBI::dbQuoteString()` instead of `sql_escape_string()`.,NA
dbplyr,1,147,147,FALSE,A number of `db_*` generics have been replaced with new SQL generation generics:,NA
dbplyr,2,147,148,FALSE,* `dplyr::db_analyze()` -\> `dbplyr::sql_table_analyze()`,A number of `db_*` generics have been replaced with new SQL generation generics:
dbplyr,2,147,149,FALSE,* `dplyr::db_create_index()` -\> `dbplyr::sql_table_index()`,A number of `db_*` generics have been replaced with new SQL generation generics:
dbplyr,2,147,150,FALSE,* `dplyr::db_explain()` -\> `dbplyr::sql_queriy_explain()`,A number of `db_*` generics have been replaced with new SQL generation generics:
dbplyr,2,147,151,FALSE,* `dplyr::db_query_fields()` -\> `dbplyr::sql_query_fields()`,A number of `db_*` generics have been replaced with new SQL generation generics:
dbplyr,2,147,152,FALSE,* `dplyr::db_save_query()` -\> `dbplyr::sql_query_save()`,A number of `db_*` generics have been replaced with new SQL generation generics:
dbplyr,1,152,152,FALSE,This makes them easier to test and is an important part of the process of moving all database generics in dbplyr (#284).,NA
dbplyr,1,153,153,FALSE,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:,NA
dbplyr,2,153,154,FALSE,* `dplyr::sql_select()` -\> `dbplyr::sql_query_select()`,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:
dbplyr,2,153,155,FALSE,* `dplyr::sql_join()` -\> `dbplyr::sql_query_join()`,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:
dbplyr,2,153,156,FALSE,* `dplyr::sql_semi_join()` -\> `dbplyr::sql_query_semi_join()`,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:
dbplyr,2,153,157,FALSE,* `dplyr::sql_set_op()` -\> `dbplyr::sql_query_set_op()`,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:
dbplyr,2,153,158,FALSE,* `dplyr::sql_subquery()` -\> `dbplyr::sql_query_wrap()`,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:
dbplyr,2,153,159,FALSE,* `dplyr::db_desc()` -\> `dbplyr::db_connection_describe()`,A number of other generics have been renamed to facilitate the move from dplyr to dbplyr:
dbplyr,1,160,160,FALSE,New `db_temporary_table()` generic makes it easier to work with databases that require temporary tables to be specially named.,NA
dbplyr,1,161,161,FALSE,"New `sql_expr_matches()` generic allows databases to use more efficient alternatives when determine if two values ""match"" (i.e. like equality but a pair of `NULL`s will also match). For more details, see <https://modern-sql.com/feature/is-distinct-from>",NA
dbplyr,1,162,162,FALSE,New `sql_join_suffix()` allows backends to control the default suffixes used (#254).,NA
dbplyr,1,163,163,FALSE,All old lazy eval shims have been removed. These have been deprecated for some time.,NA
dbplyr,1,164,164,FALSE,Date-time escaping methods for Athena and Presto have moved to the packages where they belong.,NA
dbplyr,1,165,165,FALSE,Attempting to embed a Shiny reactive in a query now gives a helpful error (#439).,NA
dbplyr,1,166,166,FALSE,`copy_lahman()` and `copy_nycflights13()` (and hence `nycflights13_sqlite()`) and friends now return DBI connections rather than the now deprecated `src_dbi()` (#440).,NA
dbplyr,1,167,167,FALSE,"`copy_to()` can now `overwrite` when table is specified with schema (#489), and gains an `in_transaction` argument used to optionally suppress the transaction wrapper (#368).",NA
dbplyr,1,168,168,FALSE,`distinct()` no longer duplicates column if grouped (#354).,NA
dbplyr,1,169,169,FALSE,`transmute()` now correctly tracks variables it needs when creating subqueries (#313).,NA
dbplyr,1,170,170,FALSE,`mutate()` grouping variables no longer generates a downstream error (#396),NA
dbplyr,1,171,171,FALSE,`mutate()` correctly generates subqueries when you re-use the same variable three or more times (#412).,NA
dbplyr,1,172,172,FALSE,"`window_order()` overrides ordering, rather than appending to it.",NA
dbplyr,1,173,173,FALSE,"Internally `DBI::dbExecute()` now uses `immediate = TRUE`; this improves support for session-scoped temporary tables in MS SQL (@krlmlr, #438).",NA
dbplyr,1,174,174,FALSE,"Subqueries with `ORDER BY` use `TOP 9223372036854775807` instead of `TOP 100 PERCENT` on SQL Server for compatibility with Azure Data Warehouse (#337, @alexkyllo).",NA
dbplyr,1,175,175,FALSE,"`escape()` now supports `blob` vectors using new `sql_escape_raw()` generic. It enables using [blob](https://blob.tidyverse.org/) variables in dplyr verbs, for example to filter nvarchar values by UTF-16 blobs (see https://github.com/r-dbi/DBI/issues/215#issuecomment-356376133). (@okhoma, #433)",NA
dbplyr,1,176,176,FALSE,"Added `setOldClass()` calls for `""ident""` and `""ident_q""` classes for compatibility with dplyr 1.0.0 (#448, @krlmlr).",NA
dbplyr,1,177,177,FALSE,"Postgres `str_detect()` translation uses same argument names as stringr, and gains a `negate` argument (#444).",NA
dbplyr,1,178,178,FALSE,"`semi_join()` and `anti_join()` now correctly support the `sql_on` argument (#443, @krlmlr).",NA
dbplyr,1,179,179,FALSE,dbplyr now uses RPostgres (instead of RPostgreSQL) and RMariaDB (instead of RMySQL) for its internal tests and data functions (#427).,NA
dbplyr,1,180,180,FALSE,"The Date and POSIXt methods for `escape()` now use exported `sql_escape_date()` and `sql_escape_datetime()` generics to allow backend specific formatting of date and datetime literals. These are used to provide methods for Athena and Presto backends (@OssiLehtinen, #384, #391).",NA
dbplyr,1,181,181,FALSE,"`first()`, `last()`, `nth()`, `lead()` and `lag()` now respect the `window_frame()` (@krlmlr, #366).",NA
dbplyr,1,182,182,FALSE,"SQL server: new translations for `str_flatten()` (@PauloJhonny, #405).",NA
dbplyr,1,183,183,FALSE,"SQL server: temporary datasets are now session-local, not global (#401).",NA
dbplyr,1,184,184,FALSE,"Postgres: correct `str_detect()`, `str_replace()` and `str_replace_all()` translation (@shosaco, #362).",NA
dbplyr,1,185,185,FALSE,Fix bug when partially evaluating unquoting quosure containing a single symbol (#317),NA
dbplyr,1,186,186,FALSE,Fixes for rlang and dpylr compatibility.,NA
dbplyr,1,187,187,FALSE,`x %in% y` strips names of `y` (#269).,NA
dbplyr,1,188,188,FALSE,"Enhancements for scoped verbs (`mutate_all()`, `summarise_if()`, `filter_at()` etc) (#296, #306).",NA
dbplyr,1,189,189,FALSE,MS SQL use `TOP 100 PERCENT` as stop-gap to allow subqueries with `ORDER BY` (#277).,NA
dbplyr,1,190,190,FALSE,"Window functions now translated correctly for Hive (#293, @cderv).",NA
dbplyr,1,191,191,FALSE,"`` Error: `con` must not be NULL ``: If you see this error, it probably means that you have forgotten to pass `con` down to a dbplyr function. Previously, dbplyr defaulted to using `simulate_dbi()` which introduced subtle escaping bugs. (It's also possible I have forgotten to pass it somewhere that the dbplyr tests don't pick up, so if you can't figure it out, please let me know).",NA
dbplyr,1,192,192,FALSE,"Subsetting (`[[`, `$`, and `[`) functions are no longer evaluated locally. This makes the translation more consistent and enables useful new idioms for modern databases (#200).",NA
dbplyr,1,193,193,FALSE,"MySQL/MariaDB (https://mariadb.com/kb/en/library/window-functions/) and SQLite (https://www.sqlite.org/windowfunctions.html) translations gain support for window functions, available in Maria DB 10.2, MySQL 8.0, and SQLite 3.25 (#191).",NA
dbplyr,1,194,194,FALSE,"Overall, dplyr generates many fewer subqueries:",NA
dbplyr,2,194,195,FALSE,* Joins and semi-joins no longer add an unneeded subquery (#236). This is facilitated by the new `bare_identifier_ok` argument to `sql_render()`; the previous argument was called `root` and confused me.,"Overall, dplyr generates many fewer subqueries:"
dbplyr,2,194,196,FALSE,"* Many sequences of `select()`, `rename()`, `mutate()`, and `transmute()` can be collapsed into a single query, instead of always generating a subquery (#213).","Overall, dplyr generates many fewer subqueries:"
dbplyr,1,197,197,FALSE,"New `vignette(""sql"")` describes some advantages of dbplyr over SQL (#205) and gives some advice about writing literal SQL inside of dplyr, when you need to (#196).",NA
dbplyr,1,198,198,FALSE,"New `vignette(""reprex"")` gives some hints on creating reprexes that work anywhere (#117). This is supported by a new `tbl_memdb()` that matches the existing `tbl_lazy()`.",NA
dbplyr,1,199,199,FALSE,"All `..._join()` functions gain an `sql_on` argument that allows specifying arbitrary join predicates in SQL code (#146, @krlmlr).",NA
dbplyr,1,200,200,FALSE,"New translations for some lubridate functions: `today()`, `now()`, `year()`, `month()`, `day()`, `hour()`, `minute()`, `second()`, `quarter()`, `yday()` (@colearendt, @derekmorr). Also added new translation for `as.POSIXct()`.",NA
dbplyr,1,201,201,FALSE,"New translations for stringr functions: `str_c()`, `str_sub()`, `str_length()`, `str_to_upper()`, `str_to_lower()`, and `str_to_title()` (@colearendt). Non-translated stringr functions throw a clear error.",NA
dbplyr,1,202,202,FALSE,"New translations for bitwise operations: `bitwNot()`, `bitwAnd()`, `bitwOr()`, `bitwXor()`, `bitwShiftL()`, and `bitwShiftR()`. Unlike the base R functions, the translations do not coerce arguments to integers (@davidchall, #235).",NA
dbplyr,1,203,203,FALSE,New translation for `x[y]` to `CASE WHEN y THEN x END`. This enables `sum(a[b == 0])` to work as you expect from R (#202). `y` needs to be a logical expression; if not you will likely get a type error from your database.,NA
dbplyr,1,204,204,FALSE,"New translations for `x$y` and `x[[""y""]]` to `x.y`, enabling you to index into nested fields in databases that provide them (#158).",NA
dbplyr,1,205,205,FALSE,The `.data` and `.env` pronouns of tidy evaluation are correctly translated (#132).,NA
dbplyr,1,206,206,FALSE,"New translation for `median()` and `quantile()`. Works for all ANSI compliant databases (SQL Server, Postgres, MariaDB, Teradata) and has custom translations for Hive. Thanks to @edavidaja for researching the SQL variants! (#169)",NA
dbplyr,1,207,207,FALSE,`na_if()` is correct translated to `NULLIF()` (rather than `NULL_IF`) (#211).,NA
dbplyr,1,208,208,FALSE,"`n_distinct()` translation throws an error when given more than one argument. (#101, #133).",NA
dbplyr,1,209,209,FALSE,"New default translations for `paste()`, `paste0()`, and the hyperbolic functions (these previously were only available for ODBC databases).",NA
dbplyr,1,210,210,FALSE,"Corrected translations of `pmin()` and `pmax()` to `LEAST()` and `GREATEST()` for ANSI compliant databases (#118), to `MIN()` and `MAX()` for SQLite, and to an error for SQL server.",NA
dbplyr,1,211,211,FALSE,New translation for `switch()` to the simple form of `CASE WHEN` (#192).,NA
dbplyr,1,212,212,FALSE,"SQL simulation has been overhauled. It now works reliably, is better documented, and always uses ANSI escaping (i.e. `` ` `` for field names and `'` for strings).",NA
dbplyr,1,213,213,FALSE,"`tbl_lazy()` now actually puts a `dbplyr::src` in the `$src` field. This shouldn't affect any downstream code unless you were previously working around this weird difference between `tbl_lazy` and `tbl_sql` classes. It also includes the `src` class in its class, and when printed, shows the generated SQL (#111).",NA
dbplyr,1,214,214,FALSE,MySQL/MariaDB,NA
dbplyr,2,214,215,FALSE,"* Translations also applied to connections via the odbc package (@colearendt, #238)",MySQL/MariaDB
dbplyr,2,214,216,FALSE,"* Basic support for regular expressions via `str_detect()` and\ `str_replace_all()` (@colearendt, #168).",MySQL/MariaDB
dbplyr,2,214,217,FALSE,"* Improved translation for `as.logical(x)` to `IF(x, TRUE, FALSE)`.",MySQL/MariaDB
dbplyr,1,218,218,FALSE,Oracle,NA
dbplyr,2,218,219,FALSE,"* New custom translation for `paste()` and `paste0()` (@cderv, #221)",Oracle
dbplyr,1,220,220,FALSE,Postgres,NA
dbplyr,2,220,221,FALSE,"* Basic support for regular expressions via `str_detect()` and\ `str_replace_all()` (@colearendt, #168).",Postgres
dbplyr,1,222,222,FALSE,SQLite,NA
dbplyr,2,222,223,FALSE,"* `explain()` translation now generates `EXPLAIN QUERY PLAN` which generates a higher-level, more human friendly explanation.",SQLite
dbplyr,1,224,224,FALSE,SQL server,NA
dbplyr,2,224,225,FALSE,* Improved translation for `as.logical(x)` to `CAST(x as BIT)` (#250).,SQL server
dbplyr,2,224,226,FALSE,"* Translates `paste()`, `paste0()`, and `str_c()` to `+`.",SQL server
dbplyr,2,224,227,FALSE,* `copy_to()` method applies temporary table name transformation earlier so that you can now overwrite temporary tables (#258).,SQL server
dbplyr,2,224,228,FALSE,* `db_write_table()` method uses correct argument name for passing along field types (#251).,SQL server
dbplyr,1,229,229,FALSE,Aggregation functions only warn once per session about the use of `na.rm = TRUE` (#216).,NA
dbplyr,1,230,230,FALSE,"table names generated by `random_table_name()` have the prefix ""dbplyr\_"", which makes it easier to find them programmatically (@mattle24, #111)",NA
dbplyr,1,231,231,FALSE,Functions that are only available in a windowed (`mutate()`) query now throw an error when called in a aggregate (`summarise()`) query (#129),NA
dbplyr,1,232,232,FALSE,"`arrange()` understands the `.by_group` argument, making it possible sort by groups if desired. The default is `FALSE` (#115)",NA
dbplyr,1,233,233,FALSE,"`distinct()` now handles computed variables like `distinct(df, y = x + y)` (#154).",NA
dbplyr,1,234,234,FALSE,"`escape()`, `sql_expr()` and `build_sql()` no longer accept `con = NULL` as a shortcut for `con = simulate_dbi()`. This made it too easy to forget to pass `con` along, introducing extremely subtle escaping bugs. `win_over()` gains a `con` argument for the same reason.",NA
dbplyr,1,235,235,FALSE,New `escape_ansi()` always uses ANSI SQL 92 standard escaping (for use in examples and documentation).,NA
dbplyr,1,236,236,FALSE,"`mutate(df, x = NULL)` drops `x` from the output, just like when working with local data frames (#194).",NA
dbplyr,1,237,237,FALSE,"`partial_eval()` processes inlined functions (including rlang lambda functions). This makes dbplyr work with more forms of scoped verbs like `df %>% summarise_all(~ mean(.))`, `df %>% summarise_all(list(mean))` (#134).",NA
dbplyr,1,238,238,FALSE,"`sql_aggregate()` now takes an optional argument `f_r` for passing to `check_na_rm()`. This allows the warning to show the R function name rather than the SQL function name (@sverchkov, #153).",NA
dbplyr,1,239,239,FALSE,`sql_infix()` gains a `pad` argument for the rare operator that doesn't need to be surrounded by spaces.,NA
dbplyr,1,240,240,FALSE,"`sql_prefix()` no longer turns SQL functions into uppercase, allowing for correct translation of case-sensitive SQL functions (#181, @mtoto).",NA
dbplyr,1,241,241,FALSE,`summarise()` gives a clear error message if you refer to a variable created in that same `summarise()` (#114).,NA
dbplyr,1,242,242,FALSE,New `sql_call2()` which is to `rlang::call2()` as `sql_expr()` is to `rlang::expr()`.,NA
dbplyr,1,243,243,FALSE,`show_query()` and `explain()` use `cat()` rather than message.,NA
dbplyr,1,244,244,FALSE,"`union()`, `union_all()`, `setdiff()` and `intersect()` do a better job of matching columns across backends (#183).",NA
dbplyr,1,246,246,FALSE,"Calls of the form `dplyr::foo()` are now evaluated in the database, rather than locally (#197).",NA
dbplyr,1,247,247,FALSE,`vars` argument to `tbl_sql()` has been formally deprecated; it hasn't actually done anything for a while (#3254).,NA
dbplyr,1,248,248,FALSE,"`src` and `tbl` objects now include a class generated from the class of the underlying connection object. This makes it possible for dplyr backends to implement different behaviour at the dplyr level, when needed. (#2293)",NA
dbplyr,1,249,249,FALSE,"`x %in% y` is now translated to `FALSE` if `y` is empty (@mgirlich, #160).",NA
dbplyr,1,250,250,FALSE,New `as.integer64(x)` translation to `CAST(x AS BIGINT)` (#3305),NA
dbplyr,1,251,251,FALSE,"`case_when` now translates with a ELSE clause if a formula of the form `TRUE~<RHS>` is provided . (@cderv, #112)",NA
dbplyr,1,252,252,FALSE,`cummean()` now generates `AVG()` not `MEAN()` (#157),NA
dbplyr,1,253,253,FALSE,`str_detect()` now uses correct parameter order (#3397),NA
dbplyr,1,254,254,FALSE,MS SQL,NA
dbplyr,2,254,255,FALSE,* Cumulative summary functions now work (#157),MS SQL
dbplyr,2,254,256,FALSE,"* `ifelse()` uses `CASE WHEN` instead of `IIF`; this allows more complex operations, such as `%in%`, to work properly (#93)",MS SQL
dbplyr,1,257,257,FALSE,Oracle,NA
dbplyr,2,257,258,FALSE,* Custom `db_drop_table()` now only drops tables if they exist (#3306),Oracle
dbplyr,2,257,259,FALSE,* Custom `setdiff()` translation (#3493),Oracle
dbplyr,2,257,260,FALSE,* Custom `db_explain()` translation (#3471),Oracle
dbplyr,1,261,261,FALSE,SQLite,NA
dbplyr,2,261,262,FALSE,"* Correct translation for `as.numeric()`/`as.double()` (@chris-park, #171).",SQLite
dbplyr,1,263,263,FALSE,Redshift,NA
dbplyr,2,263,264,FALSE,* `substr()` translation improved (#3339),Redshift
dbplyr,1,265,265,FALSE,"`copy_to()` will only remove existing table when `overwrite = TRUE` and the table already exists, eliminating a confusing ""NOTICE"" from PostgreSQL (#3197).",NA
dbplyr,1,266,266,FALSE,`partial_eval()` handles unevaluated formulas (#184).,NA
dbplyr,1,267,267,FALSE,`pull.tbl_sql()` now extracts correctly from grouped tables (#3562).,NA
dbplyr,1,268,268,FALSE,"`sql_render.op()` now correctly forwards the `con` argument (@kevinykuo, #73).",NA
dbplyr,1,271,271,FALSE,New translations for,NA
dbplyr,2,271,272,FALSE,* MS Access (#2946) (@DavisVaughan),New translations for
dbplyr,2,271,273,FALSE,"* Oracle, via odbc or ROracle (#2928, #2732, @edgararuiz)",New translations for
dbplyr,2,271,274,FALSE,* Teradata.,New translations for
dbplyr,2,271,275,FALSE,* Redshift.,New translations for
dbplyr,1,276,276,FALSE,dbplyr now supplies appropriate translations for the RMariaDB and RPostgres packages (#3154). We generally recommend using these packages in favour of the older RMySQL and RPostgreSQL packages as they are fully DBI compliant and tested with DBItest.,NA
dbplyr,1,277,277,FALSE,"`copy_to()` can now ""copy"" tbl_sql in the same src, providing another way to cache a query into a temporary table (#3064). You can also `copy_to` tbl_sqls from another source, and `copy_to()` will automatically collect then copy.",NA
dbplyr,1,278,278,FALSE,"Initial support for stringr functions: `str_length()`, `str_to_upper()`, `str_to_lower()`, `str_replace_all()`, `str_detect()`, `str_trim()`. Regular expression support varies from database to database, but most simple regular expressions should be ok.",NA
dbplyr,1,279,279,FALSE,`db_compute()` gains an `analyze` argument to match `db_copy_to()`.,NA
dbplyr,1,280,280,FALSE,"New `remote_name()`, `remote_con()`, `remote_src()`, `remote_query()` and `remote_query_plan()` provide a standard API for get metadata about a remote tbl (#3130, #2923, #2824).",NA
dbplyr,1,281,281,FALSE,New `sql_expr()` is a more convenient building block for low-level SQL translation (#3169).,NA
dbplyr,1,282,282,FALSE,"New `sql_aggregate()` and `win_aggregate()` for generating SQL and windowed SQL functions for aggregates. These take one argument, `x`, and warn if `na.rm` is not `TRUE` (#3155). `win_recycled()` is equivalent to `win_aggregate()` and has been soft-deprecated.",NA
dbplyr,1,283,283,FALSE,`db_write_table` now needs to return the table name,NA
dbplyr,1,284,284,FALSE,Multiple `head()` calls in a row now collapse to a single call. This avoids a printing problem with MS SQL (#3084).,NA
dbplyr,1,285,285,FALSE,`escape()` now works with integer64 values from the bit64 package (#3230),NA
dbplyr,1,286,286,FALSE,"`if`, `ifelse()`, and `if_else()` now correctly scope the false condition so that it only applies to non-NULL conditions (#3157)",NA
dbplyr,1,287,287,FALSE,"`ident()` and `ident_q()` handle 0-length inputs better, and should be easier to use with S3 (#3212)",NA
dbplyr,1,288,288,FALSE,"`in_schema()` should now work in more places, particularly in `copy_to()` (#3013, @baileych)",NA
dbplyr,1,289,289,FALSE,SQL generation for joins no longer gets stuck in a endless loop if you request an empty suffix (#3220).,NA
dbplyr,1,290,290,FALSE,`mutate()` has better logic for splitting a single mutate into multiple subqueries (#3095).,NA
dbplyr,1,291,291,FALSE,"Improved `paste()` and `paste0()` support in MySQL, PostgreSQL (#3168), and RSQLite (#3176). MySQL and PostgreSQL gain support for `str_flatten()` which behaves like `paste(x, collapse = ""-"")` (but for technical reasons can't be implemented as a straightforward translation of `paste()`).",NA
dbplyr,1,292,292,FALSE,`same_src.tbl_sql()` now performs correct comparison instead of always returning `TRUE`. This means that `copy = TRUE` once again allows you to perform cross-database joins (#3002).,NA
dbplyr,1,293,293,FALSE,"`select()` queries no longer alias column names unnecessarily (#2968, @DavisVaughan).",NA
dbplyr,1,294,294,FALSE,"`select()` and `rename()` are now powered by tidyselect, fixing a few renaming bugs (#3132, #2943, #2860).",NA
dbplyr,1,295,295,FALSE,`summarise()` once again performs partial evaluation before database submission (#3148).,NA
dbplyr,1,296,296,FALSE,`test_src()` makes it easier to access a single test source.,NA
dbplyr,1,297,297,FALSE,MS SQL,NA
dbplyr,2,297,298,FALSE,* Better support for temporary tables (@Hong-Revo),MS SQL
dbplyr,2,297,299,FALSE,"* Different translations for filter/mutate contexts for: `NULL` evaluation (`is.na()`, `is.null()`), logical operators (`!`, `&`, `&&`, `|`, `||`), and comparison operators (`==`, `!=`, `<`, `>`, `>=`, `<=`)",MS SQL
dbplyr,1,300,300,FALSE,MySQL: `copy_to()` (via `db_write_table()`) correctly translates logical variables to integers (#3151).,NA
dbplyr,1,301,301,FALSE,odbc: improved `n()` translation in windowed context.,NA
dbplyr,1,302,302,FALSE,SQLite: improved `na_if` translation (@cwarden),NA
dbplyr,1,303,303,FALSE,PostgreSQL: translation for `grepl()` added (@zozlak),NA
dbplyr,1,304,304,FALSE,"Oracle: changed VARVHAR to VARCHAR2 datatype (@washcycle, #66)",NA
dbplyr,1,305,305,FALSE,`full_join()` over non-overlapping columns `by = character()` translated to `CROSS JOIN` (#2924).,NA
dbplyr,1,306,306,FALSE,"`case_when()` now translates to SQL ""CASE WHEN"" (#2894)",NA
dbplyr,1,307,307,FALSE,`x %in% c(1)` now generates the same SQL as `x %in% 1` (#2898).,NA
dbplyr,1,308,308,FALSE,"New `window_order()` and `window_frame()` give you finer control over the window functions that dplyr creates (#2874, #2593).",NA
dbplyr,1,309,309,FALSE,Added SQL translations for Oracle (@edgararuiz).,NA
dbplyr,1,310,310,FALSE,`x %in% c(1)` now generates the same SQL as `x %in% 1` (#2898).,NA
dbplyr,1,311,311,FALSE,"`head(tbl, 0)` is now supported (#2863).",NA
dbplyr,1,312,312,FALSE,`select()`ing zero columns gives a more information error message (#2863).,NA
dbplyr,1,313,313,FALSE,"Variables created in a join are now disambiguated against other variables in the same table, not just variables in the other table (#2823).",NA
dbplyr,1,314,314,FALSE,PostgreSQL gains a better translation for `round()` (#60).,NA
dbplyr,1,315,315,FALSE,"Added custom `db_analyze_table()` for MS SQL, Oracle, Hive and Impala (@edgararuiz)",NA
dbplyr,1,316,316,FALSE,Added support for `sd()` for aggregate and window functions (#2887) (@edgararuiz),NA
dbplyr,1,317,317,FALSE,"You can now use the magrittr pipe within expressions, e.g. `mutate(mtcars, cyl %>% as.character())`.",NA
dbplyr,1,318,318,FALSE,"If a translation was supplied for a summarise function, but not for the equivalent windowed variant, the expression would be translated to `NULL` with a warning. Now `sql_variant()` checks that all aggregate functions have matching window functions so that correct translations or clean errors will be generated (#2887)",NA
dbplyr,1,319,319,FALSE,"`tbl()` and `copy_to()` now work directly with DBI connections (#2423, #2576), so there is no longer a need to generate a dplyr src.",NA
dbplyr,1,319,320,TRUE,"```
library(dplyr)

con <- DBI::dbConnect(RSQLite::SQLite(), "":memory:"")
copy_to(con, mtcars)

mtcars2 <- tbl(con, ""mtcars"")
mtcars2
```",NA
dbplyr,1,320,321,FALSE,`glimpse()` now works with remote tables (#2665),NA
dbplyr,1,321,322,FALSE,"dplyr has gained a basic SQL optimiser, which collapses certain nested SELECT queries into a single query (#1979). This will improve query execution performance for databases with less sophisticated query optimisers, and fixes certain problems with ordering and limits in subqueries (#1979). A big thanks goes to @hhoeflin for figuring out this optimisation.",NA
dbplyr,1,322,323,FALSE,"`compute()` and `collapse()` now preserve the ""ordering"" of rows. This only affects the computation of window functions, as the rest of SQL does not care about row order (#2281).",NA
dbplyr,1,323,324,FALSE,`copy_to()` gains an `overwrite` argument which allows you to overwrite an existing table. Use with care! (#2296),NA
dbplyr,1,324,325,FALSE,"New `in_schema()` function makes it easy to refer to tables in schema: `in_schema(""my_schema_name"", ""my_table_name"")`.",NA
dbplyr,1,325,326,FALSE,`query()` is no longer exported. It hasn't been useful for a while,NA
dbplyr,1,326,327,FALSE,Partial evaluation occurs immediately when you execute a verb (like `filter()` or `mutate()`) rather than happening when the query is executed (#2370).,NA
dbplyr,1,327,328,FALSE,"`mutate.tbl_sql()` will now generate as many subqueries as necessary so that you can refer to variables that you just created (like in mutate with regular dataframes) (#2481, #2483).",NA
dbplyr,1,328,329,FALSE,SQL joins have been improved:,NA
dbplyr,2,328,330,FALSE,"* SQL joins always use the `ON ...` syntax, avoiding `USING ...` even for natural joins. Improved handling of tables with columns of the same name (#1997, @javierluraschi). They now generate SQL more similar to what you'd write by hand, eliminating a layer or two of subqueries (#2333)",SQL joins have been improved:
dbplyr,2,328,331,FALSE,"* \[API\] They now follow the same rules for including duplicated key variables that the data frame methods do, namely that key variables are only kept from `x`, and never from `y` (#2410)",SQL joins have been improved:
dbplyr,2,328,332,FALSE,"* \[API\] The `sql_join()` generic now gains a `vars` argument which lists the variables taken from the left and right sides of the join. If you have a custom `sql_join()` method, you'll need to update how your code generates joins, following the template in `sql_join.generic()`.",SQL joins have been improved:
dbplyr,2,328,333,FALSE,* `full_join()` throws a clear error when you attempt to use it with a MySQL backend (#2045),SQL joins have been improved:
dbplyr,2,328,334,FALSE,"* `right_join()` and `full_join()` now return results consistent with local data frame sources when there are records in the right table with no match in the left table. `right_join()` returns values of `by` columns from the right table. `full_join()` returns coalesced values of `by` columns from the left and right tables (#2578, @ianmcook)",SQL joins have been improved:
dbplyr,1,334,335,FALSE,`group_by()` can now perform an inline mutate for database backends (#2422).,NA
dbplyr,1,335,336,FALSE,"The SQL generation set operations (`intersect()`, `setdiff()`, `union()`, and `union_all()`) have been considerably improved. By default, the component SELECT are surrounded with parentheses, except on SQLite. The SQLite backend will now throw an error if you attempt a set operation on a query that contains a LIMIT, as that is not supported in SQLite (#2270). All set operations match column names across inputs, filling in non-matching variables with NULL (#2556).",NA
dbplyr,1,336,337,FALSE,`rename()` and `group_by()` now combine correctly (#1962),NA
dbplyr,1,337,338,FALSE,`tbl_lazy()` and `lazy_tbl()` have been exported. These help you test generated SQL with out an active database connection.,NA
dbplyr,1,338,339,FALSE,`ungroup()` correctly resets grouping variables (#2704).,NA
dbplyr,1,339,340,FALSE,New `as.sql()` safely coerces an input to SQL.,NA
dbplyr,1,340,341,FALSE,"More translators for `as.character()`, `as.integer()` and `as.double()` (#2775).",NA
dbplyr,1,341,342,FALSE,New `ident_q()` makes it possible to specifier identifiers that do not need to be quoted.,NA
dbplyr,1,342,343,FALSE,Translation of inline scalars:,NA
dbplyr,2,342,344,FALSE,"* Logical values are now translated differently depending on the backend. The default is to use ""true"" and ""false"" which is the SQL-99 standard, but not widely support. SQLite translates to ""0"" and ""1"" (#2052).",Translation of inline scalars:
dbplyr,2,342,345,FALSE,* `Inf` and `-Inf` are correctly escaped,Translation of inline scalars:
dbplyr,2,342,346,FALSE,* Better test for whether or not a double is similar to an integer and hence needs a trailing 0.0 added (#2004).,Translation of inline scalars:
dbplyr,2,342,347,FALSE,* Quoting defaults to `DBI::dbEscapeString()` and `DBI::dbQuoteIdentifier()` respectively.,Translation of inline scalars:
dbplyr,1,347,348,FALSE,`::` and `:::` are handled correctly (#2321),NA
dbplyr,1,348,349,FALSE,`x %in% 1` is now correctly translated to `x IN (1)` (#511).,NA
dbplyr,1,349,350,FALSE,`ifelse()` and `if_else()` use correct argument names in SQL translation (#2225).,NA
dbplyr,1,350,351,FALSE,"`ident()` now returns an object with class `c(""ident"", ""character"")`. It no longer contains ""sql"" to indicate that this is not already escaped.",NA
dbplyr,1,351,352,FALSE,`is.na()` and `is.null()` gain extra parens in SQL translation to preserve correct precedence (#2302).,NA
dbplyr,1,352,353,FALSE,"\[API\] `log(x, b)` is now correctly translated to the SQL `log(b, x)` (#2288). SQLite does not support the 2-argument log function so it is translated to `log(x) / log(b)`.",NA
dbplyr,1,353,354,FALSE,"`nth(x, i)` is now correctly translated to `nth_value(x, i)`.",NA
dbplyr,1,354,355,FALSE,`n_distinct()` now accepts multiple variables (#2148).,NA
dbplyr,1,355,356,FALSE,"\[API\] `substr()` is now translated to SQL, correcting for the difference in the third argument. In R, it's the position of the last character, in SQL it's the length of the string (#2536).",NA
dbplyr,1,356,357,FALSE,`win_over()` escapes expression using current database rules.,NA
dbplyr,1,357,358,FALSE,`copy_to()` now uses `db_write_table()` instead of `db_create_table()` and `db_insert_into()`. `db_write_table.DBIConnection()` uses `dbWriteTable()`.,NA
dbplyr,1,358,359,FALSE,"New `db_copy_to()`, `db_compute()` and `db_collect()` allow backends to override the entire database process behind `copy_to()`, `compute()` and `collect()`. `db_sql_render()` allow additional control over the SQL rendering process.",NA
dbplyr,1,359,360,FALSE,All generics whose behaviour can vary from database to database now provide a DBIConnection method. That means that you can easily scan the NAMESPACE to see the extension points.,NA
dbplyr,1,360,361,FALSE,`sql_escape_logical()` allows you to control the translation of literal logicals (#2614).,NA
dbplyr,1,361,362,FALSE,"`src_desc()` has been replaced by `db_desc()` and now dispatches on the connection, eliminating the last method that required dispatch on the class of the src.",NA
dbplyr,1,362,363,FALSE,"`win_over()`, `win_rank()`, `win_recycled()`, `win_cumulative()`, `win_current_group()` and `win_current_order()` are now exported. This should make it easier to provide customised SQL for window functions (#2051, #2126).",NA
dbplyr,1,363,364,FALSE,SQL translation for Microsoft SQL Server (@edgararuiz),NA
dbplyr,1,364,365,FALSE,SQL translation for Apache Hive (@edgararuiz),NA
dbplyr,1,365,366,FALSE,SQL translation for Apache Impala (@edgararuiz),NA
dbplyr,1,366,367,FALSE,`collect()` once again defaults to return all rows in the data (#1968). This makes it behave the same as `as.data.frame()` and `as_tibble()`.,NA
dbplyr,1,367,368,FALSE,`collect()` only regroups by variables present in the data (#2156),NA
dbplyr,1,368,369,FALSE,"`collect()` will automatically LIMIT the result to the `n`, the number of rows requested. This will provide the query planner with more information that it may be able to use to improve execution time (#2083).",NA
dbplyr,1,369,370,FALSE,`common_by()` gets a better error message for unexpected inputs (#2091),NA
dbplyr,1,370,371,FALSE,"`copy_to()` no longer checks that the table doesn't exist before creation, instead preferring to fall back on the database for error messages. This should reduce both false positives and false negative (#1470)",NA
dbplyr,1,371,372,FALSE,"`copy_to()` now succeeds for MySQL if a character column contains `NA` (#1975, #2256, #2263, #2381, @demorenoc, @eduardgrebe).",NA
dbplyr,1,372,373,FALSE,`copy_to()` now returns it's output invisibly (since you're often just calling for the side-effect).,NA
dbplyr,1,373,374,FALSE,`distinct()` reports improved variable information for SQL backends. This means that it is more likely to work in the middle of a pipeline (#2359).,NA
dbplyr,1,374,375,FALSE,Ungrouped `do()` on database backends now collects all data locally first (#2392).,NA
dbplyr,1,375,376,FALSE,Call `dbFetch()` instead of the deprecated `fetch()` (#2134). Use `DBI::dbExecute()` for non-query SQL commands (#1912),NA
dbplyr,1,376,377,FALSE,"`explain()` and `show_query()` now invisibly return the first argument, making them easier to use inside a pipeline.",NA
dbplyr,1,377,378,FALSE,"`print.tbl_sql()` displays ordering (#2287) and prints table name, if known.",NA
dbplyr,1,378,379,FALSE,"`print(df, n = Inf)` and `head(df, n = Inf)` now work with remote tables (#2580).",NA
dbplyr,1,379,380,FALSE,`db_desc()` and `sql_translate_env()` get defaults for DBIConnection.,NA
dbplyr,1,380,381,FALSE,"Formatting now works by overriding the `tbl_sum()` generic instead of `print()`. This means that the output is more consistent with tibble, and that `format()` is now supported also for SQL sources (tidyverse/dbplyr#14).",NA
dbplyr,1,381,382,FALSE,"\[API\] The signature of `op_base` has changed to `op_base(x, vars, class)`",NA
dbplyr,1,382,383,FALSE,\[API\] `translate_sql()` and `partial_eval()` have been refined:,NA
dbplyr,2,382,384,FALSE,* `translate_sql()` no longer takes a vars argument; instead call `partial_eval()` yourself.,\[API\] `translate_sql()` and `partial_eval()` have been refined:
dbplyr,2,382,385,FALSE,"* Because it no longer needs the environment `translate_sql()_` now works with a list of dots, rather than a `lazy_dots`.",\[API\] `translate_sql()` and `partial_eval()` have been refined:
dbplyr,2,382,386,FALSE,* `partial_eval()` now takes a character vector of variable names rather than a tbl.,\[API\] `translate_sql()` and `partial_eval()` have been refined:
dbplyr,2,382,387,FALSE,* This leads to a simplification of the `op` data structure: dots is now a list of expressions rather than a `lazy_dots`.,\[API\] `translate_sql()` and `partial_eval()` have been refined:
dbplyr,1,387,388,FALSE,\[API\] `op_vars()` now returns a list of quoted expressions. This enables escaping to happen at the correct time (i.e. when the connection is known).,NA
dplyr,1,1,1,FALSE,Joins now reference the correct column in `y` when a type error is thrown while joining on two columns with different names (#6465).,NA
dplyr,1,2,2,FALSE,Warnings are now enriched with contextualised information in `summarise()` and `filter()` just like they have been in `mutate()` and `arrange()`.,NA
dplyr,1,3,3,FALSE,Using 1 column matrices in `filter()` is now deprecated (#6091).,NA
dplyr,1,4,4,FALSE,"Warnings emitted inside `mutate()` and variants are now collected and stashed away. Run the new `last_dplyr_warnings()` function to see the warnings emitted within dplyr verbs during the last top-level command. This fixes performance issues when thousands of warnings are emitted with rowwise and grouped data frames (#6005, #6236).",NA
dplyr,1,5,5,FALSE,`group_by_prepare()` loses the `caller_env` argument. It was rarely used and it is no longer needed (#6444).,NA
dplyr,1,6,6,FALSE,"`nth()`, `first()`, `last()`, and `with_order()` now sort character `order_by` vectors in the C locale. Using character vectors for `order_by` is rare, so we expect this to have little practical impact (#6451).",NA
dplyr,1,7,7,FALSE,`slice()`ing with a 1-column matrix is now deprecated.,NA
dplyr,1,8,8,FALSE,"`row_number()`, `min_rank()`, `dense_rank()`, `ntile()`, `cume_dist()`, and `percent_rank()` are now powered by vctrs, meaning that they are faster and work for more types. You can now also rank by multiple columns at once by supplying a data frame to these functions (#6428).",NA
dplyr,1,9,9,FALSE,`ntile()` now requires `n` to be a single positive integer.,NA
dplyr,1,10,10,FALSE,"`transmute()` is superseded in favour of `mutate(.keep = ""none"")`",NA
dplyr,1,11,11,FALSE,"`recode()` is superseded in favor of `case_match()`. `recode_factor()` is superseded as well, but we don't have a direct replacement for it yet. We plan to add one to forcats, but in the meantime you can often use a pattern of `case_match(.ptype = factor(levels = ))` instead (#6433).",NA
dplyr,1,12,12,FALSE,"`across()` has gained a new experimental `.unpack` argument to optionally unpack (as in, `tidyr::unpack()`) data frames returned by functions in `.fns` (#6360).",NA
dplyr,1,13,13,FALSE,`cur_group()` now works correctly with zero row grouped data frames (#6304).,NA
dplyr,1,14,14,FALSE,"Error messages in `group_by()`, `distinct()`, `tally()`, and `count()` are now more relevant (#6139).",NA
dplyr,1,15,15,FALSE,`slice_sample()` now accepts negative `n` and `prop` values (#6402).,NA
dplyr,1,16,16,FALSE,`slice_*()` now requires `n` to be an integer.,NA
dplyr,1,17,17,FALSE,"New `case_match()` function that is a ""vectorised switch"" variant of `case_when()` that matches on values rather than logical expressions. It is like a SQL ""simple"" `CASE WHEN` statement, whereas `case_when()` is like a SQL ""searched"" `CASE WHEN` statement (#6328).",NA
dplyr,1,18,18,FALSE,"`storms` has been updated to include 2021 data and some missing storms that were omitted due to an error (@steveharoz, #6320).",NA
dplyr,1,19,19,FALSE,`progress_estimate()` is deprecated for all uses (#6387).,NA
dplyr,1,20,20,FALSE,"`funs()`, deprecated in 0.8.0, is now defunct (#6387).",NA
dplyr,1,21,21,FALSE,"`select_vars()`, `rename_vars()`, `select_var()` and `current_var()`, deprecated in 0.8.4, are now defunct (#6387).",NA
dplyr,1,22,22,FALSE,"`bench_tbls()`, `compare_tbls()`, `compare_tbls2()`, `eval_tbls()`, and `eval_tbl()`, deprecated in 1.0.0, are now defunct (#6387).",NA
dplyr,1,23,23,FALSE,"`location()` and `changes()`, deprecated in 1.0.0, are now defunct (#6387).",NA
dplyr,1,24,24,FALSE,All other functions deprecated in 1.0.0 and earlier now warn every time you use them (#6387). They are likely to be made defunct in the next major version (but not before mid 2024).,NA
dplyr,1,25,25,FALSE,"`nth()`, `first()`, and `last()` have gained an `na_rm` argument since they are summary functions (#6242, with contributions from @tnederlof).",NA
dplyr,1,26,26,FALSE,`slice_*()` generics now perform argument validation. This should make methods more consistent and simpler to implement (#6361).,NA
dplyr,1,27,27,FALSE,New `symdiff()` function computes the symmetric difference (#4811).,NA
dplyr,1,28,28,FALSE,`slice_min()` and `slice_max()` can `order_by` multiple variables if you supply them as a data.frame or tibble (#6176).,NA
dplyr,1,29,29,FALSE,"`slice_min()` and `slice_max()` now consistently include missing values in the result if necessary (i.e. there aren't enough non-missing values to reach the `n` or `prop` you have selected). If you don't want missing values to be included at all, set `na_rm = TRUE` (#6177).",NA
dplyr,1,30,30,FALSE,`relocate()` now works correctly with empty data frames and when `.before` or `.after` result in empty selections (#6167).,NA
dplyr,1,31,31,FALSE,`relocate()` no longer drops attributes of bare data frames (#6341).,NA
dplyr,1,32,32,FALSE,`across()` used without functions inside a rowwise-data frame no longer generates an invalid data frame (#6264).,NA
dplyr,1,33,33,FALSE,"New `consecutive_id()` for creating groups based on contiguous runs of the same values, like `data.table::rleid()` (#1534).",NA
dplyr,1,34,34,FALSE,`nest_join()` now preserves the type of `y` (#6295).,NA
dplyr,1,35,35,FALSE,"Passing `...` to `across()` is now deprecated because the evaluation timing of `...` is ambiguous. Now instead of (e.g.) `across(a:b, mean, na.rm = TRUE)` you should write `across(a:b, ~ mean(.x, na.rm = TRUE))` (#6073).",NA
dplyr,1,36,36,FALSE,Rowwise-`mutate()` behaves a little better with 0-row inputs (#6303).,NA
dplyr,1,37,37,FALSE,A rowwise `mutate()` now automatically unlists list-columns containing length 1 vectors (#6302).,NA
dplyr,1,38,38,FALSE,`arrange()` now correctly ignores `NULL` inputs (#6193).,NA
dplyr,1,39,39,FALSE,`*_join()` now error if you supply them with additional arguments that aren't used (#6228).,NA
dplyr,1,40,40,FALSE,`df |> arrange(mydesc::desc(x))` works correctly when the mydesc re-exports `dplyr::desc()` (#6231).,NA
dplyr,1,41,41,FALSE,"`union_all()`, like `union()`, now requires that data frames be compatible: i.e. they have the same columns, and the columns have compatible types.",NA
dplyr,1,42,42,FALSE,`setequal()` ignores differences between freely coercible types (e.g. integer and double) (#6114) and ignores duplicated rows (#6057).,NA
dplyr,1,43,43,FALSE,"`all_equal()` is formally deprecated. We've advised against it for some time, and we explicitly recommend you use `all.equal()`, manually reordering the rows and columns (#6324).",NA
dplyr,1,44,44,FALSE,"`distinct()` returns columns ordered the way you request, not the same as the input data (#6156).",NA
dplyr,1,45,45,FALSE,"The `.keep`, `.before`, and `.after` arguments to `mutate()` are no longer experimental.",NA
dplyr,1,46,46,FALSE,The `rows_*()` family of functions are no longer experimental.,NA
dplyr,1,47,47,FALSE,`desc()` gives a useful error message if you give it a non-vector (#6028).,NA
dplyr,1,48,48,FALSE,"`slice_sample()` returns a data frame or group with the same number of rows as the input when `replace = FALSE` and `n` is larger than the number of rows or `prop` is larger than 1. This reverts a change made in 1.0.8, returning to the behavior of 1.0.7 (#6185)",NA
dplyr,1,49,49,FALSE,"`slice()` helpers again produce output equivalent to `slice(.data, 0)` when the `n` or `prop` argument is 0, fixing a bug introduced in the previous version (@eutwt, #6184).",NA
dplyr,1,50,50,FALSE,Fixed an issue with latest rlang that caused internal tools (such as `mask$eval_all_summarise()`) to be mentioned in error messages (#6308).,NA
dplyr,1,51,51,FALSE,`distinct()` now retains attributes of bare data frames (#6318).,NA
dplyr,1,52,52,FALSE,"dplyr no longer provides `count()` and `tally()` methods for `tbl_sql`. These methods have been accidentally overriding the `tbl_lazy` methods that dbplyr provides, which has resulted in issues with the grouping structure of the output (#6338, tidyverse/dbplyr#940).",NA
dplyr,1,53,53,FALSE,"`relocate()` now retains the last name change when a single column is renamed multiple times while it is being moved. This better matches the behavior of `rename()` (#6209, with help from @eutwt).",NA
dplyr,1,54,54,FALSE,`na_if()` has been rewritten to utilize vctrs. This comes with the following improvements (#6329):,NA
dplyr,2,54,55,FALSE,"* It now casts `y` to the type of `x` before comparing them, which makes it clearer that this function is type and size stable on `x`. In particular, this means that you can no longer do `na_if(<tibble>, 0)`, which previously accidentally allowed you to replace any instance of `0` across every column of the tibble with `NA`. `na_if()` was never intended to work this way, and this is considered off-label usage.",`na_if()` has been rewritten to utilize vctrs. This comes with the following improvements (#6329):
dplyr,2,54,56,FALSE,"* You can now replace `NaN` values in `x` with `NA` through `na_if(x, NaN)`.",`na_if()` has been rewritten to utilize vctrs. This comes with the following improvements (#6329):
dplyr,1,57,57,FALSE,"`first()`, `last()`, and `nth()` have been rewritten to use vctrs. This comes with the following improvements (#6331):",NA
dplyr,2,57,58,FALSE,"* When used on a data frame, these functions now return a single row rather than a single column. This is more consistent with the vctrs principle that a data frame is generally treated as a vector of rows.","`first()`, `last()`, and `nth()` have been rewritten to use vctrs. This comes with the following improvements (#6331):"
dplyr,2,57,59,FALSE,"* The `default` is no longer ""guessed"", and will always automatically be set to a missing value appropriate for the type of `x`.","`first()`, `last()`, and `nth()` have been rewritten to use vctrs. This comes with the following improvements (#6331):"
dplyr,2,57,60,FALSE,"* Fractional values of `n` are no longer truncated to integers, and will now cause an error. For example, `nth(x, n = 2)` is fine, but `nth(x, n = 2.5)` is now an error.","`first()`, `last()`, and `nth()` have been rewritten to use vctrs. This comes with the following improvements (#6331):"
dplyr,1,61,61,FALSE,"`lag()` and `lead()` now cast `default` to the type of `x`, rather than taking the common type. This ensures that these functions are type stable on `x` (#6330).",NA
dplyr,1,62,62,FALSE,`with_order()` now checks that the size of `order_by` is the same size as `x`.,NA
dplyr,1,63,63,FALSE,`with_order()` now works correctly when data frames are used as the `order_by` value (#6334).,NA
dplyr,1,64,64,FALSE,`coalesce()` now more fully embraces the principles of vctrs (#6265).,NA
dplyr,2,64,65,FALSE,* `.ptype` and `.size` arguments have been added to allow you to explicitly enforce an output type and size.,`coalesce()` now more fully embraces the principles of vctrs (#6265).
dplyr,2,64,66,FALSE,* `NULL` inputs are now discarded up front.,`coalesce()` now more fully embraces the principles of vctrs (#6265).
dplyr,2,64,67,FALSE,"* `coalesce()` no longer iterates over the columns of data frame input. Instead, a row is now only coalesced if it is entirely missing, which is consistent with `vctrs::vec_equal_na()` and greatly simplifies the implementation.",`coalesce()` now more fully embraces the principles of vctrs (#6265).
dplyr,1,68,68,FALSE,"`group_by()` now uses a new algorithm for computing groups. It is often faster than the previous approach (especially when there are many groups), and in most cases there should be no changes. The one exception is with character vectors, see the C locale news bullet below for more details (#4406, #6297).",NA
dplyr,1,69,69,FALSE,"`arrange()` now uses a faster algorithm for sorting character vectors, which is heavily inspired by data.table's `forder()`. See the C locale news bullet below for more details (#4962).",NA
dplyr,1,70,70,FALSE,"`arrange()` and `group_by()` now both default to using the C locale when ordering or grouping character vectors rather than the system locale. This brings *substantial* performance improvements, increases reproducibility across R sessions, makes dplyr more consistent with data.table, and we believe it should affect little existing code. If it does affect your code, you can use `options(dplyr.legacy_locale = TRUE)` to quickly revert to the previous behavior. In general, we instead recommend that you use the new `.locale` argument of `arrange()` when the locale matters. For a full explanation of this change, please read the associated [grouping](https://github.com/tidyverse/tidyups/blob/main/006-dplyr-group-by-ordering.md) and [ordering](https://github.com/tidyverse/tidyups/blob/main/003-dplyr-radix-ordering.md) tidyups.",NA
dplyr,1,71,71,FALSE,"`if_else()` has been rewritten to utilize vctrs. This comes with most of the same benefits as the `case_when()` rewrite. In particular, `if_else()` now takes the common type of `true`, `false`, and `missing` when determining what the output type should be, meaning that you no longer have to be quite as strict about types when supplying values for them (for example, you no longer need to supply typed `NA` values, like `NA_character_`) (#6243).",NA
dplyr,1,72,72,FALSE,`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:,NA
dplyr,2,72,73,FALSE,"* There is a new `.default` argument that is intended to replace usage of `TRUE ~ default_value` as a more explicit and readable way to specify a default value. In the future, we will deprecate the unsafe recycling of the LHS inputs that allows `TRUE ~` to work, so we encourage you to switch over to using `.default` instead.",`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:
dplyr,2,72,74,FALSE,"* The types of the RHS inputs no longer have to match exactly. For example, the following no longer requires you to use `NA_character_` instead of just `NA`.",`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:
dplyr,2,72,75,TRUE,"```
x <- c(""little"", ""unknown"", ""small"", ""missing"", ""large"")

case_when(
  x %in% c(""little"", ""small"") ~ ""one"",
  x %in% c(""big"", ""large"") ~ ""two"",
  x %in% c(""missing"", ""unknown"") ~ NA
)
```",`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:
dplyr,2,72,76,FALSE,"* `case_when()` now supports a larger variety of value types. For example, you can use a data frame to create multiple columns at once.",`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:
dplyr,2,72,77,FALSE,* There are new `.ptype` and `.size` arguments which allow you to enforce a particular output type and size. This allows you to construct a completely type and size stable call to `case_when()`.,`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:
dplyr,2,72,78,FALSE,"* The error thrown when types or lengths were incorrect has been improved (#6261, #6206).",`case_when()` has been rewritten to utilize vctrs (#5106). This comes with a number of useful improvements:
dplyr,1,78,79,FALSE,`tbl_sum()` is no longer reexported from tibble (#6284).,NA
dplyr,1,79,80,FALSE,`slice_sample()` now gives a more informative error when `replace = FALSE` and the number of rows requested in the sample exceeds the number of rows in the data (#6271).,NA
dplyr,1,80,81,FALSE,`frame_data()` is no longer reexported from tibble (#6278).,NA
dplyr,1,81,82,FALSE,`lst_()` is no longer reexported from tibble (#6276).,NA
dplyr,1,82,83,FALSE,`data_frame_()` is no longer reexported from tibble (#6277).,NA
dplyr,1,83,84,FALSE,"`between()` has been rewritten to utilize vctrs. This means that it is no longer restricted to just numeric and date-time vectors. Additionally, `left` and `right` are no longer required to be scalars, they can now also be vectors with the same length as `x`. Finally, `left` and `right` are now cast to the type of `x` before the comparison is made. This last change means that you can no longer make comparisons like `between(<int>, 0, 2.5)`, as `2.5` can't be cast to integer without losing information. We recommend that you convert the `<int>` vector to double before calling `between()` if you require this (#6183, #6260).",NA
dplyr,1,84,85,FALSE,"Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240).",NA
dplyr,2,84,86,FALSE,"* A *join specification* can now be created through `join_by()`. This allows you to specify both the left and right hand side of a join using unquoted column names, such as `join_by(sale_date == commercial_date)`. Join specifications can be supplied to any `*_join()` function as the `by` argument.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,2,84,87,FALSE,* Join specifications allow for various new types of joins:,"Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,3,84,88,FALSE,"- Equi joins: The most common join, specified by `==`. For example, `join_by(sale_date == commercial_date)`.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,3,84,89,FALSE,"- Non-equi joins: For joining on conditions other than equality, specified by `>=`, `>`, `<`, and `<=`. For example, `join_by(sale_date >= commercial_date)` to find every commercial that aired before a particular sale.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,3,84,90,FALSE,"- Rolling joins: For ""rolling"" the closest match forward or backwards when there isn't an exact match, specified by using the rolling helper, `closest()`. For example, `join_by(closest(sale_date >= commercial_date))` to find only the most recent commercial that aired before a particular sale.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,3,84,91,FALSE,"- Overlap joins: For detecting overlaps between sets of columns, specified by using one of the overlap helpers: `between()`, `within()`, or `overlaps()`. For example, `join_by(between(commercial_date, sale_date_lower, sale_date))` to find commercials that aired before a particular sale, as long as they occurred after some lower bound, such as 40 days before the sale was made.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,2,84,91,FALSE,"Note that you cannot use arbitrary expressions in the join conditions, like `join_by(sale_date - 40 >= commercial_date)`. Instead, use `mutate()` to create a new column containing the result of `sale_date - 40` and refer to that by name in `join_by()`.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,2,84,92,FALSE,"* `multiple` is a new argument for controlling what happens when a row in `x` matches multiple rows in `y`. For equi joins and rolling joins, where this is usually surprising, this defaults to signaling a `""warning""`, but still returns all of the matches. For non-equi joins and cross joins, where multiple matches are usually expected, this defaults to returning `""all""` of the matches. You can also return only the `""first""` or `""last""` match, `""any""` of the matches, or you can `""error""`.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,2,84,93,FALSE,"* `keep` now defaults to `NULL` rather than `FALSE`. `NULL` implies `keep = FALSE` for equi-join conditions, but `keep = TRUE` for non-equi join conditions, since you generally want to preserve both sides of a non-equi join.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,2,84,94,FALSE,"* `unmatched` is a new argument for controlling what happens when a row would be dropped because it doesn't have a match. For backwards compatibility, the default is `""drop""`, but you can also choose to `""error""` if dropped rows would be surprising.","Joins have undergone a complete overhaul. The purpose of this overhaul is to enable more flexible join operations, while also providing tools to perform quality control checks directly in the join call. Many of these changes are inspired by data.table's join syntax (#5914, #5661, #5413, #2240)."
dplyr,1,94,95,FALSE,`nest_join()` has gained the `na_matches` argument that all other joins have.,NA
dplyr,1,95,96,FALSE,"New `rows_append()` which works like `rows_insert()` but ignores keys and allows you to insert arbitrary rows with a guarantee that the type of `x` won't change (#6249, thanks to @krlmlr for the implementation and @mgirlich for the idea).",NA
dplyr,1,96,97,FALSE,"The `rows_*()` functions no longer require that the key values in `x` uniquely identify each row. Additionally, `rows_insert()` and `rows_delete()` no longer require that the key values in `y` uniquely identify each row. Relaxing this restriction should make these functions more practically useful for data frames, and alternative backends can enforce this in other ways as needed (i.e. through primary keys) (#5553).",NA
dplyr,1,97,98,FALSE,"`rows_insert()` gained a new `conflict` argument allowing you greater control over rows in `y` with keys that conflict with keys in `x`. A conflict arises if a key in `y` already exists in `x`. By default, a conflict results in an error, but you can now also `""ignore""` these `y` rows. This is very similar to the `ON CONFLICT DO NOTHING` command from SQL (#5588, with helpful additions from @mgirlich and @krlmlr).",NA
dplyr,1,98,99,FALSE,"`rows_update()`, `rows_patch()`, and `rows_delete()` gained a new `unmatched` argument allowing you greater control over rows in `y` with keys that are unmatched by the keys in `x`. By default, an unmatched key results in an error, but you can now also `""ignore""` these `y` rows (#5984, #5699).",NA
dplyr,1,99,100,FALSE,"`rows_delete()` no longer requires that the columns of `y` be a strict subset of `x`. Only the columns specified through `by` will be utilized from `y`, all others will be dropped with a message.",NA
dplyr,1,100,101,FALSE,"The `rows_*()` functions now always retain the column types of `x`. This behavior was documented, but previously wasn't being applied correctly (#6240).",NA
dplyr,1,101,102,FALSE,The `rows_*()` functions now fail elegantly if `y` is a zero column data frame and `by` isn't specified (#6179).,NA
dplyr,1,102,103,FALSE,Better display of error messages thanks to rlang 1.0.0.,NA
dplyr,1,103,104,FALSE,"`mutate(.keep = ""none"")` is no longer identical to `transmute()`. `transmute()` has not been changed, and completely ignores the column ordering of the existing data, instead relying on the ordering of expressions supplied through `...`. `mutate(.keep = ""none"")` has been changed to ensure that pre-existing columns are never moved, which aligns more closely with the other `.keep` options (#6086).",NA
dplyr,1,104,105,FALSE,"`filter()` forbids matrix results (#5973) and warns about data frame results, especially data frames created from `across()` with a hint to use `if_any()` or `if_all()`.",NA
dplyr,1,105,106,FALSE,"`slice()` helpers (`slice_head()`, `slice_tail()`, `slice_min()`, `slice_max()`) now accept negative values for `n` and `prop` (#5961).",NA
dplyr,1,106,107,FALSE,`slice()` now indicates which group produces an error (#5931).,NA
dplyr,1,107,108,FALSE,`cur_data()` and `cur_data_all()` don't simplify list columns in rowwise data frames (#5901).,NA
dplyr,1,108,109,FALSE,dplyr now uses `rlang::check_installed()` to prompt you whether to install required packages that are missing.,NA
dplyr,1,109,110,FALSE,"`storms` data updated to 2020 (@steveharoz, #5899).",NA
dplyr,1,110,111,FALSE,`coalesce()` accepts 1-D arrays (#5557).,NA
dplyr,1,111,112,FALSE,The deprecated `trunc_mat()` is no longer reexported from dplyr (#6141).,NA
dplyr,1,112,113,FALSE,`across()` uses the formula environment when inlining them (#5886).,NA
dplyr,1,113,114,FALSE,`summarise.rowwise_df()` is quiet when the result is ungrouped (#5875).,NA
dplyr,1,114,115,FALSE,`c_across()` and `across()` key deparsing not confused by long calls (#5883).,NA
dplyr,1,115,116,FALSE,`across()` handles named selections (#5207).,NA
dplyr,1,116,117,FALSE,`add_count()` is now generic (#5837).,NA
dplyr,1,117,118,FALSE,`if_any()` and `if_all()` abort when a predicate is mistakingly used as `.cols=` (#5732).,NA
dplyr,1,118,119,FALSE,Multiple calls to `if_any()` and/or `if_all()` in the same expression are now properly disambiguated (#5782).,NA
dplyr,1,119,120,FALSE,`filter()` now inlines `if_any()` and `if_all()` expressions. This greatly improves performance with grouped data frames.,NA
dplyr,1,120,121,FALSE,"Fixed behaviour of `...` in top-level `across()` calls (#5813, #5832).",NA
dplyr,1,121,122,FALSE,`across()` now inlines lambda-formulas. This is slightly more performant and will allow more optimisations in the future.,NA
dplyr,1,122,123,FALSE,"Fixed issue in `bind_rows()` causing lists to be incorrectly transformed as data frames (#5417, #5749).",NA
dplyr,1,123,124,FALSE,`select()` no longer creates duplicate variables when renaming a variable to the same name as a grouping variable (#5841).,NA
dplyr,1,124,125,FALSE,"`dplyr_col_select()` keeps attributes for bare data frames (#5294, #5831).",NA
dplyr,1,125,126,FALSE,Fixed quosure handling in `dplyr::group_by()` that caused issues with extra arguments (tidyverse/lubridate#959).,NA
dplyr,1,126,127,FALSE,"Removed the `name` argument from the `compute()` generic (@ianmcook, #5783).",NA
dplyr,1,127,128,FALSE,row-wise data frames of 0 rows and list columns are supported again (#5804).,NA
dplyr,1,128,129,FALSE,Fixed edge case of `slice_sample()` when `weight_by=` is used and there 0 rows (#5729).,NA
dplyr,1,129,130,FALSE,`across()` can again use columns in functions defined inline (#5734).,NA
dplyr,1,130,131,FALSE,Using testthat 3rd edition.,NA
dplyr,1,131,132,FALSE,Fixed bugs introduced in `across()` in previous version (#5765).,NA
dplyr,1,132,133,FALSE,`group_by()` keeps attributes unrelated to the grouping (#5760).,NA
dplyr,1,133,134,FALSE,The `.cols=` argument of `if_any()` and `if_all()` defaults to `everything()`.,NA
dplyr,1,134,135,FALSE,Improved performance for `across()`. This makes `summarise(across())` and `mutate(across())` perform as well as the superseded colwise equivalents (#5697).,NA
dplyr,1,135,136,FALSE,"New functions `if_any()` and `if_all()` (#4770, #5713).",NA
dplyr,1,136,137,FALSE,`summarise()` silently ignores NULL results (#5708).,NA
dplyr,1,137,138,FALSE,Fixed a performance regression in `mutate()` when warnings occur once per group (#5675). We no longer instrument warnings with debugging information when `mutate()` is called within `suppressWarnings()`.,NA
dplyr,1,138,139,FALSE,`summarise()` no longer informs when the result is ungrouped (#5633).,NA
dplyr,1,139,140,FALSE,"`group_by(.drop = FALSE)` preserves ordered factors (@brianrice2, #5545).",NA
dplyr,1,140,141,FALSE,`count()` and `tally()` are now generic.,NA
dplyr,1,141,142,FALSE,"Removed default fallbacks to lazyeval methods; this will yield better error messages when you call a dplyr function with the wrong input, and is part of our long term plan to remove the deprecated lazyeval interface.",NA
dplyr,1,142,143,FALSE,"`inner_join()` gains a `keep` parameter for consistency with the other mutating joins (@patrickbarks, #5581).",NA
dplyr,1,143,144,FALSE,"Improved performance with many columns, with a dynamic data mask using active bindings and lazy chops (#5017).",NA
dplyr,1,144,145,FALSE,`mutate()` and friends preserves row names in data frames once more (#5418).,NA
dplyr,1,145,146,FALSE,"`group_by()` uses the ungrouped data for the implicit mutate step (#5598). You might have to define an `ungroup()` method for custom classes. For example, see https://github.com/hadley/cubelyr/pull/3.",NA
dplyr,1,146,147,FALSE,`relocate()` can rename columns it relocates (#5569).,NA
dplyr,1,147,148,FALSE,`distinct()` and `group_by()` have better error messages when the mutate step fails (#5060).,NA
dplyr,1,148,149,FALSE,Clarify that `between()` is not vectorised (#5493).,NA
dplyr,1,149,150,FALSE,Fixed `across()` issue where data frame columns would could not be referred to with `all_of()` in the nested case (`mutate()` within `mutate()`) (#5498).,NA
dplyr,1,150,151,FALSE,`across()` handles data frames with 0 columns (#5523).,NA
dplyr,1,151,152,FALSE,"`mutate()` always keeps grouping variables, unconditional to `.keep=` (#5582).",NA
dplyr,1,152,153,FALSE,dplyr now depends on R 3.3.0,NA
dplyr,1,153,154,FALSE,Fixed `across()` issue where data frame columns would mask objects referred to from `all_of()` (#5460).,NA
dplyr,1,154,155,FALSE,"`bind_cols()` gains a `.name_repair` argument, passed to `vctrs::vec_cbind()` (#5451)",NA
dplyr,1,155,156,FALSE,"`summarise(.groups = ""rowwise"")` makes a rowwise data frame even if the input data is not grouped (#5422).",NA
dplyr,1,156,157,FALSE,New function `cur_data_all()` similar to `cur_data()` but includes the grouping variables (#5342).,NA
dplyr,1,157,158,FALSE,"`count()` and `tally()` no longer automatically weights by column `n` if present (#5298). dplyr 1.0.0 introduced this behaviour because of Hadley's faulty memory. Historically `tally()` automatically weighted and `count()` did not, but this behaviour was accidentally changed in 0.8.2 (#4408) so that neither automatically weighted by `n`. Since 0.8.2 is almost a year old, and the automatically weighting behaviour was a little confusing anyway, we've removed it from both `count()` and `tally()`. Use of `wt = n()` is now deprecated; now just omit the `wt` argument.",NA
dplyr,1,158,159,FALSE,`coalesce()` now supports data frames correctly (#5326).,NA
dplyr,1,159,160,FALSE,"`cummean()` no longer has off-by-one indexing problem (@cropgen, #5287).",NA
dplyr,1,160,161,FALSE,The call stack is preserved on error. This makes it possible to `recover()` into problematic code called from dplyr verbs (#5308).,NA
dplyr,1,161,162,FALSE,"`bind_cols()` no longer converts to a tibble, returns a data frame if the input is a data frame.",NA
dplyr,1,162,163,FALSE,"`bind_rows()`, `*_join()`, `summarise()` and `mutate()` use vctrs coercion rules. There are two main user facing changes:",NA
dplyr,2,162,164,FALSE,* Combining factor and character vectors silently creates a character vector; previously it created a character vector with a warning.,"`bind_rows()`, `*_join()`, `summarise()` and `mutate()` use vctrs coercion rules. There are two main user facing changes:"
dplyr,2,162,165,FALSE,* Combining multiple factors creates a factor with combined levels; previously it created a character vector with a warning.,"`bind_rows()`, `*_join()`, `summarise()` and `mutate()` use vctrs coercion rules. There are two main user facing changes:"
dplyr,1,165,166,FALSE,"`bind_rows()` and other functions use vctrs name repair, see `?vctrs::vec_as_names`.",NA
dplyr,1,166,167,FALSE,`all.equal.tbl_df()` removed.,NA
dplyr,2,166,168,FALSE,"* Data frames, tibbles and grouped data frames are no longer considered equal, even if the data is the same.",`all.equal.tbl_df()` removed.
dplyr,2,166,169,FALSE,* Equality checks for data frames no longer ignore row order or groupings.,`all.equal.tbl_df()` removed.
dplyr,2,166,170,FALSE,"* `expect_equal()` uses `all.equal()` internally. When comparing data frames, tests that used to pass may now fail.",`all.equal.tbl_df()` removed.
dplyr,1,170,171,FALSE,`distinct()` keeps the original column order.,NA
dplyr,1,171,172,FALSE,"`distinct()` on missing columns now raises an error, it has been a compatibility warning for a long time.",NA
dplyr,1,172,173,FALSE,`group_modify()` puts the grouping variable to the front.,NA
dplyr,1,173,174,FALSE,"`n()` and `row_number()` can no longer be called directly when dplyr is not loaded, and this now generates an error: `dplyr::mutate(mtcars, x = n())`. Fix by prefixing with `dplyr::` as in `dplyr::mutate(mtcars, x = dplyr::n())`",NA
dplyr,1,174,175,FALSE,"The old data format for `grouped_df` is no longer supported. This may affect you if you have serialized grouped data frames to disk, e.g. with `saveRDS()` or when using knitr caching.",NA
dplyr,1,175,176,FALSE,`lead()` and `lag()` are stricter about their inputs.,NA
dplyr,1,176,177,FALSE,"Extending data frames requires that the extra class or classes are added first, not last. Having the extra class at the end causes some vctrs operations to fail with a message like:",NA
dplyr,1,176,178,TRUE,"```
Input must be a vector, not a `<data.frame/...>` object
```",NA
dplyr,1,177,179,FALSE,`right_join()` no longer sorts the rows of the resulting tibble according to the order of the RHS `by` argument in tibble `y`.,NA
dplyr,1,178,180,FALSE,"The `cur_` functions (`cur_data()`, `cur_group()`, `cur_group_id()`, `cur_group_rows()`) provide a full set of options to you access information about the ""current"" group in dplyr verbs. They are inspired by data.table's `.SD`, `.GRP`, `.BY`, and `.I`.",NA
dplyr,1,179,181,FALSE,"The `rows_` functions (`rows_insert()`, `rows_update()`, `rows_upsert()`, `rows_patch()`, `rows_delete()`) provide a new API to insert and delete rows from a second data frame or table. Support for updating mutable backends is planned (#4654).",NA
dplyr,1,180,182,FALSE,`mutate()` and `summarise()` create multiple columns from a single expression if you return a data frame (#2326).,NA
dplyr,1,181,183,FALSE,"`select()` and `rename()` use the latest version of the tidyselect interface. Practically, this means that you can now combine selections using Boolean logic (i.e. `!`, `&` and `|`), and use predicate functions with `where()` (e.g. `where(is.character)`) to select variables by type (#4680). It also makes it possible to use `select()` and `rename()` to repair data frames with duplicated names (#4615) and prevents you from accidentally introducing duplicate names (#4643). This also means that dplyr now re-exports `any_of()` and `all_of()` (#5036).",NA
dplyr,1,182,184,FALSE,`slice()` gains a new set of helpers:,NA
dplyr,2,182,185,FALSE,"* `slice_head()` and `slice_tail()` select the first and last rows, like `head()` and `tail()`, but return `n` rows *per group*.",`slice()` gains a new set of helpers:
dplyr,2,182,186,FALSE,"* `slice_sample()` randomly selects rows, taking over from `sample_frac()` and `sample_n()`.",`slice()` gains a new set of helpers:
dplyr,2,182,187,FALSE,"* `slice_min()` and `slice_max()` select the rows with the minimum or maximum values of a variable, taking over from the confusing `top_n()`.",`slice()` gains a new set of helpers:
dplyr,1,186,188,FALSE,`summarise()` can create summaries of greater than length 1 if you use a summary function that returns multiple values.,NA
dplyr,1,187,189,FALSE,`summarise()` gains a `.groups=` argument to control the grouping structure.,NA
dplyr,1,188,190,FALSE,New `relocate()` verb makes it easy to move columns around within a data frame (#4598).,NA
dplyr,1,189,191,FALSE,New `rename_with()` is designed specifically for the purpose of renaming selected columns with a function (#4771).,NA
dplyr,1,190,192,FALSE,`ungroup()` can now selectively remove grouping variables (#3760).,NA
dplyr,1,191,193,FALSE,"`pull()` can now return named vectors by specifying an additional column name (@ilarischeinin, #4102).",NA
dplyr,1,192,194,FALSE,"`mutate()` (for data frames only), gains experimental new arguments `.before` and `.after` that allow you to control where the new columns are placed (#2047).",NA
dplyr,1,193,195,FALSE,"`mutate()` (for data frames only), gains an experimental new argument called `.keep` that allows you to control which variables are kept from the input `.data`. `.keep = ""all""` is the default; it keeps all variables. `.keep = ""none""` retains no input variables (except for grouping keys), so behaves like `transmute()`. `.keep = ""unused""` keeps only variables not used to make new columns. `.keep = ""used""` keeps only the input variables used to create new columns; it's useful for double checking your work (#3721).",NA
dplyr,1,194,196,FALSE,"New, experimental, `with_groups()` makes it easy to temporarily group or ungroup (#4711).",NA
dplyr,1,195,197,FALSE,"New function `across()` that can be used inside `summarise()`, `mutate()`, and other verbs to apply a function (or a set of functions) to a selection of columns. See `vignette(""colwise"")` for more details.",NA
dplyr,1,196,198,FALSE,"New function `c_across()` that can be used inside `summarise()` and `mutate()` in row-wise data frames to easily (e.g.) compute a row-wise mean of all numeric variables. See `vignette(""rowwise"")` for more details.",NA
dplyr,1,197,199,FALSE,`rowwise()` is no longer questioning; we now understand that it's an important tool when you don't have vectorised code. It now also allows you to specify additional variables that should be preserved in the output when summarising (#4723). The rowwise-ness is preserved by all operations; you need to explicit drop it with `as_tibble()` or `group_by()`.,NA
dplyr,1,198,200,FALSE,"New, experimental, `nest_by()`. It has the same interface as `group_by()`, but returns a rowwise data frame of grouping keys, supplemental with a list-column of data frames containing the rest of the data.",NA
dplyr,1,199,201,FALSE,"The implementation of all dplyr verbs have been changed to use primitives provided by the vctrs package. This makes it easier to add support for new types of vector, radically simplifies the implementation, and makes all dplyr verbs more consistent.",NA
dplyr,1,200,202,FALSE,"The place where you are mostly likely to be impacted by the coercion changes is when working with factors in joins or grouped mutates: now when combining factors with different levels, dplyr creates a new factor with the union of the levels. This matches base R more closely, and while perhaps strictly less correct, is much more convenient.",NA
dplyr,1,201,203,FALSE,dplyr dropped its two heaviest dependencies: Rcpp and BH. This should make it considerably easier and faster to build from source.,NA
dplyr,1,202,204,FALSE,"The implementation of all verbs has been carefully thought through. This mostly makes implementation simpler but should hopefully increase consistency, and also makes it easier to adapt to dplyr to new data structures in the new future. Pragmatically, the biggest difference for most people will be that each verb documents its return value in terms of rows, columns, groups, and data frame attributes.",NA
dplyr,1,203,205,FALSE,Row names are now preserved when working with data frames.,NA
dplyr,1,204,206,FALSE,`group_by()` uses hashing from the `vctrs` package.,NA
dplyr,1,205,207,FALSE,"Grouped data frames now have `names<-`, `[[<-`, `[<-` and `$<-` methods that re-generate the underlying grouping. Note that modifying grouping variables in multiple steps (i.e. `df$grp1 <- 1; df$grp2 <- 1`) will be inefficient since the data frame will be regrouped after each modification.",NA
dplyr,1,206,208,FALSE,`[.grouped_df` now regroups to respect any grouping columns that have been removed (#4708).,NA
dplyr,1,207,209,FALSE,`mutate()` and `summarise()` can now modify grouping variables (#4709).,NA
dplyr,1,208,210,FALSE,"`group_modify()` works with additional arguments (@billdenney and @cderv, #4509)",NA
dplyr,1,209,211,FALSE,`group_by()` does not create an arbitrary NA group when grouping by factors with `drop = TRUE` (#4460).,NA
dplyr,1,210,212,FALSE,"All deprecations now use the [lifecycle](https://lifecycle.r-lib.org), that means by default you'll only see a deprecation warning once per session, and you can control with `options(lifecycle_verbosity = x)` where `x` is one of",NA
dplyr,1,211,213,FALSE,"`id()`, deprecated in dplyr 0.5.0, is now defunct.",NA
dplyr,1,212,214,FALSE,"`failwith()`, deprecated in dplyr 0.7.0, is now defunct.",NA
dplyr,1,213,215,FALSE,`tbl_cube()` and `nasa` have been pulled out into a separate cubelyr package (#4429).,NA
dplyr,1,214,216,FALSE,"`rbind_all()` and `rbind_list()` have been removed (@bjungbogati, #4430).",NA
dplyr,1,215,217,FALSE,"`dr_dplyr()` has been removed as it is no longer needed (#4433, @smwindecker).",NA
dplyr,1,216,218,FALSE,"Use of pkgconfig for setting `na_matches` argument to join functions is now deprecated (#4914). This was rarely used, and I'm now confident that the default is correct for R.",NA
dplyr,1,217,219,FALSE,"In `add_count()`, the `drop` argument has been deprecated because it didn't actually affect the output.",NA
dplyr,1,218,220,FALSE,`add_rownames()`: please use `tibble::rownames_to_column()` instead.,NA
dplyr,1,219,221,FALSE,`as.tbl()` and `tbl_df()`: please use `as_tibble()` instead.,NA
dplyr,1,220,222,FALSE,"`bench_tbls()`, `compare_tbls()`, `compare_tbls2()`, `eval_tbls()` and `eval_tbls2()` are now deprecated. That were only used in a handful of packages, and we now believe that you're better off performing comparisons more directly (#4675).",NA
dplyr,1,221,223,FALSE,`combine()`: please use `vctrs::vec_c()` instead.,NA
dplyr,1,222,224,FALSE,`funs()`: please use `list()` instead.,NA
dplyr,1,223,225,FALSE,`group_by(add = )`: please use `.add` instead.,NA
dplyr,1,224,226,FALSE,`group_by(.dots = )`/`group_by_prepare(.dots = )`: please use `!!!` instead (#4734).,NA
dplyr,1,225,227,FALSE,"The use of zero-arg `group_indices()` to retrieve the group id for the ""current"" group is deprecated; instead use `cur_group_id()`.",NA
dplyr,1,226,228,FALSE,"Passing arguments to `group_keys()` or `group_indices()` to change the grouping has been deprecated, instead do grouping first yourself.",NA
dplyr,1,227,229,FALSE,`location()` and `changes()`: please use `lobstr::ref()` instead.,NA
dplyr,1,228,230,FALSE,`progress_estimated()` is soft deprecated; it's not the responsibility of dplyr to provide progress bars (#4935).,NA
dplyr,1,229,231,FALSE,`src_local()` has been deprecated; it was part of an approach to testing dplyr backends that didn't pan out.,NA
dplyr,1,230,232,FALSE,"`src_mysql()`, `src_postgres()`, and `src_sqlite()` has been deprecated. We've recommended against them for some time. Instead please use the approach described at <https://dbplyr.tidyverse.org/>.",NA
dplyr,1,231,233,FALSE,"`select_vars()`, `rename_vars()`, `select_var()`, `current_vars()` are now deprecated (@perezp44, #4432)",NA
dplyr,1,232,234,FALSE,"The scoped helpers (all functions ending in `_if`, `_at`, or `_all`) have been superseded by `across()`. This dramatically reduces the API surface for dplyr, while at the same providing providing a more flexible and less error-prone interface (#4769). `rename_*()` and `select_*()` have been superseded by `rename_with()`.",NA
dplyr,1,233,235,FALSE,`do()` is superseded in favour of `summarise()`.,NA
dplyr,1,234,236,FALSE,"`sample_n()` and `sample_frac()` have been superseded by `slice_sample()`. See `?sample_n` for details about why, and for examples converting from old to new usage.",NA
dplyr,1,235,237,FALSE,"`top_n()` has been superseded by`slice_min()`/`slice_max()`. See `?top_n` for details about why, and how to convert old to new usage (#4494).",NA
dplyr,1,236,238,FALSE,`all_equal()` is questioning; it solves a problem that no longer,NA
dplyr,1,238,240,FALSE,"New `vignette(""base"")` which describes how dplyr verbs relate to the base R equivalents (@sastoudt, #4755)",NA
dplyr,1,239,241,FALSE,"New `vignette(""grouping"")` gives more details about how dplyr verbs change when applied to grouped data frames (#4779, @MikeKSmith).",NA
dplyr,1,240,242,FALSE,"`vignette(""programming"")` has been completely rewritten to reflect our latest vocabulary, the most recent rlang features, and our current recommendations. It should now be substantially easier to program with dplyr.",NA
dplyr,1,241,243,FALSE,"dplyr now has a rudimentary, experimental, and stop-gap, extension mechanism documented in `?dplyr_extending`",NA
dplyr,1,242,244,FALSE,"dplyr no longer provides a `all.equal.tbl_df()` method. It never should have done so in the first place because it owns neither the generic nor the class. It also provided a problematic implementation because, by default, it ignored the order of the rows and the columns which is usually important. This is likely to cause new test failures in downstream packages; but on the whole we believe those failures to either reflect unexpected behaviour or tests that need to be strengthened (#2751).",NA
dplyr,1,243,245,FALSE,`coalesce()` now uses vctrs recycling and common type coercion rules (#5186).,NA
dplyr,1,244,246,FALSE,`count()` and `add_count()` do a better job of preserving input class and attributes (#4086).,NA
dplyr,1,245,247,FALSE,`distinct()` errors if you request it use variables that don't exist (this was previously a warning) (#4656).,NA
dplyr,1,246,248,FALSE,"`filter()`, `mutate()` and `summarise()` get better error messages.",NA
dplyr,1,247,249,FALSE,`filter()` handles data frame results when all columns are logical vectors by reducing them with `&` (#4678). In particular this means `across()` can be used in `filter()`.,NA
dplyr,1,248,250,FALSE,"`left_join()`, `right_join()`, and `full_join()` gain a `keep` argument so that you can optionally choose to keep both sets of join keys (#4589). This is useful when you want to figure out which rows were missing from either side.",NA
dplyr,1,249,251,FALSE,Join functions can now perform a cross-join by specifying `by = character()` (#4206.),NA
dplyr,1,250,252,FALSE,`groups()` now returns `list()` for ungrouped data; previously it returned `NULL` which was type-unstable (when there are groups it returns a list of symbols).,NA
dplyr,1,251,253,FALSE,"The first argument of `group_map()`, `group_modify()` and `group_walk()` has been changed to `.data` for consistency with other generics.",NA
dplyr,1,252,254,FALSE,`group_keys.rowwise_df()` gives a 0 column data frame with `n()` rows.,NA
dplyr,1,253,255,FALSE,`group_map()` is now a generic (#4576).,NA
dplyr,1,254,256,FALSE,"`group_by(..., .add = TRUE)` replaces `group_by(..., add = TRUE)`, with a deprecation message. The old argument name was a mistake because it prevents you from creating a new grouping var called `add` and it violates our naming conventions (#4137).",NA
dplyr,1,255,257,FALSE,"`intersect()`, `union()`, `setdiff()` and `setequal()` generics are now imported from the generics package. This reduces a conflict with lubridate.",NA
dplyr,1,256,258,FALSE,`order_by()` gives an informative hint if you accidentally call it instead of `arrange()` #3357.,NA
dplyr,1,257,259,FALSE,"`tally()` and `count()` now message if the default output `name` (n), already exists in the data frame. To quiet the message, you'll need to supply an explicit `name` (#4284). You can override the default weighting to using a constant by setting `wt = 1`.",NA
dplyr,1,258,260,FALSE,"`starwars` dataset now does a better job of separating biological sex from gender identity. The previous `gender` column has been renamed to `sex`, since it actually describes the individual's biological sex. A new `gender` column encodes the actual gender identity using other information about the Star Wars universe (@MeganBeckett, #4456).",NA
dplyr,1,259,261,FALSE,"`src_tbls()` accepts `...` arguments (#4485, @ianmcook). This could be a breaking change for some dplyr backend packages that implement `src_tbls()`.",NA
dplyr,1,260,262,FALSE,Better performance for extracting slices of factors and ordered factors (#4501).,NA
dplyr,1,261,263,FALSE,"`rename_at()` and `rename_all()` call the function with a simple character vector, not a `dplyr_sel_vars` (#4459).",NA
dplyr,1,262,264,FALSE,`ntile()` is now more consistent with database implementations if the buckets have irregular size (#4495).,NA
dplyr,1,266,268,FALSE,"`top_frac(data, proportion)` is a shorthand for",NA
dplyr,1,267,269,FALSE,Using quosures in colwise verbs is deprecated (#4330).,NA
dplyr,1,268,270,FALSE,"Updated `distinct_if()`, `distinct_at()` and `distinct_all()` to include `.keep_all` argument (@beansrowning, #4343).",NA
dplyr,1,269,271,FALSE,`rename_at()` handles empty selection (#4324).,NA
dplyr,1,270,272,FALSE,`*_if()` functions correctly handle columns with special names (#4380).,NA
dplyr,1,271,273,FALSE,colwise functions support constants in formulas (#4374).,NA
dplyr,1,272,274,FALSE,hybrid rank functions correctly handle NA (#4427).,NA
dplyr,1,273,275,FALSE,"`first()`, `last()` and `nth()` hybrid version handles factors (#4295).",NA
dplyr,1,274,276,FALSE,"`top_n()` quotes its `n` argument, `n` no longer needs to be constant for all groups (#4017).",NA
dplyr,1,275,277,FALSE,`tbl_vars()` keeps information on grouping columns by returning a `dplyr_sel_vars` object (#4106).,NA
dplyr,1,276,278,FALSE,"`group_split()` always sets the `ptype` attribute, which make it more robust in the case where there are 0 groups.",NA
dplyr,1,277,279,FALSE,`group_map()` and `group_modify()` work in the 0 group edge case (#4421),NA
dplyr,1,278,280,FALSE,`select.list()` method added so that `select()` does not dispatch on lists (#4279).,NA
dplyr,1,279,281,FALSE,`view()` is reexported from tibble (#4423).,NA
dplyr,1,280,282,FALSE,`group_by()` puts NA groups last in character vectors (#4227).,NA
dplyr,1,281,283,FALSE,`arrange()` handles integer64 objects (#4366).,NA
dplyr,1,282,284,FALSE,`summarise()` correctly resolves summarised list columns (#4349).,NA
dplyr,1,283,285,FALSE,`group_modify()` is the new name of the function previously known as,NA
dplyr,1,284,286,FALSE,`group_map()` now only calls the function on each group and return a list.,NA
dplyr,1,285,287,FALSE,"`group_by_drop_default()`, previously known as `dplyr:::group_drops()` is exported (#4245).",NA
dplyr,1,286,288,FALSE,Lists of formulas passed to colwise verbs are now automatically named.,NA
dplyr,1,287,289,FALSE,`group_by()` does a shallow copy even in the no groups case (#4221).,NA
dplyr,1,288,290,FALSE,Fixed `mutate()` on rowwise data frames with 0 rows (#4224).,NA
dplyr,1,289,291,FALSE,Fixed handling of bare formulas in colwise verbs (#4183).,NA
dplyr,1,290,292,FALSE,Fixed performance of `n_distinct()` (#4202).,NA
dplyr,1,291,293,FALSE,"`group_indices()` now ignores empty groups by default for `data.frame`, which is consistent with the default of `group_by()` (@yutannihilation, #4208).",NA
dplyr,1,292,294,FALSE,Fixed integer overflow in hybrid `ntile()` (#4186).,NA
dplyr,1,293,295,FALSE,colwise functions `summarise_at()` ... can rename vars in the case of multiple functions (#4180).,NA
dplyr,1,294,296,FALSE,`select_if()` and `rename_if()` handle logical vector predicate (#4213).,NA
dplyr,1,295,297,FALSE,hybrid `min()` and `max()` cast to integer when possible (#4258).,NA
dplyr,1,296,298,FALSE,`bind_rows()` correctly handles the cases where there are multiple consecutive `NULL` (#4296).,NA
dplyr,1,297,299,FALSE,Support for R 3.1.\* has been dropped. The minimal R version supported is now 3.2.0. https://www.tidyverse.org/articles/2019/04/r-version-support/,NA
dplyr,1,298,300,FALSE,`rename_at()` handles empty selection (#4324).,NA
dplyr,1,300,302,FALSE,"The error `could not find function ""n""` or the warning `` Calling `n()` without importing or prefixing it is deprecated, use `dplyr::n()` `` indicates when functions like `n()`, `row_number()`, ... are not imported or prefixed. The easiest fix is to import dplyr with `import(dplyr)` in your `NAMESPACE` or `#' @import dplyr` in a roxygen comment, alternatively such functions can be imported selectively as any other function with `importFrom(dplyr, n)` in the `NAMESPACE` or `#' @importFrom dplyr n` in a roxygen comment. The third option is to prefix them, i.e. use `dplyr::n()`",NA
dplyr,1,301,303,FALSE,"If you see `checking S3 generic/method consistency` in R CMD check for your package, note that :",NA
dplyr,2,301,304,FALSE,* `sample_n()` and `sample_frac()` have gained `...`,"If you see `checking S3 generic/method consistency` in R CMD check for your package, note that :"
dplyr,2,301,305,FALSE,* `filter()` and `slice()` have gained `.preserve`,"If you see `checking S3 generic/method consistency` in R CMD check for your package, note that :"
dplyr,2,301,306,FALSE,* `group_by()` has gained `.drop`,"If you see `checking S3 generic/method consistency` in R CMD check for your package, note that :"
dplyr,1,305,307,FALSE,"`` Error: `.data` is a corrupt grouped_df, ... `` signals code that makes wrong assumptions about the internals of a grouped data frame.",NA
dplyr,1,306,308,FALSE,New selection helpers `group_cols()`. It can be called in selection contexts such as `select()` and matches the grouping variables of grouped tibbles.,NA
dplyr,1,307,309,FALSE,`last_col()` is re-exported from tidyselect (#3584).,NA
dplyr,1,308,310,FALSE,`group_trim()` drops unused levels of factors that are used as grouping variables.,NA
dplyr,1,309,311,FALSE,`nest_join()` creates a list column of the matching rows. `nest_join()` + `tidyr::unnest()` is equivalent to `inner_join` (#3570).,NA
dplyr,1,309,312,TRUE,"```
band_members %>% 
  nest_join(band_instruments)
```",NA
dplyr,1,310,313,FALSE,`group_nest()` is similar to `tidyr::nest()` but focusing on the variables to nest by instead of the nested columns.,NA
dplyr,1,310,314,TRUE,"```
starwars %>%
  group_by(species, homeworld) %>% 
  group_nest()

starwars %>%
  group_nest(species, homeworld)
```",NA
dplyr,1,311,315,FALSE,"`group_split()` is similar to `base::split()` but operating on existing groups when applied to a grouped data frame, or subject to the data mask on ungrouped data frames",NA
dplyr,1,311,316,TRUE,"```
starwars %>%
  group_by(species, homeworld) %>%   
  group_split()

starwars %>%
  group_split(species, homeworld)
```",NA
dplyr,1,312,317,FALSE,"`group_map()` and `group_walk()` are purrr-like functions to iterate on groups of a grouped data frame, jointly identified by the data subset (exposed as `.x`) and the data key (a one row tibble, exposed as `.y`). `group_map()` returns a grouped data frame that combines the results of the function, `group_walk()` is only used for side effects and returns its input invisibly.",NA
dplyr,1,312,318,TRUE,"```
mtcars %>%
  group_by(cyl) %>%
  group_map(~ head(.x, 2L))
```",NA
dplyr,1,313,319,FALSE,"`distinct_prepare()`, previously known as `distinct_vars()` is exported. This is mostly useful for alternative backends (e.g. `dbplyr`).",NA
dplyr,1,314,320,FALSE,"`group_by()` gains the `.drop` argument. When set to `FALSE` the groups are generated based on factor levels, hence some groups may be empty (#341).",NA
dplyr,1,314,321,TRUE,"```
# 3 groups
tibble(
  x = 1:2, 
  f = factor(c(""a"", ""b""), levels = c(""a"", ""b"", ""c""))
) %>% 
  group_by(f, .drop = FALSE)

# the order of the grouping variables matter
df <- tibble(
  x = c(1,2,1,2), 
  f = factor(c(""a"", ""b"", ""a"", ""b""), levels = c(""a"", ""b"", ""c""))
)
df %>% group_by(f, x, .drop = FALSE)
df %>% group_by(x, f, .drop = FALSE)
```",NA
dplyr,1,314,321,FALSE,The default behaviour drops the empty groups as in the previous versions.,NA
dplyr,1,314,322,TRUE,"```
tibble(
    x = 1:2, 
    f = factor(c(""a"", ""b""), levels = c(""a"", ""b"", ""c""))
  ) %>% 
    group_by(f)
```",NA
dplyr,1,315,323,FALSE,"`filter()` and `slice()` gain a `.preserve` argument to control which groups it should keep. The default `filter(.preserve = FALSE)` recalculates the grouping structure based on the resulting data, otherwise it is kept as is.",NA
dplyr,1,315,324,TRUE,"```
df <- tibble(
  x = c(1,2,1,2), 
  f = factor(c(""a"", ""b"", ""a"", ""b""), levels = c(""a"", ""b"", ""c""))
) %>% 
  group_by(x, f, .drop = FALSE)

df %>% filter(x == 1)
df %>% filter(x == 1, .preserve = TRUE)
```",NA
dplyr,1,316,325,FALSE,"The notion of lazily grouped data frames have disappeared. All dplyr verbs now recalculate immediately the grouping structure, and respect the levels of factors.",NA
dplyr,1,317,326,FALSE,"Subsets of columns now properly dispatch to the `[` or `[[` method when the column is an object (a vector with a class) instead of making assumptions on how the column should be handled. The `[` method must handle integer indices, including `NA_integer_`, i.e. `x[NA_integer_]` should produce a vector of the same class as `x` with whatever represents a missing value.",NA
dplyr,1,318,327,FALSE,`tally()` works correctly on non-data frame table sources such as `tbl_sql` (#3075).,NA
dplyr,1,319,328,FALSE,`sample_n()` and `sample_frac()` can use `n()` (#3527),NA
dplyr,1,320,329,FALSE,"`distinct()` respects the order of the variables provided (#3195, @foo-bar-baz-qux) and handles the 0 rows and 0 columns special case (#2954).",NA
dplyr,1,321,330,FALSE,`combine()` uses tidy dots (#3407).,NA
dplyr,1,322,331,FALSE,`group_indices()` can be used without argument in expressions in verbs (#1185).,NA
dplyr,1,323,332,FALSE,"Using `mutate_all()`, `transmute_all()`, `mutate_if()` and `transmute_if()` with grouped tibbles now informs you that the grouping variables are ignored. In the case of the `_all()` verbs, the message invites you to use `mutate_at(df, vars(-group_cols()))` (or the equivalent `transmute_at()` call) instead if you'd like to make it explicit in your code that the operation is not applied on the grouping variables.",NA
dplyr,1,324,333,FALSE,Scoped variants of `arrange()` respect the `.by_group` argument (#3504).,NA
dplyr,1,325,334,FALSE,`first()` and `last()` hybrid functions fall back to R evaluation when given no arguments (#3589).,NA
dplyr,1,326,335,FALSE,`mutate()` removes a column when the expression evaluates to `NULL` for all groups (#2945).,NA
dplyr,1,327,336,FALSE,"grouped data frames support `[, drop = TRUE]` (#3714).",NA
dplyr,1,328,337,FALSE,New low-level constructor `new_grouped_df()` and validator `validate_grouped_df` (#3837).,NA
dplyr,1,329,338,FALSE,`glimpse()` prints group information on grouped tibbles (#3384).,NA
dplyr,1,330,339,FALSE,`sample_n()` and `sample_frac()` gain `...` (#2888).,NA
dplyr,1,331,340,FALSE,Scoped filter variants now support functions and purrr-like lambdas:,NA
dplyr,1,331,341,TRUE,"```
mtcars %>% filter_at(vars(hp, vs), ~ . %% 2 == 0)
```",NA
dplyr,1,332,342,FALSE,"`do()`, `rowwise()` and `combine()` are questioning (#3494).",NA
dplyr,1,333,343,FALSE,`funs()` is soft-deprecated and will start issuing warnings in a future version.,NA
dplyr,1,334,344,FALSE,"Scoped variants for `distinct()`: `distinct_at()`, `distinct_if()`, `distinct_all()` (#2948).",NA
dplyr,1,335,345,FALSE,`summarise_at()` excludes the grouping variables (#3613).,NA
dplyr,1,336,346,FALSE,"`mutate_all()`, `mutate_at()`, `summarise_all()` and `summarise_at()` handle utf-8 names (#2967).",NA
dplyr,1,337,347,FALSE,"R expressions that cannot be handled with native code are now evaluated with unwind-protection when available (on R 3.5 and later). This improves the performance of dplyr on data frames with many groups (and hence many expressions to evaluate). We benchmarked that computing a grouped average is consistently twice as fast with unwind-protection enabled. Unwind-protection also makes dplyr more robust in corner cases because it ensures the C++ destructors are correctly called in all circumstances (debugger exit, captured condition, restart invokation).",NA
dplyr,1,338,348,FALSE,`sample_n()` and `sample_frac()` gain `...` (#2888).,NA
dplyr,1,339,349,FALSE,Improved performance for wide tibbles (#3335).,NA
dplyr,1,340,350,FALSE,"Faster hybrid `sum()`, `mean()`, `var()` and `sd()` for logical vectors (#3189).",NA
dplyr,1,341,351,FALSE,Hybrid version of `sum(na.rm = FALSE)` exits early when there are missing values. This considerably improves performance when there are missing values early in the vector (#3288).,NA
dplyr,1,342,352,FALSE,`group_by()` does not trigger the additional `mutate()` on simple uses of the `.data` pronoun (#3533).,NA
dplyr,1,343,353,FALSE,"The grouping metadata of grouped data frame has been reorganized in a single tidy tibble, that can be accessed with the new `group_data()` function. The grouping tibble consists of one column per grouping variable, followed by a list column of the (1-based) indices of the groups. The new `group_rows()` function retrieves that list of indices (#3489).",NA
dplyr,1,343,354,TRUE,"```
# the grouping metadata, as a tibble
group_by(starwars, homeworld) %>% 
  group_data()

# the indices
group_by(starwars, homeworld) %>% 
  group_data() %>% 
  pull(.rows)

group_by(starwars, homeworld) %>% 
  group_rows()
```",NA
dplyr,1,344,355,FALSE,Hybrid evaluation has been completely redesigned for better performance and stability.,NA
dplyr,1,345,356,FALSE,Add documentation example for moving variable to back in `?select` (#3051).,NA
dplyr,1,346,357,FALSE,"column wise functions are better documented, in particular explaining when grouping variables are included as part of the selection.",NA
dplyr,1,348,359,FALSE,`exprs()` is no longer exported to avoid conflicts with `Biobase::exprs()` (#3638).,NA
dplyr,1,349,360,FALSE,The MASS package is explicitly suggested to fix CRAN warnings on R-devel (#3657).,NA
dplyr,1,350,361,FALSE,Set operations like `intersect()` and `setdiff()` reconstruct groups metadata (#3587) and keep the order of the rows (#3839).,NA
dplyr,1,351,362,FALSE,Using namespaced calls to `base::sort()` and `base::unique()` from C++ code to avoid ambiguities when these functions are overridden (#3644).,NA
dplyr,1,352,363,FALSE,Fix rchk errors (#3693).,NA
dplyr,1,353,364,FALSE,"The major change in this version is that dplyr now depends on the selecting backend of the tidyselect package. If you have been linking to `dplyr::select_helpers` documentation topic, you should update the link to point to `tidyselect::select_helpers`.",NA
dplyr,1,354,365,FALSE,"Another change that causes warnings in packages is that dplyr now exports the `exprs()` function. This causes a collision with `Biobase::exprs()`. Either import functions from dplyr selectively rather than in bulk, or do not import `Biobase::exprs()` and refer to it with a namespace qualifier.",NA
dplyr,1,355,366,FALSE,"`distinct(data, ""string"")` now returns a one-row data frame again. (The previous behavior was to return the data unchanged.)",NA
dplyr,1,356,367,FALSE,`do()` operations with more than one named argument can access `.` (#2998).,NA
dplyr,1,357,368,FALSE,"Reindexing grouped data frames (e.g. after `filter()` or `..._join()`) never updates the `""class""` attribute. This also avoids unintended updates to the original object (#3438).",NA
dplyr,1,358,369,FALSE,Fixed rare column name clash in `..._join()` with non-join columns of the same name in both tables (#3266).,NA
dplyr,1,359,370,FALSE,"Fix `ntile()` and `row_number()` ordering to use the locale-dependent ordering functions in R when dealing with character vectors, rather than always using the C-locale ordering function in C (#2792, @foo-bar-baz-qux).",NA
dplyr,1,360,371,FALSE,"Summaries of summaries (such as `summarise(b = sum(a), c = sum(b))`) are now computed using standard evaluation for simplicity and correctness, but slightly slower (#3233).",NA
dplyr,1,361,372,FALSE,Fixed `summarise()` for empty data frames with zero columns (#3071).,NA
dplyr,1,362,373,FALSE,"`enexpr()`, `expr()`, `exprs()`, `sym()` and `syms()` are now exported. `sym()` and `syms()` construct symbols from strings or character vectors. The `expr()` variants are equivalent to `quo()`, `quos()` and `enquo()` but return simple expressions rather than quosures. They support quasiquotation.",NA
dplyr,1,363,374,FALSE,"dplyr now depends on the new tidyselect package to power `select()`, `rename()`, `pull()` and their variants (#2896). Consequently `select_vars()`, `select_var()` and `rename_vars()` are soft-deprecated and will start issuing warnings in a future version. Following the switch to tidyselect, `select()` and `rename()` fully support character vectors. You can now unquote variables like this:",NA
dplyr,1,363,375,TRUE,"```
vars <- c(""disp"", ""cyl"")
select(mtcars, !! vars)
select(mtcars, -(!! vars))
```",NA
dplyr,1,363,375,FALSE,"Note that this only works in selecting functions because in other contexts strings and character vectors are ambiguous. For instance strings are a valid input in mutating operations and `mutate(df, ""foo"")` creates a new column by recycling ""foo"" to the number of rows.",NA
dplyr,1,364,376,FALSE,"Support for raw vector columns in `arrange()`, `group_by()`, `mutate()`, `summarise()` and `..._join()` (minimal `raw` x `raw` support initially) (#1803).",NA
dplyr,1,365,377,FALSE,`bind_cols()` handles unnamed list (#3402).,NA
dplyr,1,366,378,FALSE,`bind_rows()` works around corrupt columns that have the object bit set while having no class attribute (#3349).,NA
dplyr,1,367,379,FALSE,"`combine()` returns `logical()` when all inputs are `NULL` (or when there are no inputs) (#3365, @zeehio).",NA
dplyr,1,368,380,FALSE,`distinct()` now supports renaming columns (#3234).,NA
dplyr,1,369,381,FALSE,Hybrid evaluation simplifies `dplyr::foo()` to `foo()` (#3309). Hybrid functions can now be masked by regular R functions to turn off hybrid evaluation (#3255). The hybrid evaluator finds functions from dplyr even if dplyr is not attached (#3456).,NA
dplyr,1,370,382,FALSE,In `mutate()` it is now illegal to use `data.frame` in the rhs (#3298).,NA
dplyr,1,371,383,FALSE,Support `!!!` in `recode_factor()` (#3390).,NA
dplyr,1,372,384,FALSE,`row_number()` works on empty subsets (#3454).,NA
dplyr,1,373,385,FALSE,`select()` and `vars()` now treat `NULL` as empty inputs (#3023).,NA
dplyr,1,374,386,FALSE,"Scoped select and rename functions (`select_all()`, `rename_if()` etc.) now work with grouped data frames, adapting the grouping as necessary (#2947, #3410). `group_by_at()` can group by an existing grouping variable (#3351). `arrange_at()` can use grouping variables (#3332).",NA
dplyr,1,375,387,FALSE,"`slice()` no longer enforce tibble classes when input is a simple `data.frame`, and ignores 0 (#3297, #3313).",NA
dplyr,1,376,388,FALSE,`transmute()` no longer prints a message when including a group variable.,NA
dplyr,1,377,389,FALSE,Improved documentation for `funs()` (#3094) and set operations,NA
dplyr,1,378,390,FALSE,Better error message if dbplyr is not installed when accessing database backends (#3225).,NA
dplyr,1,379,391,FALSE,`arrange()` fails gracefully on `data.frame` columns (#3153).,NA
dplyr,1,380,392,FALSE,Corrected error message when calling `cbind()` with an object of wrong length (#3085).,NA
dplyr,1,381,393,FALSE,"Add warning with explanation to `distinct()` if any of the selected columns are of type `list` (#3088, @foo-bar-baz-qux), or when used on unknown columns (#2867, @foo-bar-baz-qux).",NA
dplyr,1,382,394,FALSE,Show clear error message for bad arguments to `funs()` (#3368).,NA
dplyr,1,383,395,FALSE,"Better error message in `..._join()` when joining data frames with duplicate or `NA` column names. Joining such data frames with a semi- or anti-join now gives a warning, which may be converted to an error in future versions (#3243, #3417).",NA
dplyr,1,384,396,FALSE,Dedicated error message when trying to use columns of the `Interval` or `Period` classes (#2568).,NA
dplyr,1,385,397,FALSE,"Added an `.onDetach()` hook that allows for plyr to be loaded and attached without the warning message that says functions in dplyr will be masked, since dplyr is no longer attached (#3359, @jwnorman).",NA
dplyr,1,386,398,FALSE,"`sample_n()` and `sample_frac()` on grouped data frame are now faster especially for those with large number of groups (#3193,",NA
dplyr,1,387,399,FALSE,Compute variable names for joins in R (#3430).,NA
dplyr,1,388,400,FALSE,Bumped Rcpp dependency to 0.12.15 to avoid imperfect detection of `NA` values in hybrid evaluation fixed in RcppCore/Rcpp#790 (#2919).,NA
dplyr,1,389,401,FALSE,"Avoid cleaning the data mask, a temporary environment used to evaluate expressions. If the environment, in which e.g. a `mutate()` expression is evaluated, is preserved until after the operation, accessing variables from that environment now gives a warning but still returns `NULL` (#3318).",NA
dplyr,1,390,402,FALSE,Fix recent Fedora and ASAN check errors (#3098).,NA
dplyr,1,391,403,FALSE,Avoid dependency on Rcpp 0.12.10 (#3106).,NA
dplyr,1,392,404,FALSE,Fixed protection error that occurred when creating a character column using grouped `mutate()` (#2971).,NA
dplyr,1,393,405,FALSE,Fixed a rare problem with accessing variable values in `summarise()` when all groups have size one (#3050).,NA
dplyr,1,394,406,FALSE,"`distinct()` now throws an error when used on unknown columns (#2867, @foo-bar-baz-qux).",NA
dplyr,1,395,407,FALSE,Fixed rare out-of-bounds memory write in `slice()` when negative indices beyond the number of rows were involved (#3073).,NA
dplyr,1,396,408,FALSE,"`select()`, `rename()` and `summarise()` no longer change the grouped vars of the original data (#3038).",NA
dplyr,1,397,409,FALSE,"`nth(default = var)`, `first(default = var)` and `last(default = var)` fall back to standard evaluation in a grouped operation instead of triggering an error (#3045).",NA
dplyr,1,398,410,FALSE,"`case_when()` now works if all LHS are atomic (#2909), or when LHS or RHS values are zero-length vectors (#3048).",NA
dplyr,1,399,411,FALSE,`case_when()` accepts `NA` on the LHS (#2927).,NA
dplyr,1,400,412,FALSE,Semi- and anti-joins now preserve the order of left-hand-side data frame (#3089).,NA
dplyr,1,401,413,FALSE,Improved error message for invalid list arguments to `bind_rows()` (#3068).,NA
dplyr,1,402,414,FALSE,Grouping by character vectors is now faster (#2204).,NA
dplyr,1,403,415,FALSE,Fixed a crash that occurred when an unexpected input was supplied to the `call` argument of `order_by()` (#3065).,NA
dplyr,1,404,416,FALSE,Move build-time vs. run-time checks out of `.onLoad()` and into,NA
dplyr,1,405,417,FALSE,Use new versions of bindrcpp and glue to avoid protection problems. Avoid wrapping arguments to internal error functions (#2877). Fix two protection mistakes found by rchk (#2868).,NA
dplyr,1,406,418,FALSE,Fix C++ error that caused compilation to fail on mac cran (#2862),NA
dplyr,1,407,419,FALSE,"Fix undefined behaviour in `between()`, where `NA_REAL` were assigned instead of `NA_LOGICAL`. (#2855, @zeehio)",NA
dplyr,1,408,420,FALSE,`top_n()` now executes operations lazily for compatibility with database backends (#2848).,NA
dplyr,1,409,421,FALSE,"Reuse of new variables created in ungrouped `mutate()` possible again, regression introduced in dplyr 0.7.0 (#2869).",NA
dplyr,1,410,422,FALSE,Quosured symbols do not prevent hybrid handling anymore. This should fix many performance issues introduced with tidyeval (#2822).,NA
dplyr,1,411,423,FALSE,Five new datasets provide some interesting built-in datasets to demonstrate dplyr verbs (#2094):,NA
dplyr,2,411,424,FALSE,* `starwars` dataset about starwars characters; has list columns,Five new datasets provide some interesting built-in datasets to demonstrate dplyr verbs (#2094):
dplyr,2,411,425,FALSE,* `storms` has the trajectories of \~200 tropical storms,Five new datasets provide some interesting built-in datasets to demonstrate dplyr verbs (#2094):
dplyr,2,411,426,FALSE,"* `band_members`, `band_instruments` and `band_instruments2` has some simple data to demonstrate joins.",Five new datasets provide some interesting built-in datasets to demonstrate dplyr verbs (#2094):
dplyr,1,415,427,FALSE,"New `add_count()` and `add_tally()` for adding an `n` column within groups (#2078, @dgrtwo).",NA
dplyr,1,416,428,FALSE,`arrange()` for grouped data frames gains a `.by_group` argument so you can choose to sort by groups if you want to (defaults to `FALSE`) (#2318),NA
dplyr,1,417,429,FALSE,"New `pull()` generic for extracting a single column either by name or position (either from the left or the right). Thanks to @paulponcet for the idea (#2054). This verb is powered with the new `select_var()` internal helper, which is exported as well. It is like `select_vars()` but returns a single variable.",NA
dplyr,1,418,430,FALSE,"`as_tibble()` is re-exported from tibble. This is the recommend way to create tibbles from existing data frames. `tbl_df()` has been softly deprecated. `tribble()` is now imported from tibble (#2336, @chrMongeau); this is now preferred to `frame_data()`.",NA
dplyr,1,419,431,FALSE,dplyr no longer messages that you need dtplyr to work with data.table (#2489).,NA
dplyr,1,420,432,FALSE,"Long deprecated `regroup()`, `mutate_each_q()` and `summarise_each_q()` functions have been removed.",NA
dplyr,1,421,433,FALSE,Deprecated `failwith()`. I'm not even sure why it was here.,NA
dplyr,1,422,434,FALSE,"Soft-deprecated `mutate_each()` and `summarise_each()`, these functions print a message which will be changed to a warning in the next release.",NA
dplyr,1,423,435,FALSE,"The `.env` argument to `sample_n()` and `sample_frac()` is defunct, passing a value to this argument print a message which will be changed to a warning in the next release.",NA
dplyr,1,424,436,FALSE,"Almost all database related code has been moved out of dplyr and into a new package, [dbplyr](https://github.com/tidyverse/dbplyr/). This makes dplyr simpler, and will make it easier to release fixes for bugs that only affect databases. `src_mysql()`, `src_postgres()`, and `src_sqlite()` will still live dplyr so your existing code continues to work.",NA
dplyr,1,425,437,FALSE,"It is no longer necessary to create a remote ""src"". Instead you can work directly with the database connection returned by DBI. This reflects the maturity of the DBI ecosystem. Thanks largely to the work of Kirill Muller (funded by the R Consortium) DBI backends are now much more consistent, comprehensive, and easier to use. That means that there's no longer a need for a layer in between you and DBI.",NA
dplyr,1,426,439,FALSE,"Internally, column names are always represented as character vectors, and not as language symbols, to avoid encoding problems on Windows (#1950, #2387, #2388).",NA
dplyr,1,427,440,FALSE,"Error messages and explanations of data frame inequality are now encoded in UTF-8, also on Windows (#2441).",NA
dplyr,1,428,441,FALSE,"Joins now always reencode character columns to UTF-8 if necessary. This gives a nice speedup, because now pointer comparison can be used instead of string comparison, but relies on a proper encoding tag for all strings (#2514).",NA
dplyr,1,429,442,FALSE,"Fixed problems when joining factor or character encodings with a mix of native and UTF-8 encoded values (#1885, #2118, #2271, #2451).",NA
dplyr,1,430,443,FALSE,"Fix `group_by()` for data frames that have UTF-8 encoded names (#2284, #2382).",NA
dplyr,1,431,444,FALSE,"New `group_vars()` generic that returns the grouping as character vector, to avoid the potentially lossy conversion to language symbols. The list returned by `group_by_prepare()` now has a new `group_names` component (#1950, #2384).",NA
dplyr,1,432,445,FALSE,"`rename()`, `select()`, `group_by()`, `filter()`, `arrange()` and `transmute()` now have scoped variants (verbs suffixed with `_if()`, `_at()` and `_all()`). Like `mutate_all()`, `summarise_if()`, etc, these variants apply an operation to a selection of variables.",NA
dplyr,1,433,446,FALSE,"The scoped verbs taking predicates (`mutate_if()`, `summarise_if()`, etc) now support S3 objects and lazy tables. S3 objects should implement methods for `length()`, `[[` and `tbl_vars()`. For lazy tables, the first 100 rows are collected and the predicate is applied on this subset of the data. This is robust for the common case of checking the type of a column (#2129).",NA
dplyr,1,434,447,FALSE,Summarise and mutate colwise functions pass `...` on the the manipulation functions.,NA
dplyr,1,435,448,FALSE,The performance of colwise verbs like `mutate_all()` is now back to where it was in `mutate_each()`.,NA
dplyr,1,436,449,FALSE,`funs()` has better handling of namespaced functions (#2089).,NA
dplyr,1,437,450,FALSE,"Fix issue with `mutate_if()` and `summarise_if()` when a predicate function returns a vector of `FALSE` (#1989, #2009, #2011).",NA
dplyr,1,438,452,FALSE,"`order_by()`, `top_n()`, `sample_n()` and `sample_frac()` now use tidyeval to capture their arguments by expression. This makes it possible to use unquoting idioms (see `vignette(""programming"")`) and fixes scoping issues (#2297).",NA
dplyr,1,439,453,FALSE,Most verbs taking dots now ignore the last argument if empty. This makes it easier to copy lines of code without having to worry about deleting trailing commas (#1039).,NA
dplyr,1,440,454,FALSE,"\[API\] The new `.data` and `.env` environments can be used inside all verbs that operate on data: `.data$column_name` accesses the column `column_name`, whereas `.env$var` accesses the external variable `var`. Columns or external variables named `.data` or `.env` are shadowed, use `.data$...` and/or `.env$...` to access them. (`.data` implements strict matching also for the `$` operator (#2591).) The `column()` and `global()` functions have been removed. They were never documented officially. Use the new `.data` and `.env` environments instead.",NA
dplyr,1,441,455,FALSE,"Expressions in verbs are now interpreted correctly in many cases that failed before (e.g., use of `$`, `case_when()`, nonstandard evaluation, ...). These expressions are now evaluated in a specially constructed temporary environment that retrieves column data on demand with the help of the `bindrcpp` package (#2190). This temporary environment poses restrictions on assignments using `<-` inside verbs. To prevent leaking of broken bindings, the temporary environment is cleared after the evaluation (#2435).",NA
dplyr,1,442,456,FALSE,"\[API\] `xxx_join.tbl_df(na_matches = ""never"")` treats all `NA` values as different from each other (and from any other value), so that they never match. This corresponds to the behavior of joins for database sources, and of database joins in general. To match `NA` values, pass `na_matches = ""na""` to the join verbs; this is only supported for data frames. The default is `na_matches = ""na""`, kept for the sake of compatibility to v0.5.0. It can be tweaked by calling `pkgconfig::set_config(""dplyr::na_matches"", ""na"")` (#2033).",NA
dplyr,1,443,457,FALSE,`common_by()` gets a better error message for unexpected inputs (#2091),NA
dplyr,1,444,458,FALSE,"Fix groups when joining grouped data frames with duplicate columns (#2330, #2334, @davidkretch).",NA
dplyr,1,445,459,FALSE,"One of the two join suffixes can now be an empty string, dplyr no longer hangs (#2228, #2445).",NA
dplyr,1,446,460,FALSE,Anti- and semi-joins warn if factor levels are inconsistent (#2741).,NA
dplyr,1,447,461,FALSE,Warnings about join column inconsistencies now contain the column names (#2728).,NA
dplyr,1,448,462,FALSE,"For selecting variables, the first selector decides if it's an inclusive selection (i.e., the initial column list is empty), or an exclusive selection (i.e., the initial column list contains all columns). This means that `select(mtcars, contains(""am""), contains(""FOO""), contains(""vs""))` now returns again both `am` and `vs` columns like in dplyr 0.4.3 (#2275, #2289, @r2evans).",NA
dplyr,1,449,463,FALSE,Select helpers now throw an error if called when no variables have been set (#2452),NA
dplyr,1,450,464,FALSE,Helper functions in `select()` (and related verbs) are now evaluated in a context where column names do not exist (#2184).,NA
dplyr,1,451,465,FALSE,"`select()` (and the internal function `select_vars()`) now support column names in addition to column positions. As a result, expressions like `select(mtcars, ""cyl"")` are now allowed.",NA
dplyr,1,452,466,FALSE,"`recode()`, `case_when()` and `coalesce()` now support splicing of arguments with rlang's `!!!` operator.",NA
dplyr,1,453,467,FALSE,`count()` now preserves the grouping of its input (#2021).,NA
dplyr,1,454,468,FALSE,`distinct()` no longer duplicates variables (#2001).,NA
dplyr,1,455,469,FALSE,"Empty `distinct()` with a grouped data frame works the same way as an empty `distinct()` on an ungrouped data frame, namely it uses all variables (#2476).",NA
dplyr,1,456,470,FALSE,`copy_to()` now returns it's output invisibly (since you're often just calling for the side-effect).,NA
dplyr,1,457,471,FALSE,`filter()` and `lag()` throw informative error if used with ts objects (#2219),NA
dplyr,1,458,472,FALSE,`mutate()` recycles list columns of length 1 (#2171).,NA
dplyr,1,459,473,FALSE,"`mutate()` gives better error message when attempting to add a non-vector column (#2319), or attempting to remove a column with `NULL` (#2187, #2439).",NA
dplyr,1,460,474,FALSE,"`summarise()` now correctly evaluates newly created factors (#2217), and can create ordered factors (#2200).",NA
dplyr,1,461,475,FALSE,"Ungrouped `summarise()` uses summary variables correctly (#2404, #2453).",NA
dplyr,1,462,476,FALSE,Grouped `summarise()` no longer converts character `NA` to empty strings (#1839).,NA
dplyr,1,463,477,FALSE,"`all_equal()` now reports multiple problems as a character vector (#1819, #2442).",NA
dplyr,1,464,478,FALSE,"`all_equal()` checks that factor levels are equal (#2440, #2442).",NA
dplyr,1,465,479,FALSE,`bind_rows()` and `bind_cols()` give an error for database tables (#2373).,NA
dplyr,1,466,480,FALSE,"`bind_rows()` works correctly with `NULL` arguments and an `.id` argument (#2056), and also for zero-column data frames (#2175).",NA
dplyr,1,467,481,FALSE,"Breaking change: `bind_rows()` and `combine()` are more strict when coercing. Logical values are no longer coerced to integer and numeric. Date, POSIXct and other integer or double-based classes are no longer coerced to integer or double as there is chance of attributes or information being lost (#2209, @zeehio).",NA
dplyr,1,468,482,FALSE,`bind_cols()` now calls `tibble::repair_names()` to ensure that all names are unique (#2248).,NA
dplyr,1,469,483,FALSE,`bind_cols()` handles empty argument list (#2048).,NA
dplyr,1,470,484,FALSE,"`bind_cols()` better handles `NULL` inputs (#2303, #2443).",NA
dplyr,1,471,485,FALSE,"`bind_rows()` explicitly rejects columns containing data frames (#2015, #2446).",NA
dplyr,1,472,486,FALSE,"`bind_rows()` and `bind_cols()` now accept vectors. They are treated as rows by the former and columns by the latter. Rows require inner names like `c(col1 = 1, col2 = 2)`, while columns require outer names: `col1 = c(1, 2)`. Lists are still treated as data frames but can be spliced explicitly with `!!!`, e.g. `bind_rows(!!! x)` (#1676).",NA
dplyr,1,473,487,FALSE,"`rbind_list()` and `rbind_all()` now call `.Deprecated()`, they will be removed in the next CRAN release. Please use `bind_rows()` instead.",NA
dplyr,1,474,488,FALSE,"`combine()` accepts `NA` values (#2203, @zeehio)",NA
dplyr,1,475,489,FALSE,"`combine()` and `bind_rows()` with character and factor types now always warn about the coercion to character (#2317, @zeehio)",NA
dplyr,1,476,490,FALSE,`combine()` and `bind_rows()` accept `difftime` objects.,NA
dplyr,1,477,491,FALSE,"`mutate` coerces results from grouped dataframes accepting combinable data types (such as `integer` and `numeric`). (#1892, @zeehio)",NA
dplyr,1,478,492,FALSE,`%in%` gets new hybrid handler (#126).,NA
dplyr,1,479,493,FALSE,`between()` returns NA if `left` or `right` is `NA` (fixes #2562).,NA
dplyr,1,480,494,FALSE,"`case_when()` supports `NA` values (#2000, @tjmahr).",NA
dplyr,1,481,495,FALSE,"`first()`, `last()`, and `nth()` have better default values for factor, Dates, POSIXct, and data frame inputs (#2029).",NA
dplyr,1,482,496,FALSE,"Fixed segmentation faults in hybrid evaluation of `first()`, `last()`, `nth()`, `lead()`, and `lag()`. These functions now always fall back to the R implementation if called with arguments that the hybrid evaluator cannot handle (#948, #1980).",NA
dplyr,1,483,497,FALSE,`n_distinct()` gets larger hash tables given slightly better performance (#977).,NA
dplyr,1,484,498,FALSE,`nth()` and `ntile()` are more careful about proper data types of their return values (#2306).,NA
dplyr,1,485,499,FALSE,`ntile()` ignores `NA` when computing group membership (#2564).,NA
dplyr,1,486,500,FALSE,"`lag()` enforces integer `n` (#2162, @kevinushey).",NA
dplyr,1,487,501,FALSE,"hybrid `min()` and `max()` now always return a `numeric` and work correctly in edge cases (empty input, all `NA`, ...) (#2305, #2436).",NA
dplyr,1,488,502,FALSE,"`min_rank(""string"")` no longer segfaults in hybrid evaluation (#2279, #2444).",NA
dplyr,1,489,503,FALSE,`recode()` can now recode a factor to other types (#2268),NA
dplyr,1,490,504,FALSE,"`recode()` gains `.dots` argument to support passing replacements as list (#2110, @jlegewie).",NA
dplyr,1,491,505,FALSE,Many error messages are more helpful by referring to a column name or a position in the argument list (#2448).,NA
dplyr,1,492,506,FALSE,New `is_grouped_df()` alias to `is.grouped_df()`.,NA
dplyr,1,493,507,FALSE,"`tbl_vars()` now has a `group_vars` argument set to `TRUE` by default. If `FALSE`, group variables are not returned.",NA
dplyr,1,494,508,FALSE,Fixed segmentation fault after calling `rename()` on an invalid grouped data frame (#2031).,NA
dplyr,1,495,509,FALSE,`rename_vars()` gains a `strict` argument to control if an error is thrown when you try and rename a variable that doesn't exist.,NA
dplyr,1,496,510,FALSE,Fixed undefined behavior for `slice()` on a zero-column data frame (#2490).,NA
dplyr,1,497,511,FALSE,Fixed very rare case of false match during join (#2515).,NA
dplyr,1,498,512,FALSE,Restricted workaround for `match()` to R 3.3.0. (#1858).,NA
dplyr,1,499,513,FALSE,dplyr now warns on load when the version of R or Rcpp during installation is different to the currently installed version (#2514).,NA
dplyr,1,500,514,FALSE,Fixed improper reuse of attributes when creating a list column in `summarise()` and perhaps `mutate()` (#2231).,NA
dplyr,1,501,515,FALSE,"`mutate()` and `summarise()` always strip the `names` attribute from new or updated columns, even for ungrouped operations (#1689).",NA
dplyr,1,502,516,FALSE,Fixed rare error that could lead to a segmentation fault in `all_equal(ignore_col_order = FALSE)` (#2502).,NA
dplyr,1,503,517,FALSE,"The ""dim"" and ""dimnames"" attributes are always stripped when copying a vector (#1918, #2049).",NA
dplyr,1,504,518,FALSE,"`grouped_df` and `rowwise` are registered officially as S3 classes. This makes them easier to use with S4 (#2276, @joranE, #2789).",NA
dplyr,1,505,519,FALSE,"All operations that return tibbles now include the `""tbl""` class. This is important for correct printing with tibble 1.3.1 (#2789).",NA
dplyr,1,506,520,FALSE,Makeflags uses PKG_CPPFLAGS for defining preprocessor macros.,NA
dplyr,1,507,521,FALSE,"astyle formatting for C++ code, tested but not changed as part of the tests (#2086, #2103).",NA
dplyr,1,508,522,FALSE,Update RStudio project settings to install tests (#1952).,NA
dplyr,1,509,523,FALSE,"Using `Rcpp::interfaces()` to register C callable interfaces, and registering all native exported functions via `R_registerRoutines()` and `useDynLib(.registration = TRUE)` (#2146).",NA
dplyr,1,510,524,FALSE,"Formatting of grouped data frames now works by overriding the `tbl_sum()` generic instead of `print()`. This means that the output is more consistent with tibble, and that `format()` is now supported also for SQL sources (#2781).",NA
dplyr,1,511,525,FALSE,`arrange()` once again ignores grouping (#1206).,NA
dplyr,1,512,526,FALSE,"`distinct()` now only keeps the distinct variables. If you want to return all variables (using the first row for non-distinct values) use `.keep_all = TRUE` (#1110). For SQL sources, `.keep_all = FALSE` is implemented using `GROUP BY`, and `.keep_all = TRUE` raises an error (#1937, #1942, @krlmlr). (The default behaviour of using all variables when none are specified remains - this note only applies if you select some variables).",NA
dplyr,1,513,527,FALSE,"The select helper functions `starts_with()`, `ends_with()` etc are now real exported functions. This means that you'll need to import those functions if you're using from a package where dplyr is not attached. i.e. `dplyr::select(mtcars, starts_with(""m""))` used to work, but now you'll need `dplyr::select(mtcars, dplyr::starts_with(""m""))`.",NA
dplyr,1,514,528,FALSE,"The long deprecated `chain()`, `chain_q()` and `%.%` have been removed. Please use `%>%` instead.",NA
dplyr,1,515,529,FALSE,`id()` has been deprecated. Please use `group_indices()` instead (#808).,NA
dplyr,1,516,530,FALSE,`rbind_all()` and `rbind_list()` are formally deprecated. Please use `bind_rows()` instead (#803).,NA
dplyr,1,517,531,FALSE,Outdated benchmarking demos have been removed (#1487).,NA
dplyr,1,518,532,FALSE,Code related to starting and signalling clusters has been moved out to [multidplyr](https://github.com/tidyverse/multidplyr).,NA
dplyr,1,519,533,FALSE,"`coalesce()` finds the first non-missing value from a set of vectors. (#1666, thanks to @krlmlr for initial implementation).",NA
dplyr,1,520,534,FALSE,`case_when()` is a general vectorised if + else if (#631).,NA
dplyr,1,521,535,FALSE,"`if_else()` is a vectorised if statement: it's a stricter (type-safe), faster, and more predictable version of `ifelse()`. In SQL it is translated to a `CASE` statement.",NA
dplyr,1,522,536,FALSE,`na_if()` makes it easy to replace a certain value with an `NA` (#1707). In SQL it is translated to `NULL_IF`.,NA
dplyr,1,523,537,FALSE,"`near(x, y)` is a helper for `abs(x - y) < tol` (#1607).",NA
dplyr,1,524,538,FALSE,`recode()` is vectorised equivalent to `switch()` (#1710).,NA
dplyr,1,525,539,FALSE,"`union_all()` method. Maps to `UNION ALL` for SQL sources, `bind_rows()` for data frames/tbl_dfs, and `combine()` for vectors (#1045).",NA
dplyr,1,526,540,FALSE,"A new family of functions replace `summarise_each()` and `mutate_each()` (which will thus be deprecated in a future release). `summarise_all()` and `mutate_all()` apply a function to all columns while `summarise_at()` and `mutate_at()` operate on a subset of columns. These columns are selected with either a character vector of columns names, a numeric vector of column positions, or a column specification with `select()` semantics generated by the new `columns()` helper. In addition, `summarise_if()` and `mutate_if()` take a predicate function or a logical vector (these verbs currently require local sources). All these functions can now take ordinary functions instead of a list of functions generated by `funs()` (though this is only useful for local sources). (#1845, @lionel-)",NA
dplyr,1,527,541,FALSE,"`select_if()` lets you select columns with a predicate function. Only compatible with local sources. (#497, #1569, @lionel-)",NA
dplyr,1,528,542,FALSE,"`$` and `[[` methods that never do partial matching (#1504), and throw an error if the variable does not exist.",NA
dplyr,1,529,543,FALSE,"`all_equal()` allows to compare data frames ignoring row and column order, and optionally ignoring minor differences in type (e.g. int vs. double) (#821). The test handles the case where the df has 0 columns (#1506). The test fails fails when convert is `FALSE` and types don't match (#1484).",NA
dplyr,1,530,544,FALSE,"`all_equal()` shows better error message when comparing raw values or when types are incompatible and `convert = TRUE` (#1820, @krlmlr).",NA
dplyr,1,531,545,FALSE,`add_row()` makes it easy to add a new row to data frame (#1021),NA
dplyr,1,532,546,FALSE,"`as_data_frame()` is now an S3 generic with methods for lists (the old `as_data_frame()`), data frames (trivial), and matrices (with efficient C++ implementation) (#876). It no longer strips subclasses.",NA
dplyr,1,533,547,FALSE,"The internals of `data_frame()` and `as_data_frame()` have been aligned, so `as_data_frame()` will now automatically recycle length-1 vectors. Both functions give more informative error messages if you attempting to create an invalid data frame. You can no longer create a data frame with duplicated names (#820). Both check for `POSIXlt` columns, and tell you to use `POSIXct` instead (#813).",NA
dplyr,1,534,548,FALSE,"`frame_data()` properly constructs rectangular tables (#1377, @kevinushey), and supports list-cols.",NA
dplyr,1,535,549,FALSE,`glimpse()` is now a generic. The default method dispatches to `str()` (#1325). It now (invisibly) returns its first argument (#1570).,NA
dplyr,1,536,550,FALSE,`lst()` and `lst_()` which create lists in the same way that `data_frame()` and `data_frame_()` create data frames (#1290).,NA
dplyr,1,537,551,FALSE,`print.tbl_df()` is considerably faster if you have very wide data frames. It will now also only list the first 100 additional variables not already on screen - control this with the new `n_extra` parameter to `print()` (#1161). When printing a grouped data frame the number of groups is now printed with thousands separators (#1398). The type of list columns is correctly printed (#1379),NA
dplyr,1,538,552,FALSE,"Package includes `setOldClass(c(""tbl_df"", ""tbl"", ""data.frame""))` to help with S4 dispatch (#969).",NA
dplyr,1,539,553,FALSE,`tbl_df` automatically generates column names (#1606).,NA
dplyr,1,540,554,FALSE,"new `as_data_frame.tbl_cube()` (#1563, @krlmlr).",NA
dplyr,1,541,555,FALSE,"`tbl_cube`s are now constructed correctly from data frames, duplicate dimension values are detected, missing dimension values are filled with `NA`. The construction from data frames now guesses the measure variables by default, and allows specification of dimension and/or measure variables (#1568, @krlmlr).",NA
dplyr,1,542,556,FALSE,"Swap order of `dim_names` and `met_name` arguments in `as.tbl_cube` (for `array`, `table` and `matrix`) for consistency with `tbl_cube` and `as.tbl_cube.data.frame`. Also, the `met_name` argument to `as.tbl_cube.table` now defaults to `""Freq""` for consistency with `as.data.frame.table` (@krlmlr, #1374).",NA
dplyr,1,543,557,FALSE,"`as_data_frame()` on SQL sources now returns all rows (#1752, #1821, @krlmlr).",NA
dplyr,1,544,558,FALSE,"`compute()` gets new parameters `indexes` and `unique_indexes` that make it easier to add indexes (#1499, @krlmlr).",NA
dplyr,1,545,559,FALSE,`db_explain()` gains a default method for DBIConnections (#1177).,NA
dplyr,1,546,560,FALSE,"The backend testing system has been improved. This lead to the removal of `temp_srcs()`. In the unlikely event that you were using this function, you can instead use `test_register_src()`, `test_load()`, and `test_frame()`.",NA
dplyr,1,547,561,FALSE,You can now use `right_join()` and `full_join()` with remote tables (#1172).,NA
dplyr,1,548,562,FALSE,"`src_memdb()` is a session-local in-memory SQLite database. `memdb_frame()` works like `data_frame()`, but creates a new table in that database.",NA
dplyr,1,549,563,FALSE,"`src_sqlite()` now uses a stricter quoting character, `` ` ``, instead of `""`. SQLite ""helpfully"" will convert `""x""` into a string if there is no identifier called x in the current scope (#1426).",NA
dplyr,1,550,564,FALSE,`src_sqlite()` throws errors if you try and use it with window functions (#907).,NA
dplyr,1,551,565,FALSE,`filter.tbl_sql()` now puts parens around each argument (#934).,NA
dplyr,1,552,566,FALSE,Unary `-` is better translated (#1002).,NA
dplyr,1,553,567,FALSE,"`escape.POSIXt()` method makes it easier to use date times. The date is rendered in ISO 8601 format in UTC, which should work in most databases (#857).",NA
dplyr,1,554,568,FALSE,`is.na()` gets a missing space (#1695).,NA
dplyr,1,555,569,FALSE,"`if`, `is.na()`, and `is.null()` get extra parens to make precedence more clear (#1695).",NA
dplyr,1,556,570,FALSE,`pmin()` and `pmax()` are translated to `MIN()` and `MAX()` (#1711).,NA
dplyr,1,557,571,FALSE,Window functions:,NA
dplyr,2,557,572,FALSE,* Work on ungrouped data (#1061).,Window functions:
dplyr,2,557,573,FALSE,* Warning if order is not set on cumulative window functions.,Window functions:
dplyr,2,557,574,FALSE,"* Multiple partitions or ordering variables in windowed functions no longer generate extra parentheses, so should work for more databases (#1060)",Window functions:
dplyr,1,561,575,FALSE,"`sql_join()` has been considerably simplified - it is now only responsible for generating the join query, not for generating the intermediate selects that rename the variable. Similarly for `sql_semi_join()`. If you've provided new methods in your backend, you'll need to rewrite.",NA
dplyr,1,562,576,FALSE,`select_query()` gains a distinct argument which is used for generating queries for `distinct()`. It loses the `offset` argument which was never used (and hence never tested).,NA
dplyr,1,563,577,FALSE,`src_translate_env()` has been replaced by `sql_translate_env()` which should have methods for the connection object.,NA
dplyr,1,564,578,FALSE,"`translate_sql()` and `partial_eval()` got a new API: now use connection + variable names, rather than a `tbl`. This makes testing considerably easier. `translate_sql_q()` has been renamed to `translate_sql_()`.",NA
dplyr,1,565,579,FALSE,"Also note that the sql generation generics now have a default method, instead methods for DBIConnection and NULL.",NA
dplyr,1,566,580,FALSE,"Avoiding segfaults in presence of `raw` columns (#1803, #1817, @krlmlr).",NA
dplyr,1,567,581,FALSE,"`arrange()` fails gracefully on list columns (#1489) and matrices (#1870, #1945, @krlmlr).",NA
dplyr,1,568,582,FALSE,"`count()` now adds additional grouping variables, rather than overriding existing (#1703). `tally()` and `count()` can now count a variable called `n` (#1633). Weighted `count()`/`tally()` ignore `NA`s (#1145).",NA
dplyr,1,569,583,FALSE,"The progress bar in `do()` is now updated at most 20 times per second, avoiding unnecessary redraws (#1734, @mkuhn)",NA
dplyr,1,570,584,FALSE,`distinct()` doesn't crash when given a 0-column data frame (#1437).,NA
dplyr,1,571,585,FALSE,"`filter()` throws an error if you supply an named arguments. This is usually a type: `filter(df, x = 1)` instead of `filter(df, x == 1)` (#1529).",NA
dplyr,1,572,586,FALSE,"`summarise()` correctly coerces factors with different levels (#1678), handles min/max of already summarised variable (#1622), and supports data frames as columns (#1425).",NA
dplyr,1,573,587,FALSE,"`select()` now informs you that it adds missing grouping variables (#1511). It works even if the grouping variable has a non-syntactic name (#1138). Negating a failed match (e.g. `select(mtcars, -contains(""x""))`) returns all columns, instead of no columns (#1176) The `select()` helpers are now exported and have their own documentation (#1410). `one_of()` gives a useful error message if variables names are not found in data frame (#1407).",NA
dplyr,1,574,588,FALSE,"The naming behaviour of `summarise_each()` and `mutate_each()` has been tweaked so that you can force inclusion of both the function and the variable name: `summarise_each(mtcars, funs(mean = mean), everything())` (#442).",NA
dplyr,1,575,589,FALSE,"`mutate()` handles factors that are all `NA` (#1645), or have different levels in different groups (#1414). It disambiguates `NA` and `NaN` (#1448), and silently promotes groups that only contain `NA` (#1463). It deep copies data in list columns (#1643), and correctly fails on incompatible columns (#1641). `mutate()` on a grouped data no longer groups grouping attributes (#1120). `rowwise()` mutate gives expected results (#1381).",NA
dplyr,1,576,590,FALSE,"`one_of()` tolerates unknown variables in `vars`, but warns (#1848, @jennybc).",NA
dplyr,1,577,591,FALSE,`print.grouped_df()` passes on `...` to `print()` (#1893).,NA
dplyr,1,578,592,FALSE,`slice()` correctly handles grouped attributes (#1405).,NA
dplyr,1,579,593,FALSE,`ungroup()` generic gains `...` (#922).,NA
dplyr,1,580,594,FALSE,`bind_cols()` matches the behaviour of `bind_rows()` and ignores `NULL` inputs (#1148). It also handles `POSIXct`s with integer base type (#1402).,NA
dplyr,1,581,595,FALSE,"`bind_rows()` handles 0-length named lists (#1515), promotes factors to characters (#1538), and warns when binding factor and character (#1485). bind_rows()\` is more flexible in the way it can accept data frames, lists, list of data frames, and list of lists (#1389).",NA
dplyr,1,582,596,FALSE,"`bind_rows()` rejects `POSIXlt` columns (#1875, @krlmlr).",NA
dplyr,1,583,597,FALSE,Both `bind_cols()` and `bind_rows()` infer classes and grouping information from the first data frame (#1692).,NA
dplyr,1,584,598,FALSE,`rbind()` and `cbind()` get `grouped_df()` methods that make it harder to create corrupt data frames (#1385). You should still prefer `bind_rows()` and `bind_cols()`.,NA
dplyr,1,585,599,FALSE,"Joins now use correct class when joining on `POSIXct` columns (#1582, @joel23888), and consider time zones (#819). Joins handle a `by` that is empty (#1496), or has duplicates (#1192). Suffixes grow progressively to avoid creating repeated column names (#1460). Joins on string columns should be substantially faster (#1386). Extra attributes are ok if they are identical (#1636). Joins work correct when factor levels not equal (#1712, #1559). Anti- and semi-joins give correct result when by variable is a factor (#1571), but warn if factor levels are inconsistent (#2741). A clear error message is given for joins where an explicit `by` contains unavailable columns (#1928, #1932). Warnings about join column inconsistencies now contain the column names (#2728).",NA
dplyr,1,586,600,FALSE,"`inner_join()`, `left_join()`, `right_join()`, and `full_join()` gain a `suffix` argument which allows you to control what suffix duplicated variable names receive (#1296).",NA
dplyr,1,587,601,FALSE,"Set operations (`intersect()`, `union()` etc) respect coercion rules (#799). `setdiff()` handles factors with `NA` levels (#1526).",NA
dplyr,1,588,602,FALSE,"There were a number of fixes to enable joining of data frames that don't have the same encoding of column names (#1513), including working around bug 16885 regarding `match()` in R 3.3.0 (#1806, #1810, @krlmlr).",NA
dplyr,1,589,603,FALSE,`combine()` silently drops `NULL` inputs (#1596).,NA
dplyr,1,590,604,FALSE,Hybrid `cummean()` is more stable against floating point errors (#1387).,NA
dplyr,1,591,605,FALSE,"Hybrid `lead()` and `lag()` received a considerable overhaul. They are more careful about more complicated expressions (#1588), and falls back more readily to pure R evaluation (#1411). They behave correctly in `summarise()` (#1434). and handle default values for string columns.",NA
dplyr,1,592,606,FALSE,Hybrid `min()` and `max()` handle empty sets (#1481).,NA
dplyr,1,593,607,FALSE,"`n_distinct()` uses multiple arguments for data frames (#1084), falls back to R evaluation when needed (#1657), reverting decision made in (#567). Passing no arguments gives an error (#1957, #1959, @krlmlr).",NA
dplyr,1,594,608,FALSE,"`nth()` now supports negative indices to select from end, e.g. `nth(x, -2)` selects the 2nd value from the end of `x` (#1584).",NA
dplyr,1,595,609,FALSE,"`top_n()` can now also select bottom `n` values by passing a negative value to `n` (#1008, #1352).",NA
dplyr,1,596,610,FALSE,Hybrid evaluation leaves formulas untouched (#1447).,NA
dplyr,1,597,611,FALSE,"`frame_data()` provides a means for constructing `data_frame`s using a simple row-wise language. (#1358, @kevinushey)",NA
dplyr,1,598,612,FALSE,`all.equal()` no longer runs all outputs together (#1130).,NA
dplyr,1,599,613,FALSE,`as_data_frame()` gives better error message with NA column names (#1101).,NA
dplyr,1,600,614,FALSE,`[.tbl_df` is more careful about subsetting column names (#1245).,NA
dplyr,1,601,615,FALSE,`arrange()` and `mutate()` work on empty data frames (#1142).,NA
dplyr,1,602,616,FALSE,"`arrange()`, `filter()`, `slice()`, and `summarise()` preserve data frame meta attributes (#1064).",NA
dplyr,1,603,617,FALSE,"`bind_rows()` and `bind_cols()` accept lists (#1104): during initial data cleaning you no longer need to convert lists to data frames, but can instead feed them to `bind_rows()` directly.",NA
dplyr,1,604,618,FALSE,"`bind_rows()` gains a `.id` argument. When supplied, it creates a new column that gives the name of each data frame (#1337, @lionel-).",NA
dplyr,1,605,619,FALSE,"`bind_rows()` respects the `ordered` attribute of factors (#1112), and does better at comparing `POSIXct`s (#1125). The `tz` attribute is ignored when determining if two `POSIXct` vectors are comparable. If the `tz` of all inputs is the same, it's used, otherwise its set to `UTC`.",NA
dplyr,1,606,620,FALSE,"`data_frame()` always produces a `tbl_df` (#1151, @kevinushey)",NA
dplyr,1,607,621,FALSE,"`filter(x, TRUE, TRUE)` now just returns `x` (#1210), it doesn't internally modify the first argument (#971), and it now works with rowwise data (#1099). It once again works with data tables (#906).",NA
dplyr,1,608,622,FALSE,"`glimpse()` also prints out the number of variables in addition to the number of observations (@ilarischeinin, #988).",NA
dplyr,1,609,623,FALSE,"Joins handles matrix columns better (#1230), and can join `Date` objects with heterogenous representations (some `Date`s are integers, while other are numeric). This also improves `all.equal()` (#1204).",NA
dplyr,1,610,624,FALSE,Fixed `percent_rank()` and `cume_dist()` so that missing values no longer affect denominator (#1132).,NA
dplyr,1,611,625,FALSE,"`print.tbl_df()` now displays the class for all variables, not just those that don't fit on the screen (#1276). It also displays duplicated column names correctly (#1159).",NA
dplyr,1,612,626,FALSE,`print.grouped_df()` now tells you how many groups there are.,NA
dplyr,1,613,627,FALSE,"`mutate()` can set to `NULL` the first column (used to segfault, #1329) and it better protects intermediary results (avoiding random segfaults, #1231).",NA
dplyr,1,614,628,FALSE,"`mutate()` on grouped data handles the special case where for the first few groups, the result consists of a `logical` vector with only `NA`. This can happen when the condition of an `ifelse` is an all `NA` logical vector (#958).",NA
dplyr,1,615,629,FALSE,`mutate.rowwise_df()` handles factors (#886) and correctly handles 0-row inputs (#1300).,NA
dplyr,1,616,630,FALSE,`n_distinct()` gains an `na_rm` argument (#1052).,NA
dplyr,1,617,631,FALSE,"The `Progress` bar used by `do()` now respects global option `dplyr.show_progress` (default is TRUE) so you can turn it off globally (@jimhester #1264, #1226).",NA
dplyr,1,618,632,FALSE,"`summarise()` handles expressions that returning heterogenous outputs, e.g. `median()`, which that sometimes returns an integer, and other times a numeric (#893).",NA
dplyr,1,619,633,FALSE,`slice()` silently drops columns corresponding to an NA (#1235).,NA
dplyr,1,620,634,FALSE,`ungroup.rowwise_df()` gives a `tbl_df` (#936).,NA
dplyr,1,621,635,FALSE,More explicit duplicated column name error message (#996).,NA
dplyr,1,622,636,FALSE,"When "","" is already being used as the decimal point (`getOption(""OutDec"")`), use ""."" as the thousands separator when printing out formatted numbers (@ilarischeinin, #988).",NA
dplyr,1,623,637,FALSE,"`db_query_fields.SQLiteConnection` uses `build_sql` rather than `paste0` (#926, @NikNakk)",NA
dplyr,1,624,638,FALSE,Improved handling of `log()` (#1330).,NA
dplyr,1,625,639,FALSE,"`n_distinct(x)` is translated to `COUNT(DISTINCT(x))` (@skparkes, #873).",NA
dplyr,1,626,640,FALSE,`print(n = Inf)` now works for remote sources (#1310).,NA
dplyr,1,627,641,FALSE,Hybrid evaluation does not take place for objects with a class (#1237).,NA
dplyr,1,628,642,FALSE,Improved `$` handling (#1134).,NA
dplyr,1,629,643,FALSE,Simplified code for `lead()` and `lag()` and make sure they work properly on factors (#955). Both respect the `default` argument (#915).,NA
dplyr,1,630,644,FALSE,"`mutate` can set to `NULL` the first column (used to segfault, #1329).",NA
dplyr,1,631,645,FALSE,`filter` on grouped data handles indices correctly (#880).,NA
dplyr,1,632,646,FALSE,`sum()` issues a warning about integer overflow (#1108).,NA
dplyr,1,633,647,FALSE,"`lag()` and `lead()` for grouped data were confused about indices and therefore produced wrong results (#925, #937). `lag()` once again overrides `lag()` instead of just the default method `lag.default()`. This is necessary due to changes in R CMD check. To use the lag function provided by another package, use `pkg::lag`.",NA
dplyr,1,634,648,FALSE,Fixed a number of memory issues identified by valgrind.,NA
dplyr,1,635,649,FALSE,Improved performance when working with large number of columns (#879).,NA
dplyr,1,636,650,FALSE,Lists-cols that contain data frames now print a slightly nicer summary (#1147),NA
dplyr,1,637,651,FALSE,Set operations give more useful error message on incompatible data frames (#903).,NA
dplyr,1,638,652,FALSE,`all.equal()` gives the correct result when `ignore_row_order` is `TRUE` (#1065) and `all.equal()` correctly handles character missing values (#1095).,NA
dplyr,1,639,653,FALSE,`bind_cols()` always produces a `tbl_df` (#779).,NA
dplyr,1,640,654,FALSE,`bind_rows()` gains a test for a form of data frame corruption (#1074).,NA
dplyr,1,641,655,FALSE,`bind_rows()` and `summarise()` now handles complex columns (#933).,NA
dplyr,1,642,656,FALSE,Workaround for using the constructor of `DataFrame` on an unprotected object (#998),NA
dplyr,1,643,657,FALSE,Improved performance when working with large number of columns (#879).,NA
dplyr,1,645,659,FALSE,`add_rownames()` turns row names into an explicit variable (#639).,NA
dplyr,1,646,660,FALSE,`as_data_frame()` efficiently coerces a list into a data frame (#749).,NA
dplyr,1,647,661,FALSE,`bind_rows()` and `bind_cols()` efficiently bind a list of data frames by row or column. `combine()` applies the same coercion rules to vectors (it works like `c()` or `unlist()` but is consistent with the `bind_rows()` rules).,NA
dplyr,1,648,662,FALSE,"`right_join()` (include all rows in `y`, and matching rows in `x`) and `full_join()` (include all rows in `x` and `y`) complete the family of mutating joins (#96).",NA
dplyr,1,649,663,FALSE,`group_indices()` computes a unique integer id for each group (#771). It can be called on a grouped_df without any arguments or on a data frame with same arguments as `group_by()`.,NA
dplyr,1,650,664,FALSE,"`vignette(""data_frames"")` describes dplyr functions that make it easier and faster to create and coerce data frames. It subsumes the old `memory` vignette.",NA
dplyr,1,651,665,FALSE,"`vignette(""two-table"")` describes how two-table verbs work in dplyr.",NA
dplyr,1,652,666,FALSE,`data_frame()` (and `as_data_frame()` & `tbl_df()`) now explicitly forbid columns that are data frames or matrices (#775). All columns must be either a 1d atomic vector or a 1d list.,NA
dplyr,1,653,667,FALSE,"`do()` uses lazyeval to correctly evaluate its arguments in the correct environment (#744), and new `do_()` is the SE equivalent of `do()` (#718). You can modify grouped data in place: this is probably a bad idea but it's sometimes convenient (#737). `do()` on grouped data tables now passes in all columns (not all columns except grouping vars) (#735, thanks to @kismsu). `do()` with database tables no longer potentially includes grouping variables twice (#673). Finally, `do()` gives more consistent outputs when there are no rows or no groups (#625).",NA
dplyr,1,654,668,FALSE,"`first()` and `last()` preserve factors, dates and times (#509).",NA
dplyr,1,655,669,FALSE,Overhaul of single table verbs for data.table backend. They now all use a consistent (and simpler) code base. This ensures that (e.g.) `n()` now works in all verbs (#579).,NA
dplyr,1,656,670,FALSE,"In `*_join()`, you can now name only those variables that are different between the two tables, e.g. `inner_join(x, y, c(""a"", ""b"", ""c"" = ""d""))` (#682). If non-join columns are the same, dplyr will add `.x` and `.y` suffixes to distinguish the source (#655).",NA
dplyr,1,657,671,FALSE,`mutate()` handles complex vectors (#436) and forbids `POSIXlt` results (instead of crashing) (#670).,NA
dplyr,1,658,672,FALSE,"`select()` now implements a more sophisticated algorithm so if you're doing multiples includes and excludes with and without names, you're more likely to get what you expect (#644). You'll also get a better error message if you supply an input that doesn't resolve to an integer column position (#643).",NA
dplyr,1,659,673,FALSE,"Printing has received a number of small tweaks. All `print()` methods invisibly return their input so you can interleave `print()` statements into a pipeline to see interim results. `print()` will column names of 0 row data frames (#652), and will never print more 20 rows (i.e. `options(dplyr.print_max)` is now 20), not 100 (#710). Row names are no never printed since no dplyr method is guaranteed to preserve them (#669). `glimpse()` prints the number of observations (#692) `type_sum()` gains a data frame method.",NA
dplyr,1,660,674,FALSE,`summarise()` handles list output columns (#832),NA
dplyr,1,661,675,FALSE,"`slice()` works for data tables (#717). Documentation clarifies that slice can't work with relational databases, and the examples show how to achieve the same results using `filter()` (#720).",NA
dplyr,1,662,676,FALSE,dplyr now requires RSQLite \>= 1.0. This shouldn't affect your code in any way (except that RSQLite now doesn't need to be attached) but does simplify the internals (#622).,NA
dplyr,1,663,677,FALSE,"Functions that need to combine multiple results into a single column (e.g. `join()`, `bind_rows()` and `summarise()`) are more careful about coercion. Joining factors with the same levels in the same order preserves the original levels (#675). Joining factors with non-identical levels generates a warning and coerces to character (#684). Joining a character to a factor (or vice versa) generates a warning and coerces to character. Avoid these warnings by ensuring your data is compatible before joining. `rbind_list()` will throw an error if you attempt to combine an integer and factor (#751). `rbind()`ing a column full of `NA`s is allowed and just collects the appropriate missing value for the column type being collected (#493). `summarise()` is more careful about `NA`, e.g. the decision on the result type will be delayed until the first non NA value is returned (#599). It will complain about loss of precision coercions, which can happen for expressions that return integers for some groups and a doubles for others (#599).",NA
dplyr,1,664,678,FALSE,"A number of functions gained new or improved hybrid handlers: `first()`, `last()`, `nth()` (#626), `lead()` & `lag()` (#683), `%in%` (#126). That means when you use these functions in a dplyr verb, we handle them in C++, rather than calling back to R, and hence improving performance. Hybrid `min_rank()` correctly handles `NaN` values (#726). Hybrid implementation of `nth()` falls back to R evaluation when `n` is not a length one integer or numeric, e.g. when it's an expression (#734). Hybrid `dense_rank()`, `min_rank()`, `cume_dist()`, `ntile()`, `row_number()` and `percent_rank()` now preserve NAs (#774)",NA
dplyr,1,665,679,FALSE,`filter` returns its input when it has no rows or no columns (#782).,NA
dplyr,1,666,680,FALSE,"Join functions keep attributes (e.g. time zone information) from the left argument for `POSIXct` and `Date` objects (#819), and only only warn once about each incompatibility (#798).",NA
dplyr,1,667,681,FALSE,"`[.tbl_df` correctly computes row names for 0-column data frames, avoiding problems with xtable (#656). `[.grouped_df` will silently drop grouping if you don't include the grouping columns (#733).",NA
dplyr,1,668,682,FALSE,`data_frame()` now acts correctly if the first argument is a vector to be recycled. (#680 thanks @jimhester),NA
dplyr,1,669,683,FALSE,"`filter.data.table()` works if the table has a variable called ""V1"" (#615).",NA
dplyr,1,670,684,FALSE,"`*_join()` keeps columns in original order (#684). Joining a factor to a character vector doesn't segfault (#688). `*_join` functions can now deal with multiple encodings (#769), and correctly name results (#855).",NA
dplyr,1,671,685,FALSE,`*_join.data.table()` works when data.table isn't attached (#786).,NA
dplyr,1,672,686,FALSE,`group_by()` on a data table preserves original order of the rows (#623). `group_by()` supports variables with more than 39 characters thanks to a fix in lazyeval (#705). It gives meaningful error message when a variable is not found in the data frame (#716).,NA
dplyr,1,673,687,FALSE,`grouped_df()` requires `vars` to be a list of symbols (#665).,NA
dplyr,1,674,688,FALSE,"`min(.,na.rm = TRUE)` works with `Date`s built on numeric vectors (#755).",NA
dplyr,1,675,689,FALSE,`rename_()` generic gets missing `.dots` argument (#708).,NA
dplyr,1,676,690,FALSE,"`row_number()`, `min_rank()`, `percent_rank()`, `dense_rank()`, `ntile()` and `cume_dist()` handle data frames with 0 rows (#762). They all preserve missing values (#774). `row_number()` doesn't segfault when giving an external variable with the wrong number of variables (#781).",NA
dplyr,1,677,691,FALSE,`group_indices` handles the edge case when there are no variables (#867).,NA
dplyr,1,678,692,FALSE,Removed bogus `NAs introduced by coercion to integer range` on 32-bit Windows (#2708).,NA
dplyr,1,680,694,FALSE,"`between()` vector function efficiently determines if numeric values fall in a range, and is translated to special form for SQL (#503).",NA
dplyr,1,681,695,FALSE,`count()` makes it even easier to do (weighted) counts (#358).,NA
dplyr,1,682,696,FALSE,"`data_frame()` by @kevinushey is a nicer way of creating data frames. It never coerces column types (no more `stringsAsFactors = FALSE`!), never munges column names, and never adds row names. You can use previously defined columns to compute new columns (#376).",NA
dplyr,1,683,697,FALSE,`distinct()` returns distinct (unique) rows of a tbl (#97). Supply additional variables to return the first row for each unique combination of variables.,NA
dplyr,1,684,698,FALSE,"Set operations, `intersect()`, `union()` and `setdiff()` now have methods for data frames, data tables and SQL database tables (#93). They pass their arguments down to the base functions, which will ensure they raise errors if you pass in two many arguments.",NA
dplyr,1,685,699,FALSE,"Joins (e.g. `left_join()`, `inner_join()`, `semi_join()`, `anti_join()`) now allow you to join on different variables in `x` and `y` tables by supplying a named vector to `by`. For example, `by = c(""a"" = ""b"")` joins `x.a` to `y.b`.",NA
dplyr,1,686,700,FALSE,`n_groups()` function tells you how many groups in a tbl. It returns 1 for ungrouped data. (#477),NA
dplyr,1,687,701,FALSE,`transmute()` works like `mutate()` but drops all variables that you didn't explicitly refer to (#302).,NA
dplyr,1,688,702,FALSE,`rename()` makes it easy to rename variables - it works similarly to `select()` but it preserves columns that you didn't otherwise touch.,NA
dplyr,1,689,703,FALSE,"`slice()` allows you to selecting rows by position (#226). It includes positive integers, drops negative integers and you can use expression like `n()`.",NA
dplyr,1,690,704,FALSE,You can now program with dplyr - every function that does non-standard evaluation (NSE) has a standard evaluation (SE) version ending in `_`. This is powered by the new lazyeval package which provides all the tools needed to implement NSE consistently and correctly.,NA
dplyr,1,691,705,FALSE,"See `vignette(""nse"")` for full details.",NA
dplyr,1,692,706,FALSE,`regroup()` is deprecated. Please use the more flexible `group_by_()` instead.,NA
dplyr,1,693,707,FALSE,`summarise_each_q()` and `mutate_each_q()` are deprecated. Please use `summarise_each_()` and `mutate_each_()` instead.,NA
dplyr,1,694,708,FALSE,`funs_q` has been replaced with `funs_`.,NA
dplyr,1,695,709,FALSE,`%.%` has been deprecated: please use `%>%` instead. `chain()` is defunct. (#518),NA
dplyr,1,696,710,FALSE,`filter.numeric()` removed. Need to figure out how to reimplement with new lazy eval system.,NA
dplyr,1,697,711,FALSE,The `Progress` refclass is no longer exported to avoid conflicts with shiny. Instead use `progress_estimated()` (#535).,NA
dplyr,1,698,712,FALSE,"`src_monetdb()` is now implemented in MonetDB.R, not dplyr.",NA
dplyr,1,699,713,FALSE,`show_sql()` and `explain_sql()` and matching global options `dplyr.show_sql` and `dplyr.explain_sql` have been removed. Instead use `show_query()` and `explain()`.,NA
dplyr,1,700,714,FALSE,Main verbs now have individual documentation pages (#519).,NA
dplyr,1,701,715,FALSE,"`%>%` is simply re-exported from magrittr, instead of creating a local copy (#496, thanks to @jimhester)",NA
dplyr,1,702,716,FALSE,"Examples now use `nycflights13` instead of `hflights` because it the variables have better names and there are a few interlinked tables (#562). `Lahman` and `nycflights13` are (once again) suggested packages. This means many examples will not work unless you explicitly install them with `install.packages(c(""Lahman"", ""nycflights13""))` (#508). dplyr now depends on Lahman 3.0.1. A number of examples have been updated to reflect modified field names (#586).",NA
dplyr,1,703,717,FALSE,"`do()` now displays the progress bar only when used in interactive prompts and not when knitting (#428, @jimhester).",NA
dplyr,1,704,718,FALSE,`glimpse()` now prints a trailing new line (#590).,NA
dplyr,1,705,719,FALSE,`group_by()` has more consistent behaviour when grouping by constants: it creates a new column with that value (#410). It renames grouping variables (#410). The first argument is now `.data` so you can create new groups with name x (#534).,NA
dplyr,1,706,720,FALSE,"Now instead of overriding `lag()`, dplyr overrides `lag.default()`, which should avoid clobbering lag methods added by other packages. (#277).",NA
dplyr,1,707,721,FALSE,"`mutate(data, a = NULL)` removes the variable `a` from the returned dataset (#462).",NA
dplyr,1,708,722,FALSE,`trunc_mat()` and hence `print.tbl_df()` and friends gets a `width` argument to control the default output width. Set `options(dplyr.width = Inf)` to always show all columns (#589).,NA
dplyr,1,709,723,FALSE,"`select()` gains `one_of()` selector: this allows you to select variables provided by a character vector (#396). It fails immediately if you give an empty pattern to `starts_with()`, `ends_with()`, `contains()` or `matches()` (#481, @leondutoit). Fixed buglet in `select()` so that you can now create variables called `val` (#564).",NA
dplyr,1,710,724,FALSE,Switched from RC to R6.,NA
dplyr,1,711,725,FALSE,"`tally()` and `top_n()` work consistently: neither accidentally evaluates the the `wt` param. (#426, @mnel)",NA
dplyr,1,712,726,FALSE,`rename` handles grouped data (#640).,NA
dplyr,1,713,727,FALSE,"Correct SQL generation for `paste()` when used with the collapse parameter targeting a Postgres database. (@rbdixon, #1357)",NA
dplyr,1,714,728,FALSE,"The db backend system has been completely overhauled in order to make it possible to add backends in other packages, and to support a much wider range of databases. See `vignette(""new-sql-backend"")` for instruction on how to create your own (#568).",NA
dplyr,1,715,729,FALSE,`src_mysql()` gains a method for `explain()`.,NA
dplyr,1,716,730,FALSE,"When `mutate()` creates a new variable that uses a window function, automatically wrap the result in a subquery (#484).",NA
dplyr,1,717,731,FALSE,Correct SQL generation for `first()` and `last()` (#531).,NA
dplyr,1,718,732,FALSE,`order_by()` now works in conjunction with window functions in databases that support them.,NA
dplyr,1,719,733,FALSE,"All verbs now understand how to work with `difftime()` (#390) and `AsIs` (#453) objects. They all check that colnames are unique (#483), and are more robust when columns are not present (#348, #569, #600).",NA
dplyr,1,720,734,FALSE,Hybrid evaluation bugs fixed:,NA
dplyr,2,720,735,FALSE,* Call substitution stopped too early when a sub expression contained a `$` (#502).,Hybrid evaluation bugs fixed:
dplyr,2,720,736,FALSE,* Handle `::` and `:::` (#412).,Hybrid evaluation bugs fixed:
dplyr,2,720,737,FALSE,* `cumany()` and `cumall()` properly handle `NA` (#408).,Hybrid evaluation bugs fixed:
dplyr,2,720,738,FALSE,"* `nth()` now correctly preserve the class when using dates, times and factors (#509).",Hybrid evaluation bugs fixed:
dplyr,2,720,739,FALSE,* no longer substitutes within `order_by()` because `order_by()` needs to do its own NSE (#169).,Hybrid evaluation bugs fixed:
dplyr,1,726,740,FALSE,"`[.tbl_df` always returns a tbl_df (i.e. `drop = FALSE` is the default) (#587, #610). `[.grouped_df` preserves important output attributes (#398).",NA
dplyr,1,727,741,FALSE,"`arrange()` keeps the grouping structure of grouped data (#491, #605), and preserves input classes (#563).",NA
dplyr,1,728,742,FALSE,"`contains()` accidentally matched regular expressions, now it passes `fixed = TRUE` to `grep()` (#608).",NA
dplyr,1,729,743,FALSE,`filter()` asserts all variables are white listed (#566).,NA
dplyr,1,730,744,FALSE,`mutate()` makes a `rowwise_df` when given a `rowwise_df` (#463).,NA
dplyr,1,731,745,FALSE,`rbind_all()` creates `tbl_df` objects instead of raw `data.frame`s.,NA
dplyr,1,732,746,FALSE,"If `select()` doesn't match any variables, it returns a 0-column data frame, instead of the original (#498). It no longer fails when if some columns are not named (#492)",NA
dplyr,1,733,747,FALSE,"`sample_n()` and `sample_frac()` methods for data.frames exported. (#405, @alyst)",NA
dplyr,1,734,748,FALSE,"A grouped data frame may have 0 groups (#486). Grouped df objects gain some basic validity checking, which should prevent some crashes related to corrupt `grouped_df` objects made by `rbind()` (#606).",NA
dplyr,1,735,749,FALSE,"More coherence when joining columns of compatible but different types, e.g. when joining a character vector and a factor (#455), or a numeric and integer (#450)",NA
dplyr,1,736,750,FALSE,"`mutate()` works for on zero-row grouped data frame, and with list columns (#555).",NA
dplyr,1,737,751,FALSE,`LazySubset` was confused about input data size (#452).,NA
dplyr,1,738,752,FALSE,Internal `n_distinct()` is stricter about it's inputs: it requires one symbol which must be from the data frame (#567).,NA
dplyr,1,739,753,FALSE,`rbind_*()` handle data frames with 0 rows (#597). They fill character vector columns with `NA` instead of blanks (#595). They work with list columns (#463).,NA
dplyr,1,740,754,FALSE,Improved handling of encoding for column names (#636).,NA
dplyr,1,741,755,FALSE,Improved handling of hybrid evaluation re \$ and @ (#645).,NA
dplyr,1,742,756,FALSE,Fix major omission in `tbl_dt()` and `grouped_dt()` methods - I was accidentally doing a deep copy on every result :(,NA
dplyr,1,743,757,FALSE,"`summarise()` and `group_by()` now retain over-allocation when working with data.tables (#475, @arunsrinivasan).",NA
dplyr,1,744,758,FALSE,"joining two data.tables now correctly dispatches to data table methods, and result is a data table (#470)",NA
dplyr,1,746,763,FALSE,"`glimpse()` makes it possible to see all the columns in a tbl, displaying as much data for each variable as can be fit on a single line.",NA
dplyr,1,747,764,FALSE,`sample_n()` randomly samples a fixed number of rows from a tbl; `sample_frac()` randomly samples a fixed fraction of rows. Only works for local data frames and data tables (#202).,NA
dplyr,1,748,765,FALSE,`summarise_each()` and `mutate_each()` make it easy to apply one or more functions to multiple columns in a tbl (#178).,NA
dplyr,1,749,766,FALSE,"If you load plyr after dplyr, you'll get a message suggesting that you load plyr first (#347).",NA
dplyr,1,750,767,FALSE,"`as.tbl_cube()` gains a method for matrices (#359, @paulstaab)",NA
dplyr,1,751,768,FALSE,"`compute()` gains `temporary` argument so you can control whether the results are temporary or permanent (#382, @cpsievert)",NA
dplyr,1,752,769,FALSE,"`group_by()` now defaults to `add = FALSE` so that it sets the grouping variables rather than adding to the existing list. I think this is how most people expected `group_by` to work anyway, so it's unlikely to cause problems (#385).",NA
dplyr,1,753,770,FALSE,"Support for [MonetDB](http://www.monetdb.org) tables with `src_monetdb()` (#8, thanks to @hannesmuehleisen).",NA
dplyr,1,754,771,FALSE,New vignettes:,NA
dplyr,2,754,772,FALSE,* `memory` vignette which discusses how dplyr minimises memory usage for local data frames (#198).,New vignettes:
dplyr,2,754,773,FALSE,* `new-sql-backend` vignette which discusses how to add a new SQL backend/source to dplyr.,New vignettes:
dplyr,1,757,774,FALSE,`changes()` output more clearly distinguishes which columns were added or deleted.,NA
dplyr,1,758,775,FALSE,`explain()` is now generic.,NA
dplyr,1,759,776,FALSE,"dplyr is more careful when setting the keys of data tables, so it never accidentally modifies an object that it doesn't own. It also avoids unnecessary key setting which negatively affected performance. (#193, #255).",NA
dplyr,1,760,777,FALSE,"`print()` methods for `tbl_df`, `tbl_dt` and `tbl_sql` gain `n` argument to control the number of rows printed (#362). They also works better when you have columns containing lists of complex objects.",NA
dplyr,1,761,778,FALSE,"`row_number()` can be called without arguments, in which case it returns the same as `1:n()` (#303).",NA
dplyr,1,762,779,FALSE,"`""comment""` attribute is allowed (white listed) as well as names (#346).",NA
dplyr,1,763,780,FALSE,"hybrid versions of `min`, `max`, `mean`, `var`, `sd` and `sum` handle the `na.rm` argument (#168). This should yield substantial performance improvements for those functions.",NA
dplyr,1,764,781,FALSE,Special case for call to `arrange()` on a grouped data frame with no arguments. (#369),NA
dplyr,1,765,782,FALSE,Code adapted to Rcpp \> 0.11.1,NA
dplyr,1,766,783,FALSE,"internal `DataDots` class protects against missing variables in verbs (#314), including the case where `...` is missing. (#338)",NA
dplyr,1,767,784,FALSE,`all.equal.data.frame` from base is no longer bypassed. we now have `all.equal.tbl_df` and `all.equal.tbl_dt` methods (#332).,NA
dplyr,1,768,785,FALSE,`arrange()` correctly handles NA in numeric vectors (#331) and 0 row data frames (#289).,NA
dplyr,1,769,786,FALSE,`copy_to.src_mysql()` now works on windows (#323),NA
dplyr,1,770,787,FALSE,`*_join()` doesn't reorder column names (#324).,NA
dplyr,1,771,788,FALSE,`rbind_all()` is stricter and only accepts list of data frames (#288),NA
dplyr,1,772,789,FALSE,`rbind_*` propagates time zone information for `POSIXct` columns (#298).,NA
dplyr,1,773,790,FALSE,`rbind_*` is less strict about type promotion. The numeric `Collecter` allows collection of integer and logical vectors. The integer `Collecter` also collects logical values (#321).,NA
dplyr,1,774,791,FALSE,internal `sum` correctly handles integer (under/over)flow (#308).,NA
dplyr,1,775,792,FALSE,`summarise()` checks consistency of outputs (#300) and drops `names` attribute of output columns (#357).,NA
dplyr,1,776,793,FALSE,"join functions throw error instead of crashing when there are no common variables between the data frames, and also give a better error message when only one data frame has a by variable (#371).",NA
dplyr,1,777,794,FALSE,"`top_n()` returns `n` rows instead of `n - 1` (@leondutoit, #367).",NA
dplyr,1,778,795,FALSE,"SQL translation always evaluates subsetting operators (`$`, `[`, `[[`) locally. (#318).",NA
dplyr,1,779,796,FALSE,`select()` now renames variables in remote sql tbls (#317) and implicitly adds grouping variables (#170).,NA
dplyr,1,780,797,FALSE,internal `grouped_df_impl` function errors if there are no variables to group by (#398).,NA
dplyr,1,781,798,FALSE,`n_distinct` did not treat NA correctly in the numeric case #384.,NA
dplyr,1,782,799,FALSE,Some compiler warnings triggered by -Wall or -pedantic have been eliminated.,NA
dplyr,1,783,800,FALSE,`group_by` only creates one group for NA (#401).,NA
dplyr,1,784,801,FALSE,Hybrid evaluator did not evaluate expression in correct environment (#403).,NA
dplyr,1,785,802,FALSE,`select()` actually renames columns in a data table (#284).,NA
dplyr,1,786,803,FALSE,`rbind_all()` and `rbind_list()` now handle missing values in factors (#279).,NA
dplyr,1,787,804,FALSE,SQL joins now work better if names duplicated in both x and y tables (#310).,NA
dplyr,1,788,805,FALSE,Builds against Rcpp 0.11.1,NA
dplyr,1,789,806,FALSE,`select()` correctly works with the vars attribute (#309).,NA
dplyr,1,790,807,FALSE,Internal code is stricter when deciding if a data frame is grouped (#308): this avoids a number of situations which previously caused problems.,NA
dplyr,1,791,808,FALSE,More data frame joins work with missing values in keys (#306).,NA
dplyr,1,792,809,FALSE,"`select()` is substantially more powerful. You can use named arguments to rename existing variables, and new functions `starts_with()`, `ends_with()`, `contains()`, `matches()` and `num_range()` to select variables based on their names. It now also makes a shallow copy, substantially reducing its memory impact (#158, #172, #192, #232).",NA
dplyr,1,793,810,FALSE,`summarize()` added as alias for `summarise()` for people from countries that don't don't spell things correctly ;) (#245),NA
dplyr,1,794,811,FALSE,"`filter()` now fails when given anything other than a logical vector, and correctly handles missing values (#249). `filter.numeric()` proxies `stats::filter()` so you can continue to use `filter()` function with numeric inputs (#264).",NA
dplyr,1,795,812,FALSE,`summarise()` correctly uses newly created variables (#259).,NA
dplyr,1,796,813,FALSE,`mutate()` correctly propagates attributes (#265) and `mutate.data.frame()` correctly mutates the same variable repeatedly (#243).,NA
dplyr,1,797,814,FALSE,"`lead()` and `lag()` preserve attributes, so they now work with dates, times and factors (#166).",NA
dplyr,1,798,815,FALSE,`n()` never accepts arguments (#223).,NA
dplyr,1,799,816,FALSE,`row_number()` gives correct results (#227).,NA
dplyr,1,800,817,FALSE,`rbind_all()` silently ignores data frames with 0 rows or 0 columns (#274).,NA
dplyr,1,801,818,FALSE,"`group_by()` orders the result (#242). It also checks that columns are of supported types (#233, #276).",NA
dplyr,1,802,819,FALSE,"The hybrid evaluator did not handle some expressions correctly, for example in `if(n() > 5) 1 else 2` the subexpression `n()` was not substituted correctly. It also correctly processes `$` (#278).",NA
dplyr,1,803,820,FALSE,`arrange()` checks that all columns are of supported types (#266). It also handles list columns (#282).,NA
dplyr,1,804,821,FALSE,Working towards Solaris compatibility.,NA
dplyr,1,805,822,FALSE,Benchmarking vignette temporarily disabled due to microbenchmark problems reported by BDR.,NA
dplyr,1,806,823,FALSE,new `location()` and `changes()` functions which provide more information about how data frames are stored in memory so that you can see what gets copied.,NA
dplyr,1,807,824,FALSE,renamed `explain_tbl()` to `explain()` (#182).,NA
dplyr,1,808,825,FALSE,`tally()` gains `sort` argument to sort output so highest counts come first (#173).,NA
dplyr,1,809,826,FALSE,"`ungroup.grouped_df()`, `tbl_df()`, `as.data.frame.tbl_df()` now only make shallow copies of their inputs (#191).",NA
dplyr,1,810,827,FALSE,The `benchmark-baseball` vignette now contains fairer (including grouping times) comparisons with `data.table`. (#222),NA
dplyr,1,811,828,FALSE,`filter()` (#221) and `summarise()` (#194) correctly propagate attributes.,NA
dplyr,1,812,829,FALSE,`summarise()` throws an error when asked to summarise an unknown variable instead of crashing (#208).,NA
dplyr,1,813,830,FALSE,`group_by()` handles factors with missing values (#183).,NA
dplyr,1,814,831,FALSE,"`filter()` handles scalar results (#217) and better handles scoping, e.g. `filter(., variable)` where `variable` is defined in the function that calls `filter`. It also handles `T` and `F` as aliases to `TRUE` and `FALSE` if there are no `T` or `F` variables in the data or in the scope.",NA
dplyr,1,815,832,FALSE,`select.grouped_df` fails when the grouping variables are not included in the selected variables (#170),NA
dplyr,1,816,833,FALSE,`all.equal.data.frame()` handles a corner case where the data frame has `NULL` names (#217),NA
dplyr,1,817,834,FALSE,`mutate()` gives informative error message on unsupported types (#179),NA
dplyr,1,818,835,FALSE,"dplyr source package no longer includes pandas benchmark, reducing download size from 2.8 MB to 0.5 MB.",NA
dtplyr,1,1,1,FALSE,`full_join()` now produces output with correctly named columns when a non-default value for `suffix` is supplied. Previously the `suffix` argument was ignored (#382).,NA
dtplyr,1,2,2,FALSE,Chained operations properly prevent modify-by-reference (#210),NA
dtplyr,1,3,3,FALSE,`dplyr` and `tidyr` verbs no longer dispatch to `dtplyr` translations when used directly on `data.table` objects. `lazy_dt()` must now explicitly be called by the user. (#312),NA
dtplyr,1,4,4,FALSE,An error now occurs when `where()` is used for selection (#271),NA
dtplyr,1,5,5,FALSE,Anonymous functions are translated correctly in `mutate`/`summarize` (#362),NA
dtplyr,1,6,6,FALSE,Custom functions can pass a quosure to `col` arg in `separate()` (#359),NA
dtplyr,1,7,7,FALSE,`glue::glue()` and `stringr::str_glue()` now work inside `mutate()`/`transmute()` without needing to specify `.envir`,NA
dtplyr,1,8,8,FALSE,Can use `.data` pronoun inside `desc()` in `arrange()` (#346),NA
dtplyr,1,9,9,FALSE,New translations:,NA
dtplyr,2,9,10,FALSE,* `add_count()`,New translations:
dtplyr,2,9,11,FALSE,* `unite()`,New translations:
dtplyr,1,12,12,FALSE,"`if_any()` and `if_all()` now work for a list of functions specified in the `.fns` argument(@mgirlich, #335).",NA
dtplyr,1,13,13,FALSE,"In `semi_join()` the `y` table is again coerced to a lazy table if `copy = TRUE` (@mgirlich, #322).",NA
dtplyr,1,14,14,FALSE,"The `.cols` argument of `across()`, `if_any()`, and `if_all()` is evaluated in the environment from which `across` was called.",NA
dtplyr,1,15,15,FALSE,"`if_any()` and `if_all()` now work without specifying the `.fns` argument (@mgirlich, #325).",NA
dtplyr,1,16,16,FALSE,`mutate()` can now use `.keep`,NA
dtplyr,1,17,17,FALSE,`dtplyr` no longer directly depends on `ellipsis`,NA
dtplyr,1,18,18,FALSE,`count()` properly handles grouping variables (#356),NA
dtplyr,1,19,19,FALSE,`select()` now drops columns by reference when possible for improved performance (#367),NA
dtplyr,1,20,20,FALSE,`arrange()` now utilizes `setorder()` when possible for improved performance (#364),NA
dtplyr,1,21,21,FALSE,`slice()` uses an intermediate variable to reduce computation time of row selection (#377),NA
dtplyr,1,24,24,FALSE,dtplyr gains translations for many more tidyr verbs:,NA
dtplyr,2,24,25,FALSE,"* `drop_na()` (@markfairbanks, #194)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,26,FALSE,"* `complete()` (@markfairbanks, #225)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,27,FALSE,"* `expand()` (@markfairbanks, #225)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,28,FALSE,"* `fill()` (@markfairbanks, #197)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,29,FALSE,"* `pivot_longer()` (@markfairbanks, #204)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,30,FALSE,"* `replace_na()` (@markfairbanks, #202)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,31,FALSE,"* `nest()` (@mgirlich, #251)",dtplyr gains translations for many more tidyr verbs:
dtplyr,2,24,32,FALSE,"* `separate()` (@markfairbanks, #269)",dtplyr gains translations for many more tidyr verbs:
dtplyr,1,33,33,FALSE,"`tally()` gains a translation (@mgirlich, #201).",NA
dtplyr,1,34,34,FALSE,"`ifelse()` is mapped to `fifelse()` (@markfairbanks, #220).",NA
dtplyr,1,35,35,FALSE,"`slice()` helpers (`slice_head()`, `slice_tail()`, `slice_min()`, `slice_max()` and `slice_sample()`) now accept negative values for `n` and `prop`.",NA
dtplyr,1,36,36,FALSE,"`across()` defaults to `everything()` when `.cols` isn't provided (@markfairbanks, #231), and handles named selections (@eutwt #293). It ˜ow handles `.fns` arguments in more forms (@eutwt #288):",NA
dtplyr,2,36,37,FALSE,"* Anonymous functions, such as `function(x) x + 1`","`across()` defaults to `everything()` when `.cols` isn't provided (@markfairbanks, #231), and handles named selections (@eutwt #293). It ˜ow handles `.fns` arguments in more forms (@eutwt #288):"
dtplyr,2,36,38,FALSE,"* Formulas which don't require a function call, such as `~ 1`","`across()` defaults to `everything()` when `.cols` isn't provided (@markfairbanks, #231), and handles named selections (@eutwt #293). It ˜ow handles `.fns` arguments in more forms (@eutwt #288):"
dtplyr,1,39,39,FALSE,"`arrange(dt, desc(col))` is translated to `dt[order(-col)]` in order to take advantage of data.table's fast order (@markfairbanks, #227).",NA
dtplyr,1,40,40,FALSE,"`count()` applied to data.tables no longer breaks when dtplyr is loaded (@mgirlich, #201).",NA
dtplyr,1,41,41,FALSE,`case_when()` supports use of `T` to specify the default (#272).,NA
dtplyr,1,42,42,FALSE,"`filter()` errors for named input, e.g. `filter(dt, x = 1)` (@mgirlich, #267) and works for negated logical columns (@mgirlich, @211).",NA
dtplyr,1,43,43,FALSE,"`group_by()` ungroups when no grouping variables are specified (@mgirlich, #248), and supports inline mutation like `group_by(dt, y = x)` (@mgirlich, #246).",NA
dtplyr,1,44,44,FALSE,"`if_else()` named arguments are translated to the correct arguments in `data.table::fifelse()` (@markfairbanks, #234). `if_else()` supports `.data` and `.env` pronouns (@markfairbanks, #220).",NA
dtplyr,1,45,45,FALSE,"`if_any()` and `if_all()` default to `everything()` when `.cols` isn't provided (@eutwt, #294).",NA
dtplyr,1,46,46,FALSE,`intersect()`/`union()`/`union_all()`/`setdiff()` convert data.table inputs to `lazy_dt()` (#278).,NA
dtplyr,1,47,47,FALSE,`lag()`/`lead()` are translated to `shift()`.,NA
dtplyr,1,48,48,FALSE,"`lazy_dt()` keeps groups (@mgirlich, #206).",NA
dtplyr,1,49,49,FALSE,"`left_join()` produces the same column order as dplyr (@markfairbanks, #139).",NA
dtplyr,1,50,50,FALSE,"`left_join()`, `right_join()`, `full_join()`, and `inner_join()` perform a cross join for `by = character()` (@mgirlich, #242).",NA
dtplyr,1,51,51,FALSE,"`left_join()`, `right_join()`, and `inner_join()` are always translated to the `[.data.table` equivalent. For simple merges the translation gets a bit longer but thanks to the simpler code base it helps to better handle names in `by` and duplicated variables names produced in the data.table join (@mgirlich, #222).",NA
dtplyr,1,52,52,FALSE,"`mutate()` and `transmute()` work when called without variables (@mgirlich, #248).",NA
dtplyr,1,53,53,FALSE,`mutate()` gains new experimental arguments `.before` and `.after` that allow you to control where the new columns are placed (to match dplyr 1.0.0) (@eutwt #291).,NA
dtplyr,1,54,54,FALSE,"`mutate()` can modify grouping columns (instead of creating another column with the same name) (@mgirlich, #246).",NA
dtplyr,1,55,55,FALSE,`n_distinct()` is translated to `uniqueN()`.,NA
dtplyr,1,56,56,FALSE,"`tally()` and `count()` follow the dplyr convention of creating a unique name if the default output `name` (n) already exists (@eutwt, #295).",NA
dtplyr,1,57,57,FALSE,"`pivot_wider()` names the columns correctly when `names_from` is a numeric column (@mgirlich, #214).",NA
dtplyr,1,58,58,FALSE,"`pull()` supports the `name` argument (@mgirlich, #263).",NA
dtplyr,1,59,59,FALSE,`slice()` no longer returns excess rows (#10).,NA
dtplyr,1,60,60,FALSE,"`slice_*()` functions after `group_by()` are faster (@mgirlich, #216).",NA
dtplyr,1,61,61,FALSE,"`slice_max()` works when ordering by a character column (@mgirlich, #218).",NA
dtplyr,1,62,62,FALSE,"`summarise()` supports the `.groups` argument (@mgirlich, #245).",NA
dtplyr,1,63,63,FALSE,"`summarise()`, `tally()`, and `count()` can change the value of a grouping variables (@eutwt, #295).",NA
dtplyr,1,64,64,FALSE,"`transmute()` doesn't produce duplicate columns when assigning to the same variable (@mgirlich, #249). It correctly flags grouping variables so they selected (@mgirlich, #246).",NA
dtplyr,1,65,65,FALSE,"`ungroup()` removes variables in `...` from grouping (@mgirlich, #253).",NA
dtplyr,1,66,66,FALSE,"All verbs now have (very basic) documentation pointing back to the dplyr generic, and providing a (very rough) description of the translation accompanied with a few examples.",NA
dtplyr,1,67,67,FALSE,"Passing a data.table to a dplyr generic now converts it to a `lazy_dt()`, making it a little easier to move between data.table and dplyr syntax.",NA
dtplyr,1,68,68,FALSE,dtplyr has been bought up to compatibility with dplyr 1.0.0. This includes new translations for:,NA
dtplyr,2,68,69,FALSE,"* `across()`, `if_any()`, `if_all()` (#154).",dtplyr has been bought up to compatibility with dplyr 1.0.0. This includes new translations for:
dtplyr,2,68,70,FALSE,* `count()` (#159).,dtplyr has been bought up to compatibility with dplyr 1.0.0. This includes new translations for:
dtplyr,2,68,71,FALSE,"* `relocate()` (@smingerson, #162).",dtplyr has been bought up to compatibility with dplyr 1.0.0. This includes new translations for:
dtplyr,2,68,72,FALSE,* `rename_with()` (#160),dtplyr has been bought up to compatibility with dplyr 1.0.0. This includes new translations for:
dtplyr,2,68,73,FALSE,"* `slice_min()`, `slice_max()`, `slice_head()`, `slice_tail()`, and `slice_sample()` (#174).",dtplyr has been bought up to compatibility with dplyr 1.0.0. This includes new translations for:
dtplyr,1,73,73,FALSE,And `rename()` and `select()` now support dplyr 1.0.0 tidyselect syntax (apart from predicate functions which can't easily work on lazily evaluated data tables).,NA
dtplyr,1,74,74,FALSE,"We have begun the process of adding translations for tidyr verbs beginning with `pivot_wider()` (@markfairbanks, #189).",NA
dtplyr,1,75,75,FALSE,`compute()` now creates an intermediate assignment within the translation. This will generally have little impact on performance but it allows you to use intermediate variables to simplify complex translations.,NA
dtplyr,1,76,76,FALSE,`case_when()` is now translated to `fcase()` (#190).,NA
dtplyr,1,77,77,FALSE,"`cur_data()` (`.SD`), `cur_group()` (`.BY`), `cur_group_id()` (`.GRP`), and `cur_group_rows() (`.I\`) are now tranlsated to their data.table equivalents (#166).",NA
dtplyr,1,78,78,FALSE,`filter()` on grouped data nows use a much faster translation using on `.I` rather than `.SD` (and requiring an intermediate assignment) (#176). Thanks to suggestion from @myoung3 and @ColeMiller1.,NA
dtplyr,1,79,79,FALSE,Translation of individual expressions:,NA
dtplyr,2,79,80,FALSE,* `x[[1]]` is now translated correctly.,Translation of individual expressions:
dtplyr,2,79,81,FALSE,"* Anonymous functions are now preserved (@smingerson, #155)",Translation of individual expressions:
dtplyr,2,79,82,FALSE,* Environment variables used in the `i` argument of `[.data.table` are now correctly inlined when not in the global environment (#164).,Translation of individual expressions:
dtplyr,2,79,83,FALSE,* `T` and `F` are correctly translated to `TRUE` and `FALSE` (#140).,Translation of individual expressions:
dtplyr,1,84,84,FALSE,"Grouped filter, mutate, and slice no longer affect ordering of output (#178).",NA
dtplyr,1,85,85,FALSE,`as_tibble()` gains a `.name_repair` argument (@markfairbanks).,NA
dtplyr,1,86,86,FALSE,`as.data.table()` always calls `[]` so that the result will print (#146).,NA
dtplyr,1,87,87,FALSE,"`print.lazy_dt()` shows total rows, and grouping, if present.",NA
dtplyr,1,88,88,FALSE,`group_map()` and `group_walk()` are now translated (#108).,NA
dtplyr,1,89,89,FALSE,Better handling for `.data` and `.env` pronouns (#138).,NA
dtplyr,1,90,90,FALSE,dplyr verbs now work with `NULL` inputs (#129).,NA
dtplyr,1,91,91,FALSE,"joins do better job at determining output variables in the presence of duplicated outputs (#128). When joining based on different variables in `x` and `y`, joins consistently preserve column from `x`, not `y` (#137).",NA
dtplyr,1,92,92,FALSE,`lazy_dt()` objects now have a useful `glimpse()` method (#132).,NA
dtplyr,1,93,93,FALSE,"`group_by()` now has an `arrange` parameter which, if set to `FALSE`, sets the data.table translation to use `by` rather than `keyby` (#85).",NA
dtplyr,1,94,94,FALSE,"`rename()` now works without `data.table` attached, as intended (@michaelchirico, #123).",NA
dtplyr,1,95,95,FALSE,dtplyr has been re-licensed as MIT (#165).,NA
dtplyr,1,96,96,FALSE,"Converted from eager approach to lazy approach. You now must use `lazy_dt()` to begin a translation pipeline, and must use `collect()`, `as.data.table()`, `as.data.frame()`, or `as_tibble()` to finish the translation and actually perform the computation (#38). This represents a complete overhaul of the package replacing the eager evaluation used in the previous releases. This unfortunately breaks all existing code that used dtplyr, but frankly the previous version was extremely inefficient so offered little of data.table's impressive speed, and was used by very few people.",NA
dtplyr,1,97,97,FALSE,dtplyr provides methods for data.tables that warning you that they use the data frame implementation and you should use `lazy_dt()` (#77),NA
dtplyr,1,98,98,FALSE,Joins now pass `...` on to data.table's merge method (#41).,NA
dtplyr,1,99,99,FALSE,"`ungroup()` now copies its input (@christophsax, #54).",NA
dtplyr,1,100,100,FALSE,"`mutate()` preserves grouping (@christophsax, #17).",NA
dtplyr,1,101,101,FALSE,"`if_else()` and `coalesce()` are mapped to data.table's `fifelse()` and `fcoalesce()` respectively (@michaelchirico, #112).",NA
dtplyr,1,102,102,FALSE,Maintenance release for CRAN checks.,NA
dtplyr,1,103,103,FALSE,"`inner_join()`, `left_join()`, `right_join()`, and `full_join()`: new `suffix` argument which allows you to control what suffix duplicated variable names receive, as introduced in dplyr 0.5 (#40, @christophsax).",NA
dtplyr,1,104,104,FALSE,"Joins use extended `merge.data.table()` and the `on` argument, introduced in data.table 1.9.6. Avoids copy and allows joins by different keys (#20, #21, @christophsax).",NA
dtplyr,1,105,105,FALSE,This is a compatibility release. It makes dtplyr compatible with,NA
dtplyr,1,106,106,FALSE,"`distinct()` gains `.keep_all` argument (#30, #31).",NA
dtplyr,1,107,107,FALSE,Slightly improve test coverage (#6).,NA
dtplyr,1,108,108,FALSE,Install `devtools` from GitHub on Travis (#32).,NA
dtplyr,1,109,109,FALSE,"Joins return `data.table`. Right and full join are now implemented (#16, #19).",NA
dtplyr,1,110,110,FALSE,Remove warnings from tests (#4).,NA
dtplyr,1,111,111,FALSE,Extracted from `dplyr` at revision e5f2952923028803.,NA
forcats,1,1,1,FALSE,New `fct()` which works like `factor()` but errors if values of `x` are not included in the levels specification (#299),NA
forcats,1,2,2,FALSE,`first2()` and `last2()` now ignore missing values in both `x` and `y` (#303).,NA
forcats,1,3,3,FALSE,Error messages are more informative.,NA
forcats,1,4,4,FALSE,Re-license as MIT (#277).,NA
forcats,1,5,5,FALSE,"`fct_lump_n()` no longer uses a partial argument name (@malcolmbarrett, #276).",NA
forcats,1,6,6,FALSE,"`as_factor()` gains a logical method that always returns a factor with levels ""FALSE"" and ""TRUE"" (#185).",NA
forcats,1,7,7,FALSE,"`fct_c()`, `fct_collapse()` and `fct_recode()` are now explicitly documented as using [dynamic dots](https://rlang.r-lib.org/reference/dyn-dots.html) (@labouz, #234).",NA
forcats,1,8,8,FALSE,"`fct_collapse()` now accepts a `other_level` argument, to allow a user-specified `Other` level (@gtm19, #194). It now correctly collapses factors when `other_level` is not `NULL` (#172), and makes `""Other""` the last level (#202) (@gtm19, #172 & #202)",NA
forcats,1,9,9,FALSE,`fct_count()` no longer converts implicit NAs into explicit NAs (#151).,NA
forcats,1,10,10,FALSE,`fct_inseq()` behaves more robustly when factor levels aren't all numbers (#221).,NA
forcats,1,11,11,FALSE,"`fct_lump()` has been split up into three new functions: `fct_lump_prop()`, `fct_lump_n()`, and `fct_lump_lowfreq()`. (@jonocarroll, #167, #142). All `fct_lump_()` functions check their inputs more carefully (@robinson_es, #169)",NA
forcats,1,12,12,FALSE,"`fct_reorder2()` gains a helper function `first2()`, that sorts `.y` by the first value of `.x` (@jtr13).",NA
forcats,1,13,13,FALSE,"`fct_collapse()` gains a `group_other` argument to allow you to group all un-named levels into `""Other""`. (#100, @AmeliaMN)",NA
forcats,1,14,14,FALSE,"`fct_cross()` creates a new factor containing the combined levels from two or more input factors, similar to `base::interaction` (@tslumley, #136)",NA
forcats,1,15,15,FALSE,"`fct_inseq()` reorders labels in numeric order, if possible (#145, @kbodwin).",NA
forcats,1,16,16,FALSE,"`fct_lump_min()` preserves levels that appear at least `min` times (can also be used with the `w` weighted argument) (@robinsones, #142).",NA
forcats,1,17,17,FALSE,"`fct_match()` performs validated matching, providing a safer alternative to `f %in% c(""x"", ""y"")` which silently returns `FALSE` if `""x""` or `""y""` are not levels of `f` (e.g. because of a typo) (#126, @jonocarroll).",NA
forcats,1,18,18,FALSE,`fct_relevel()` can now level factors using a function that is passed the current levels (#117).,NA
forcats,1,19,19,FALSE,"`as_factor()` now has a numeric method. By default, orders factors in numeric order, unlike the other methods which default to order of appearance. (#145, @kbodwin)",NA
forcats,1,20,20,FALSE,"`fct_count()` gains a parameter to also compute the proportion (@zhiiiyang, #146).",NA
forcats,1,21,21,FALSE,"`fct_lump()` now does not change the label if no lumping occurs (@zhiiiyang, #130).",NA
forcats,1,22,22,FALSE,`fct_relabel()` now accepts character input.,NA
forcats,1,23,23,FALSE,`fct_reorder()` and `fct_reorder2()` no longer require that the summary function return a numeric vector of length 1; instead it can return any orderable vector of length 1 (#147).,NA
forcats,1,24,24,FALSE,"`fct_reorder()`, `fct_reorder2()` and `as_factor()` now use the ellipsis package to warn if you pass in named components to `...` (#174).",NA
forcats,1,25,25,FALSE,`fct_c()` now requires explicit splicing with `!!!` if you have a list of factors that you want to combine. This is consistent with an emerging standards for handling `...` throughout the tidyverse.,NA
forcats,1,26,26,FALSE,`fct_reorder()` and `fct_reorder2()` have renamed `fun` to `.fun` to avoid spurious matching of named arguments.,NA
forcats,1,27,27,FALSE,"All functions that take `...` use ""tidy"" dots: this means that you use can `!!!` to splice in a list of values, and trailing empty arguments are automatically removed. Additionally, all other arguments gain a `.` prefix in order to avoid unhelpful matching of named arguments (#110).",NA
forcats,1,28,28,FALSE,"`fct_lump()` gains `w` argument (#70, @wilkox) to weight value frequencies before lumping them together (#68).",NA
forcats,1,29,29,FALSE,`as_factor()` and `fct_inorder()` accept NA levels (#98).,NA
forcats,1,30,30,FALSE,`fct_explicit_na()` also replaces NAs encoded in levels.,NA
forcats,1,31,31,FALSE,`fct_lump()` correctly accounts for `NA` values in input (#41),NA
forcats,1,32,32,FALSE,`lvls_revalue()` preserves NA levels.,NA
forcats,1,33,33,FALSE,Test coverage increased from 80% to 99%.,NA
forcats,1,34,34,FALSE,`fct_drop()` now preserves attributes (#83).,NA
forcats,1,35,35,FALSE,`fct_expand()` and `lvls_expand()` now also take character vectors (#99).,NA
forcats,1,36,36,FALSE,"`fct_relabel()` now accepts objects coercible to functions by `rlang::as_function` (#91, @alistaire47)",NA
forcats,1,37,37,FALSE,`as_factor()` which works like `as.factor()` but orders levels by appearance to avoid differences between locales (#39).,NA
forcats,1,38,38,FALSE,"`fct_other()` makes it easier to convert selected levels to ""other"" (#40)",NA
forcats,1,39,39,FALSE,"`fct_relabel()` allows programmatic relabeling of levels (#50, @krlmlr).",NA
forcats,1,40,40,FALSE,`fct_c()` can take either a list of factors or individual factors (#42).,NA
forcats,1,41,41,FALSE,`fct_drop()` gains `only` argument to restrict which levels are dropped (#69) and no longer adds `NA` level if not present (#52).,NA
forcats,1,42,42,FALSE,`fct_recode()` is now checks that each new value is of length 1 (#56).,NA
forcats,1,43,43,FALSE,`fct_relevel()` gains `after` argument so you can also move levels to the end (or any other position you like) (#29).,NA
forcats,1,44,44,FALSE,"`lvls_reorder()`, `fct_inorder()`, and `fct_infreq()` gain an `ordered` argument, allowing you to override the existing ""ordered"" status (#54).",NA
forcats,1,45,45,FALSE,Minor fixes for R CMD check,NA
forcats,1,46,46,FALSE,Add package docs,NA
ggplot2,1,1,1,FALSE,"The dot-dot notation (`..var..`) and `stat()`, which have been superseded by `after_stat()`, are now formally deprecated (@yutannihilation, #3693).",NA
ggplot2,1,2,2,FALSE,"`geom_col()` and `geom_bar()` gain a new `just` argument. This is set to `0.5` by default; use `just = 0`/`just = 1` to place columns on the left/right of the axis breaks. (@wurli, #4899)",NA
ggplot2,1,3,3,FALSE,"Fix a bug in `position_jitter()` where infinity values were dropped (@javlon, #4790).",NA
ggplot2,1,4,4,FALSE,"`geom_linerange()` now respects the `na.rm` argument (#4927, @thomasp85)",NA
ggplot2,1,5,5,FALSE,"Improve the support for `guide_axis()` on `coord_trans()` (@yutannihilation, #3959)",NA
ggplot2,1,6,6,FALSE,"`geom_density()` and `stat_density()` now support `bounds` argument to estimate density with boundary correction (@echasnovski, #4013).",NA
ggplot2,1,7,7,FALSE,"ggplot now checks during statistical transformations whether any data columns were dropped and warns about this. If stats intend to drop data columns they can declare them in the new field `dropped_aes`. (@clauswilke, #3250)",NA
ggplot2,1,8,8,FALSE,"Added `stat_align()` to align data without common x-coordinates prior to stacking. This is now the default stat for `geom_area()` (@thomasp85, #4850)",NA
ggplot2,1,9,9,FALSE,"Fix a bug in `stat_contour_filled()` where break value differences below a certain number of digits would cause the computations to fail (@thomasp85, #4874)",NA
ggplot2,1,10,10,FALSE,"`stage()` now properly refers to the values without scale transformations for the stage of `after_stat`. If your code requires the scaled version of the values for some reason, you have to apply the same transformation by yourself, e.g. `sqrt()` for `scale_{x,y}_sqrt()` (@yutannihilation and @teunbrand, #4155).",NA
ggplot2,1,11,11,FALSE,"A `linewidth` aesthetic has been introduced and supersedes the `size` aesthetic for scaling the width of lines in line based geoms. `size` will remain functioning but deprecated for these geoms and it is recommended to update all code to reflect the new aesthetic (@thomasp85, #3672)",NA
ggplot2,1,12,12,FALSE,"Secondary axis ticks are now positioned more precisely, removing small visual artefacts with alignment between grid and ticks (@thomasp85, #3576)",NA
ggplot2,1,13,13,FALSE,"Improve `stat_function` documentation regarding `xlim` argument. (@92amartins, #4474)",NA
ggplot2,1,14,14,FALSE,"`qplot()` is now formally deprecated (@yutannihilation, #3956).",NA
ggplot2,1,15,15,FALSE,"Use `rlang::hash()` instead of `digest::digest()`. This update may lead to changes in the automatic sorting of legends. In order to enforce a specific legend order use the `order` argument in the guide. (@thomasp85, #4458)",NA
ggplot2,1,16,16,FALSE,"Fix various issues with how `labels`, `breaks`, `limits`, and `show.limits` interact in the different binning guides (@thomasp85, #4831)",NA
ggplot2,1,17,17,FALSE,"Automatic break calculation now squishes the scale limits to the domain of the transformation. This allows `scale_{x/y}_sqrt()` to find breaks at 0\ when appropriate (@teunbrand, #980).",NA
ggplot2,1,18,18,FALSE,"Using multiple modified aesthetics correctly will no longer trigger warnings. If used incorrectly, the warning will now report the duplicated aesthetic instead of `NA` (@teunbrand, #4707).",NA
ggplot2,1,19,19,FALSE,"`...` supports `rlang::list2` dynamic dots in all public functions. (@mone27, #4764)",NA
ggplot2,1,20,20,FALSE,"`theme()` now has a `strip.clip` argument, that can be set to `""off""` to prevent the clipping of strip text and background borders (@teunbrand, #4118)",NA
ggplot2,1,21,21,FALSE,`aes()` now supports the `!!!` operator in its first two arguments (#2675). Thanks to @yutannihilation and @teunbrand for draft implementations.,NA
ggplot2,1,22,22,FALSE,"Require rlang \>= 1.0.0 (@billybarc, #4797)",NA
ggplot2,1,23,23,FALSE,"`geom_violin()` no longer issues ""collapsing to unique 'x' values"" warning (@bersbersbers, #4455)",NA
ggplot2,1,24,24,FALSE,"`annotate()` now documents unsupported geoms (`geom_abline()`, `geom_hline()` and `geom_vline()`), and warns when they are requested (@mikmart, #4719)",NA
ggplot2,1,25,25,FALSE,"`presidential` dataset now includes Trump's presidency (@bkmgit, #4703).",NA
ggplot2,1,26,26,FALSE,referring to `x` in backquoted expressions with `label_bquote()` is no longer possible.,NA
ggplot2,1,27,27,FALSE,"`position_stack()` now works fully with `geom_text()` (@thomasp85, #4367)",NA
ggplot2,1,28,28,FALSE,"`geom_tile()` now correctly recognises missing data in `xmin`, `xmax`, `ymin`, and `ymax` (@thomasp85 and @sigmapi, #4495)",NA
ggplot2,1,29,29,FALSE,"`geom_hex()` will now use the binwidth from `stat_bin_hex()` if present, instead of deriving it (@thomasp85, #4580)",NA
ggplot2,1,30,30,FALSE,`geom_hex()` now works on non-linear coordinate systems (@thomasp85),NA
ggplot2,1,31,31,FALSE,"Fixed a bug throwing errors when trying to render an empty plot with secondary axes (@thomasp85, #4509)",NA
ggplot2,1,32,32,FALSE,"Axes are now added correctly in `facet_wrap()` when `as.table = FALSE` (@thomasp85, #4553)",NA
ggplot2,1,33,33,FALSE,"Better compatibility of custom device functions in `ggsave()` (@thomasp85, #4539)",NA
ggplot2,1,34,34,FALSE,"Binning scales are now more resilient to calculated limits that ends up being `NaN` after transformations (@thomasp85, #4510)",NA
ggplot2,1,35,35,FALSE,"Strip padding in `facet_grid()` is now only in effect if `strip.placement = ""outside""` *and* an axis is present between the strip and the panel (@thomasp85, #4610)",NA
ggplot2,1,36,36,FALSE,"Aesthetics of length 1 are now recycled to 0 if the length of the data is 0 (@thomasp85, #4588)",NA
ggplot2,1,37,37,FALSE,"Setting `size = NA` will no longer cause `guide_legend()` to error (@thomasp85, #4559)",NA
ggplot2,1,38,38,FALSE,"Setting `stroke` to `NA` in `geom_point()` will no longer impair the sizing of the points (@thomasp85, #4624)",NA
ggplot2,1,39,39,FALSE,"`stat_bin_2d()` now correctly recognises the `weight` aesthetic (@thomasp85, #4646)",NA
ggplot2,1,40,40,FALSE,"All geoms now have consistent exposure of linejoin and lineend parameters, and the guide keys will now respect these settings (@thomasp85, #4653)",NA
ggplot2,1,41,41,FALSE,"`geom_sf()` now respects `arrow` parameter for lines (@jakeruss, #4659)",NA
ggplot2,1,42,42,FALSE,"Updated documentation for `print.ggplot` to reflect that it returns the original plot, not the result of `ggplot_build()`. (@r2evans, #4390)",NA
ggplot2,1,43,43,FALSE,"`scale_*_manual()` no longer displays extra legend keys, or changes their order, when a named `values` argument has more items than the data. To display all `values` on the legend instead, use `scale_*_manual(values = vals, limits = names(vals))`. (@teunbrand, @banfai, #4511, #4534)",NA
ggplot2,1,44,44,FALSE,"`geom_contour()` now accepts a function in the `breaks` argument (@eliocamp, #4652).",NA
ggplot2,1,45,45,FALSE,"VISUAL CHANGE: `scale_*_viridis_b()` now uses the full range of the viridis scales (@gregleleu, #4737)",NA
ggplot2,1,46,46,FALSE,"Updated documentation for `geom_contour()` to correctly reflect argument precedence between `bins` and `binwidth`. (@eliocamp, #4651)",NA
ggplot2,1,47,47,FALSE,The `ticks.linewidth` and `frame.linewidth` parameters of `guide_colourbar()` are now multiplied with `.pt` like elsewhere in ggplot2. It can cause visual changes when these arguments are not the defaults and these changes can be restored to their previous behaviour by adding `/ .pt` (@teunbrand #4314).,NA
ggplot2,1,48,48,FALSE,"Dots in `geom_dotplot()` are now correctly aligned to the baseline when `stackratio != 1` and `stackdir != ""up""` (@mjskay, #4614)",NA
ggplot2,1,49,49,FALSE,"Key glyphs for `geom_boxplot()`, `geom_crossbar()`, `geom_pointrange()`, and `geom_linerange()` are now orientation-aware (@mjskay, #4732)",NA
ggplot2,1,50,50,FALSE,"Updated documentation for `geom_smooth()` to more clearly describe effects of the `fullrange` parameter (@thoolihan, #4399).",NA
ggplot2,1,51,51,FALSE,Revert changes made in #4434 (apply transform to intercept in `geom_abline()`) as it introduced undesirable issues far worse than,NA
ggplot2,1,52,52,FALSE,Fixes an issue in `ggsave()` when producing emf/wmf files,NA
ggplot2,1,53,53,FALSE,Warn when grDevices specific arguments are passed to ragg devices,NA
ggplot2,1,54,54,FALSE,"Fix an issue where `coord_sf()` was reporting that it is non-linear even when data is provided in projected coordinates (@clauswilke,",NA
ggplot2,1,55,55,FALSE,"Alt-text can now be added to a plot using the `alt` label, i.e `+ labs(alt = ...)`. Currently this alt text is not automatically propagated, but we plan to integrate into Shiny, RMarkdown, and other tools in the future. (@thomasp85, #4477)",NA
ggplot2,1,56,56,FALSE,"Add support for the BrailleR package for creating descriptions of the plot when rendered (@thomasp85, #4459)",NA
ggplot2,1,57,57,FALSE,"`coord_sf()` now has an argument `default_crs` that specifies the coordinate reference system (CRS) for non-sf layers and scale/coord limits. This argument defaults to `NULL`, which means non-sf layers are assumed to be in projected coordinates, as in prior ggplot2 versions. Setting `default_crs = sf::st_crs(4326)` provides a simple way to interpret x and y positions as longitude and latitude, regardless of the CRS used by `coord_sf()`. Authors of extension packages implementing `stat_sf()`-like functionality are encouraged to look at the source code of `stat_sf()`'s `compute_group()` function to see how to provide scale-limit hints to `coord_sf()` (@clauswilke, #3659).",NA
ggplot2,1,58,58,FALSE,"`ggsave()` now uses ragg to render raster output if ragg is available. It also handles custom devices that sets a default unit (e.g. `ragg::agg_png`) correctly (@thomasp85, #4388)",NA
ggplot2,1,59,59,FALSE,"`ggsave()` now returns the saved file location invisibly (#3379, @eliocamp). Note that, as a side effect, an unofficial hack `<ggplot object> + ggsave()` no longer works (#4513).",NA
ggplot2,1,60,60,FALSE,"The scale arguments `limits`, `breaks`, `minor_breaks`, `labels`, `rescaler` and `oob` now accept purrr style lambda notation (@teunbrand, #4427). The same is true for `as_labeller()` (and therefore also `labeller()`) (@netique, #4188).",NA
ggplot2,1,61,61,FALSE,"Manual scales now allow named vectors passed to `values` to contain fewer elements than existing in the data. Elements not present in values will be set to `NA` (@thomasp85, #3451)",NA
ggplot2,1,62,62,FALSE,"Date and datetime position scales support out-of-bounds (oob) arguments to control how limits affect data outside those limits (@teunbrand, #4199).",NA
ggplot2,1,63,63,FALSE,"Fix a bug that `after_stat()` and `after_scale()` cannot refer to aesthetics if it's specified in the plot-global mapping (@yutannihilation, #4260).",NA
ggplot2,1,64,64,FALSE,"Fix bug in `annotate_logticks()` that would cause an error when used together with `coord_flip()` (@thomasp85, #3954)",NA
ggplot2,1,65,65,FALSE,"Fix a bug in `geom_abline()` that resulted in `intercept` not being subjected to the transformation of the y scale (@thomasp85, #3741)",NA
ggplot2,1,66,66,FALSE,"Extent the range of the line created by `geom_abline()` so that line ending is not visible for large linewidths (@thomasp85, #4024)",NA
ggplot2,1,67,67,FALSE,"Fix bug in `geom_dotplot()` where dots would be positioned wrong with `stackgroups = TRUE` (@thomasp85, #1745)",NA
ggplot2,1,68,68,FALSE,"Fix calculation of confidence interval for locfit smoothing in `geom_smooth()` (@topepo, #3806)",NA
ggplot2,1,69,69,FALSE,"Fix bug in `geom_text()` where `""outward""` and `""inward""` justification for some `angle` values was reversed (@aphalo, #4169, #4447)",NA
ggplot2,1,70,70,FALSE,"`ggsave()` now sets the default background to match the fill value of the `plot.background` theme element (@karawoo, #4057)",NA
ggplot2,1,71,71,FALSE,"It is now deprecated to specify `guides(<scale> = FALSE)` or `scale_*(guide = FALSE)` to remove a guide. Please use `guides(<scale> = ""none"")` or `scale_*(guide = ""none"")` instead (@yutannihilation, #4097)",NA
ggplot2,1,72,72,FALSE,"Fix a bug in `guide_bins()` where keys would disappear if the guide was reversed (@thomasp85, #4210)",NA
ggplot2,1,73,73,FALSE,"Fix bug in `guide_coloursteps()` that would repeat the terminal bins if the breaks coincided with the limits of the scale (@thomasp85, #4019)",NA
ggplot2,1,74,74,FALSE,"Make sure that default labels from default mappings doesn't overwrite default labels from explicit mappings (@thomasp85, #2406)",NA
ggplot2,1,75,75,FALSE,"Fix bug in `labeller()` where parsing was turned off if `.multiline = FALSE` (@thomasp85, #4084)",NA
ggplot2,1,76,76,FALSE,"Make sure `label_bquote()` has access to the calling environment when evaluating the labels (@thomasp85, #4141)",NA
ggplot2,1,77,77,FALSE,"Fix a bug in the layer implementation that introduced a new state after the first render which could lead to a different look when rendered the second time (@thomasp85, #4204)",NA
ggplot2,1,78,78,FALSE,"Fix a bug in legend justification where justification was lost of the legend dimensions exceeded the available size (@thomasp85, #3635)",NA
ggplot2,1,79,79,FALSE,"Fix a bug in `position_dodge2()` where `NA` values in thee data would cause an error (@thomasp85, #2905)",NA
ggplot2,1,80,80,FALSE,"Make sure `position_jitter()` creates the same jittering independent of whether it is called by name or with constructor (@thomasp85, #2507)",NA
ggplot2,1,81,81,FALSE,"Fix a bug in `position_jitter()` where different jitters would be applied to different position aesthetics of the same axis (@thomasp85, #2941)",NA
ggplot2,1,82,82,FALSE,"Fix a bug in `qplot()` when supplying `c(NA, NA)` as axis limits (@thomasp85, #4027)",NA
ggplot2,1,83,83,FALSE,"Remove cross-inheritance of default discrete colour/fill scales and check the type and aesthetic of function output if `type` is a function (@thomasp85, #4149)",NA
ggplot2,1,84,84,FALSE,"Fix bug in `scale_[x|y]_date()` where custom breaks functions that resulted in fracional dates would get misaligned (@thomasp85, #3965)",NA
ggplot2,1,85,85,FALSE,"Fix bug in `scale_[x|y]_datetime()` where a specified timezone would be ignored by the scale (@thomasp85, #4007)",NA
ggplot2,1,86,86,FALSE,"Fix issue in `sec_axis()` that would throw warnings in the absence of any secondary breaks (@thomasp85, #4368)",NA
ggplot2,1,87,87,FALSE,`stat_bin()`'s computed variable `width` is now documented (#3522).,NA
ggplot2,1,88,88,FALSE,"`stat_count()` now computes width based on the full dataset instead of per group (@thomasp85, #2047)",NA
ggplot2,1,89,89,FALSE,"Extended `stat_ecdf()` to calculate the cdf from either x or y instead from y only (@jgjl, #4005)",NA
ggplot2,1,90,90,FALSE,"Fix a bug in `stat_summary_bin()` where one more than the requested number of bins would be created (@thomasp85, #3824)",NA
ggplot2,1,91,91,FALSE,"Only drop groups in `stat_ydensity()` when there are fewer than two data points and throw a warning (@andrewwbutler, #4111).",NA
ggplot2,1,92,92,FALSE,"Fixed a bug in strip assembly when theme has `strip.text = element_blank()` and plots are faceted with multi-layered strips (@teunbrand, #4384).",NA
ggplot2,1,93,93,FALSE,"Using `theme(aspect.ratio = ...)` together with free space in `facet_grid()` now crrectly throws an error (@thomasp85, #3834)",NA
ggplot2,1,94,94,FALSE,"Fixed a bug in `labeller()` so that `.default` is passed to `as_labeller()` when labellers are specified by naming faceting variables. (@waltersom, #4031)",NA
ggplot2,1,95,95,FALSE,"Updated style for example code (@rjake, #4092)",NA
ggplot2,1,96,96,FALSE,ggplot2 now requires R \>= 3.3 (#4247).,NA
ggplot2,1,97,97,FALSE,"ggplot2 now uses `rlang::check_installed()` to check if a suggested package is installed, which will offer to install the package before continuing (#4375, 1)",NA
ggplot2,1,98,98,FALSE,"Improved error with hint when piping a `ggplot` object into a facet function (#4379, @mitchelloharawild).",NA
ggplot2,1,99,99,FALSE,"Update the ggplot2 licence to an MIT license (#4231, #4232, #4233, and #4281)",NA
ggplot2,1,100,100,FALSE,Use vdiffr conditionally so ggplot2 can be tested on systems without vdiffr,NA
ggplot2,1,101,101,FALSE,Update tests to work with the new `all.equal()` defaults in R \>4.0.3,NA
ggplot2,1,102,102,FALSE,"Fixed a bug that `guide_bins()` mistakenly ignore `override.aes` argument (@yutannihilation, #4085).",NA
ggplot2,1,103,103,FALSE,"Added an `outside` option to `annotation_logticks()` that places tick marks outside of the plot bounds. (#3783, @kbodwin)",NA
ggplot2,1,104,104,FALSE,"`annotation_raster()` adds support for native rasters. For large rasters, native rasters render significantly faster than arrays (@kent37, #3388)",NA
ggplot2,1,105,105,FALSE,"Facet strips now have dedicated position-dependent theme elements (`strip.text.x.top`, `strip.text.x.bottom`, `strip.text.y.left`, `strip.text.y.right`) that inherit from `strip.text.x` and `strip.text.y`, respectively. As a consequence, some theme stylings now need to be applied to the position-dependent elements rather than to the parent elements. This change was already introduced in ggplot2 3.3.0 but not listed in the changelog. (@thomasp85, #3683)",NA
ggplot2,1,106,106,FALSE,"Facets now handle layers containing no data (@yutannihilation, #3853).",NA
ggplot2,1,107,107,FALSE,"A newly added geom `geom_density_2d_filled()` and associated stat `stat_density_2d_filled()` can draw filled density contours (@clauswilke, #3846).",NA
ggplot2,1,108,108,FALSE,"A newly added `geom_function()` is now recommended to use in conjunction with/instead of `stat_function()`. In addition, `stat_function()` now works with transformed y axes, e.g. `scale_y_log10()`, and in plots containing no other data or layers (@clauswilke, #3611, #3905, #3983).",NA
ggplot2,1,109,109,FALSE,"Fixed a bug in `geom_sf()` that caused problems with legend-type autodetection (@clauswilke, #3963).",NA
ggplot2,1,110,110,FALSE,"Support graphics devices that use the `file` argument instead of `fileneame` in `ggsave()` (@bwiernik, #3810)",NA
ggplot2,1,111,111,FALSE,"Default discrete color scales are now configurable through the `options()` of `ggplot2.discrete.colour` and `ggplot2.discrete.fill`. When set to a character vector of colour codes (or list of character vectors) with sufficient length, these colours are used for the default scale. See `help(scale_colour_discrete)` for more details and examples (@cpsievert, #3833).",NA
ggplot2,1,112,112,FALSE,"Default continuous colour scales (i.e., the `options()` `ggplot2.continuous.colour` and `ggplot2.continuous.fill`, which inform the `type` argument of `scale_fill_continuous()` and `scale_colour_continuous()`) now accept a function, which allows more control over these default `continuous_scale()`s (@cpsievert, #3827).",NA
ggplot2,1,113,113,FALSE,"A bug was fixed in `stat_contour()` when calculating breaks based on the `bins` argument (@clauswilke, #3879, #4004).",NA
ggplot2,1,114,114,FALSE,"Data columns can now contain `Vector` S4 objects, which are widely used in the Bioconductor project. (@teunbrand, #3837)",NA
ggplot2,1,115,115,FALSE,"The `panel_params` field in the `Layout` now contains a list of list of `ViewScale` objects, describing the trained coordinate system scales, instead of the list object used before. Any extensions that use this field will likely break, as will unit tests that checks aspects of this.",NA
ggplot2,1,116,116,FALSE,"`element_text()` now issues a warning when vectorized arguments are provided, as in `colour = c(""red"", ""green"", ""blue"")`. Such use is discouraged and not officially supported (@clauswilke, #3492).",NA
ggplot2,1,117,117,FALSE,"Changed `theme_grey()` setting for legend key so that it creates no border (`NA`) rather than drawing a white one. (@annennenne, #3180)",NA
ggplot2,1,118,118,FALSE,"`geom_ribbon()` now draws separate lines for the upper and lower intervals if `colour` is mapped. Similarly, `geom_area()` and `geom_density()` now draw the upper lines only in the same case by default. If you want old-style full stroking, use `outline.type = ""full""` (@yutannihilation, #3503 / @thomasp85, #3708).",NA
ggplot2,1,119,119,FALSE,"The evaluation time of aesthetics can now be controlled to a finer degree. `after_stat()` supersedes the use of `stat()` and `..var..`-notation, and is joined by `after_scale()` to allow for mapping to scaled aesthetic values. Remapping of the same aesthetic is now supported with `stage()`, so you can map a data variable to a stat aesthetic, and remap the same aesthetic to something else after statistical transformation (@thomasp85, #3534)",NA
ggplot2,1,120,120,FALSE,"All `coord_*()` functions with `xlim` and `ylim` arguments now accept vectors with `NA` as a placeholder for the minimum or maximum value (e.g., `ylim = c(0, NA)` would zoom the y-axis from 0 to the maximum value observed in the data). This mimics the behaviour of the `limits` argument in continuous scale functions (@paleolimbot, #2907).",NA
ggplot2,1,121,121,FALSE,"Allowed reversing of discrete scales by re-writing `get_limits()` (@AnneLyng, #3115)",NA
ggplot2,1,122,122,FALSE,"All geoms and stats that had a direction (i.e. where the x and y axes had different interpretation), can now freely choose their direction, instead of relying on `coord_flip()`. The direction is deduced from the aesthetic mapping, but can also be specified directly with the new `orientation` argument (@thomasp85, #3506).",NA
ggplot2,1,123,123,FALSE,"Position guides can now be customized using the new `guide_axis()`, which can be passed to position `scale_*()` functions or via `guides()`. The new axis guide (`guide_axis()`) comes with arguments `check.overlap` (automatic removal of overlapping labels), `angle` (easy rotation of axis labels), and `n.dodge` (dodge labels into multiple rows/columns) (@paleolimbot, #3322).",NA
ggplot2,1,124,124,FALSE,"A new scale type has been added, that allows binning of aesthetics at the scale level. It has versions for both position and non-position aesthetics and comes with two new guides (`guide_bins` and `guide_coloursteps`) (@thomasp85, #3096)",NA
ggplot2,1,125,125,FALSE,"`scale_x_continuous()` and `scale_y_continuous()` gains an `n.breaks` argument guiding the number of automatic generated breaks (@thomasp85, #3102)",NA
ggplot2,1,126,126,FALSE,"Added `stat_contour_filled()` and `geom_contour_filled()`, which compute and draw filled contours of gridded data (@paleolimbot, #3044). `geom_contour()` and `stat_contour()` now use the isoband package to compute contour lines. The `complete` parameter (which was undocumented and has been unused for at least four years) was removed (@paleolimbot, #3044).",NA
ggplot2,1,127,127,FALSE,"Themes have gained two new parameters, `plot.title.position` and `plot.caption.position`, that can be used to customize how plot title/subtitle and plot caption are positioned relative to the overall plot (@clauswilke, #3252).",NA
ggplot2,1,128,128,FALSE,"`Geom` now gains a `setup_params()` method in line with the other ggproto classes (@thomasp85, #3509)",NA
ggplot2,1,129,129,FALSE,"The newly added function `register_theme_elements()` now allows developers of extension packages to define their own new theme elements and place them into the ggplot2 element tree (@clauswilke, #2540).",NA
ggplot2,1,130,130,FALSE,"`coord_trans()` now draws second axes and accepts `xlim`, `ylim`, and `expand` arguments to bring it up to feature parity with `coord_cartesian()`. The `xtrans` and `ytrans` arguments that were deprecated in version 1.0.1 in favour of `x` and `y` were removed (@paleolimbot, #2990).",NA
ggplot2,1,131,131,FALSE,"`coord_trans()` now calculates breaks using the expanded range (previously these were calculated using the unexpanded range, which resulted in differences between plots made with `coord_trans()` and those made with `coord_cartesian()`). The expansion for discrete axes in `coord_trans()` was also updated such that it behaves identically to that in `coord_cartesian()` (@paleolimbot, #3338).",NA
ggplot2,1,132,132,FALSE,`expand_scale()` was deprecated in favour of `expansion()` for setting the `expand` argument of `x` and `y` scales (@paleolimbot).,NA
ggplot2,1,133,133,FALSE,"`geom_abline()`, `geom_hline()`, and `geom_vline()` now issue more informative warnings when supplied with set aesthetics (i.e., `slope`, `intercept`, `yintercept`, and/or `xintercept`) and mapped aesthetics (i.e., `data` and/or `mapping`).",NA
ggplot2,1,134,134,FALSE,"Fix a bug in `geom_raster()` that squeezed the image when it went outside scale limits (#3539, @thomasp85)",NA
ggplot2,1,135,135,FALSE,"`geom_sf()` now determines the legend type automatically (@microly, #3646).",NA
ggplot2,1,136,136,FALSE,"`geom_sf()` now removes rows that can't be plotted due to `NA` aesthetics (#3546, @thomasp85)",NA
ggplot2,1,137,137,FALSE,"`geom_sf()` now applies alpha to linestring geometries (#3589, @yutannihilation).",NA
ggplot2,1,138,138,FALSE,"`gg_dep()` was deprecated (@perezp44, #3382).",NA
ggplot2,1,139,139,FALSE,"Added function `ggplot_add.by()` for lists created with `by()`, allowing such lists to be added to ggplot objects (#2734, @Maschette)",NA
ggplot2,1,140,140,FALSE,"ggplot2 no longer depends on reshape2, which means that it no longer (recursively) needs plyr, stringr, or stringi packages.",NA
ggplot2,1,141,141,FALSE,"Increase the default `nbin` of `guide_colourbar()` to place the ticks more precisely (#3508, @yutannihilation).",NA
ggplot2,1,142,142,FALSE,"`manual_scale()` now matches `values` with the order of `breaks` whenever `values` is an unnamed vector. Previously, unnamed `values` would match with the limits of the scale and ignore the order of any `breaks` provided. Note that this may change the appearance of plots that previously relied on the unordered behaviour (#2429, @idno0001).",NA
ggplot2,1,143,143,FALSE,"`scale_manual_*(limits = ...)` now actually limits the scale (#3262, @yutannihilation).",NA
ggplot2,1,144,144,FALSE,"Fix a bug when `show.legend` is a named logical vector (#3461, @yutannihilation).",NA
ggplot2,1,145,145,FALSE,"Added weight aesthetic option to `stat_density()` and made scaling of weights the default (@annennenne, #2902)",NA
ggplot2,1,146,146,FALSE,"`stat_density2d()` can now take an `adjust` parameter to scale the default bandwidth. (#2860, @haleyjeppson)",NA
ggplot2,1,147,147,FALSE,"`stat_smooth()` uses `REML` by default, if `method = ""gam""` and `gam`'s method is not specified (@ikosmidis, #2630).",NA
ggplot2,1,148,148,FALSE,"stacking text when calculating the labels and the y axis with `stat_summary()` now works (@ikosmidis, #2709)",NA
ggplot2,1,149,149,FALSE,"`stat_summary()` and related functions now support rlang-style lambda functions (#3568, @dkahle).",NA
ggplot2,1,150,150,FALSE,"The data mask pronoun, `.data`, is now stripped from default labels.",NA
ggplot2,1,151,151,FALSE,"Addition of partial themes to plots has been made more predictable; stepwise addition of individual partial themes is now equivalent to addition of multple theme elements at once (@clauswilke, #3039).",NA
ggplot2,1,152,152,FALSE,"Facets now don't fail even when some variable in the spec are not available in all layers (@yutannihilation, #2963).",NA
ggplot2,1,153,153,FALSE,`position_stack()` no longer changes the order of the input data. Changes to the internal behaviour of `geom_ribbon()` made this,NA
ggplot2,1,154,154,FALSE,Using `qplot()` with a single positional aesthetic will no longer,NA
ggplot2,1,156,156,FALSE,"Two patches (#2996 and #3050) fixed minor rendering problems. In most cases, the visual changes are so subtle that they are difficult to see with the naked eye. However, these changes are detected by the vdiffr package, and therefore any package developers who use vdiffr to test for visual correctness of ggplot2 plots will have to regenerate all reference images.",NA
ggplot2,1,157,157,FALSE,"In some cases, ggplot2 now produces a warning or an error for code that previously produced plot output. In all these cases, the previous plot output was accidental, and the plotting code uses the ggplot2 API in a way that would lead to undefined behavior. Examples include a missing `group` aesthetic in `geom_boxplot()` (#3316), annotations across multiple facets (#3305), and not using aesthetic mappings when drawing ribbons with `geom_ribbon()` (#3318).",NA
ggplot2,1,158,158,FALSE,"This release includes a range of internal changes that speeds up plot generation. None of the changes are user facing and will not break any code, but in general ggplot2 should feel much faster. The changes includes, but are not limited to:",NA
ggplot2,2,158,159,FALSE,* Caching ascent and descent dimensions of text to avoid recalculating it for every title.,"This release includes a range of internal changes that speeds up plot generation. None of the changes are user facing and will not break any code, but in general ggplot2 should feel much faster. The changes includes, but are not limited to:"
ggplot2,2,158,160,FALSE,* Using a faster data.frame constructor as well as faster indexing into data.frames,"This release includes a range of internal changes that speeds up plot generation. None of the changes are user facing and will not break any code, but in general ggplot2 should feel much faster. The changes includes, but are not limited to:"
ggplot2,2,158,161,FALSE,"* Removing the plyr dependency, replacing plyr functions with faster equivalents.","This release includes a range of internal changes that speeds up plot generation. None of the changes are user facing and will not break any code, but in general ggplot2 should feel much faster. The changes includes, but are not limited to:"
ggplot2,1,162,162,FALSE,"`geom_polygon()` can now draw polygons with holes using the new `subgroup` aesthetic. This functionality requires R 3.6.0 (@thomasp85, #3128)",NA
ggplot2,1,163,163,FALSE,"Aesthetic mappings now accept functions that return `NULL` (@yutannihilation, #2997).",NA
ggplot2,1,164,164,FALSE,"`stat_function()` now accepts rlang/purrr style anonymous functions for the `fun` parameter (@dkahle, #3159).",NA
ggplot2,1,165,165,FALSE,"`geom_rug()` gains an ""outside"" option to allow for moving the rug tassels to outside the plot area (@njtierney, #3085) and a `length` option to allow for changing the length of the rug lines (@daniel-wells, #3109).",NA
ggplot2,1,166,166,FALSE,"All geoms now take a `key_glyph` paramter that allows users to customize how legend keys are drawn (@clauswilke, #3145). In addition, a new key glyph `timeseries` is provided to draw nice legends for time series (@mitchelloharawild, #3145).",NA
ggplot2,1,167,167,FALSE,"Layers now have a new member function `setup_layer()` which is called at the very beginning of the plot building process and which has access to the original input data and the plot object being built. This function allows the creation of custom layers that autogenerate aesthetic mappings based on the input data or that filter the input data in some form. For the time being, this feature is not exported, but it has enabled the development of a new layer type, `layer_sf()` (see next item). Other special-purpose layer types may be added in the future (@clauswilke, #2872).",NA
ggplot2,1,168,168,FALSE,"A new layer type `layer_sf()` can auto-detect and auto-map sf geometry columns in the data. It should be used by extension developers who are writing new sf-based geoms or stats (@clauswilke, #3232).",NA
ggplot2,1,169,169,FALSE,"`x0` and `y0` are now recognized positional aesthetics so they will get scaled if used in extension geoms and stats (@thomasp85, #3168)",NA
ggplot2,1,170,170,FALSE,"Continuous scale limits now accept functions which accept the default limits and return adjusted limits. This makes it possible to write a function that e.g. ensures the limits are always a multiple of 100, regardless of the data (@econandrew, #2307).",NA
ggplot2,1,171,171,FALSE,"`cut_width()` now accepts `...` to pass further arguments to `base::cut.default()` like `cut_number()` and `cut_interval()` already did (@cderv, #3055)",NA
ggplot2,1,172,172,FALSE,"`coord_map()` now can have axes on the top and right (@karawoo, #3042).",NA
ggplot2,1,173,173,FALSE,"`coord_polar()` now correctly rescales the secondary axis (@linzi-sg, #3278)",NA
ggplot2,1,174,174,FALSE,"`coord_sf()`, `coord_map()`, and `coord_polar()` now squash `-Inf` and `Inf` into the min and max of the plot (@yutannihilation, #2972).",NA
ggplot2,1,175,175,FALSE,"`coord_sf()` graticule lines are now drawn in the same thickness as panel grid lines in `coord_cartesian()`, and seting panel grid lines to `element_blank()` now also works in `coord_sf()` (@clauswilke, #2991, #2525).",NA
ggplot2,1,176,176,FALSE,"`economics` data has been regenerated. This leads to some changes in the values of all columns (especially in `psavert`), but more importantly, strips the grouping attributes from `economics_long`.",NA
ggplot2,1,177,177,FALSE,"`element_line()` now fills closed arrows (@yutannihilation, #2924).",NA
ggplot2,1,178,178,FALSE,"Facet strips on the left side of plots now have clipping turned on, preventing text from running out of the strip and borders from looking thicker than for other strips (@karawoo, #2772 and #3061).",NA
ggplot2,1,179,179,FALSE,"ggplot2 now works in Turkish locale (@yutannihilation, #3011).",NA
ggplot2,1,180,180,FALSE,"Clearer error messages for inappropriate aesthetics (@clairemcwhite, #3060).",NA
ggplot2,1,181,181,FALSE,"ggplot2 no longer attaches any external packages when using functions that depend on packages that are suggested but not imported by ggplot2. The affected functions include `geom_hex()`, `stat_binhex()`, `stat_summary_hex()`, `geom_quantile()`, `stat_quantile()`, and `map_data()` (@clauswilke, #3126).",NA
ggplot2,1,182,182,FALSE,"`geom_area()` and `geom_ribbon()` now sort the data along the x-axis in the `setup_data()` method rather than as part of `draw_group()` (@thomasp85, #3023)",NA
ggplot2,1,183,183,FALSE,"`geom_hline()`, `geom_vline()`, and `geom_abline()` now throw a warning if the user supplies both an `xintercept`, `yintercept`, or `slope` value and a mapping (@RichardJActon, #2950).",NA
ggplot2,1,184,184,FALSE,"`geom_rug()` now works with `coord_flip()` (@has2k1, #2987).",NA
ggplot2,1,185,185,FALSE,"`geom_violin()` no longer throws an error when quantile lines fall outside the violin polygon (@thomasp85, #3254).",NA
ggplot2,1,186,186,FALSE,"`guide_legend()` and `guide_colorbar()` now use appropriate spacing between legend key glyphs and legend text even if the legend title is missing (@clauswilke, #2943).",NA
ggplot2,1,187,187,FALSE,"Default labels are now generated more consistently; e.g., symbols no longer get backticks, and long expressions are abbreviated with `...` (@yutannihilation, #2981).",NA
ggplot2,1,188,188,FALSE,"All-`Inf` layers are now ignored for picking the scale (@yutannihilation, #3184).",NA
ggplot2,1,189,189,FALSE,"Diverging Brewer colour palette now use the correct mid-point colour (@dariyasydykova, #3072).",NA
ggplot2,1,190,190,FALSE,"`scale_color_continuous()` now points to `scale_colour_continuous()` so that it will handle `type = ""viridis""` as the documentation states (@hlendway, #3079).",NA
ggplot2,1,191,191,FALSE,"`scale_shape_identity()` now works correctly with `guide = ""legend""` (1, #3029)",NA
ggplot2,1,192,192,FALSE,"`scale_continuous` will now draw axis line even if the length of breaks is 0 (@thomasp85, #3257)",NA
ggplot2,1,193,193,FALSE,`stat_bin()` will now error when the number of bins exceeds 1e6 to avoid accidentally freezing the user session (@thomasp85).,NA
ggplot2,1,194,194,FALSE,"`sec_axis()` now places ticks accurately when using nonlinear transformations (@dpseidel, #2978).",NA
ggplot2,1,195,195,FALSE,"`facet_wrap()` and `facet_grid()` now automatically remove NULL from facet specs, and accept empty specs (@yutannihilation, #3070, #2986).",NA
ggplot2,1,196,196,FALSE,`stat_bin()` now handles data with only one unique value (@yutannihilation #3047).,NA
ggplot2,1,197,197,FALSE,"`sec_axis()` now accepts functions as well as formulas (@yutannihilation, #3031).",NA
ggplot2,1,198,198,FALSE,"New theme elements allowing different ticks lengths for each axis. For instance, this can be used to have inwards ticks on the x-axis (`axis.ticks.length.x`) and outwards ticks on the y-axis (`axis.ticks.length.y`) (@pank, #2935).",NA
ggplot2,1,199,199,FALSE,"The arguments of `Stat*$compute_layer()` and `Position*$compute_layer()` are now renamed to always match the ones of `Stat$compute_layer()` and `Position$compute_layer()` (@yutannihilation, #3202).",NA
ggplot2,1,200,200,FALSE,"`geom_*()` and `stat_*()` now accepts purrr-style lambda notation (@yutannihilation, #3138).",NA
ggplot2,1,201,201,FALSE,"`geom_tile()` and `geom_rect()` now draw rectangles without notches at the corners. The style of the corner can be controlled by `linejoin` parameters (@yutannihilation, #3050).",NA
ggplot2,1,202,202,FALSE,"In non-user-facing internal code (specifically in the `aes()` function and in the `aesthetics` argument of scale functions), ggplot2 now always uses the British spelling for aesthetics containing the word ""colour"". When users specify a ""color"" aesthetic it is automatically renamed to ""colour"". This renaming is also applied to non-standard aesthetics that contain the word ""color"". For example, ""point_color"" is renamed to ""point_colour"". This convention makes it easier to support both British and American spelling for novel, non-standard aesthetics, but it may require some adjustment for packages that have previously introduced non-standard color aesthetics using American spelling. A new function `standardise_aes_names()` is provided in case extension writers need to perform this renaming in their own code (@clauswilke, #2649).",NA
ggplot2,1,203,203,FALSE,"Functions that generate other functions (closures) now force the arguments that are used from the generated functions, to avoid hard-to-catch errors. This may affect some users of manual scales (such as `scale_colour_manual()`, `scale_fill_manual()`, etc.) who depend on incorrect behavior (@krlmlr, #2807).",NA
ggplot2,1,204,204,FALSE,"`Coord` objects now have a function `backtransform_range()` that returns the panel range in data coordinates. This change may affect developers of custom coords, who now should implement this function. It may also affect developers of custom geoms that use the `range()` function. In some applications, `backtransform_range()` may be more appropriate (@clauswilke, #2821).",NA
ggplot2,1,205,205,FALSE,"`coord_sf()` has much improved customization of axis tick labels. Labels can now be set manually, and there are two new parameters, `label_graticule` and `label_axes`, that can be used to specify which graticules to label on which side of the plot (@clauswilke, #2846, #2857, #2881).",NA
ggplot2,1,206,206,FALSE,"Two new geoms `geom_sf_label()` and `geom_sf_text()` can draw labels and text on sf objects. Under the hood, a new `stat_sf_coordinates()` calculates the x and y coordinates from the coordinates of the sf geometries. You can customize the calculation method via `fun.geometry` argument (@yutannihilation, #2761).",NA
ggplot2,1,207,207,FALSE,"`benchplot()` now uses tidy evaluation (@dpseidel, #2699).",NA
ggplot2,1,208,208,FALSE,"The error message in `compute_aesthetics()` now only provides the names of aesthetics with mismatched lengths, rather than all aesthetics (@karawoo, #2853).",NA
ggplot2,1,209,209,FALSE,"For faceted plots, data is no longer internally reordered. This makes it safer to feed data columns into `aes()` or into parameters of geoms or stats. However, doing so remains discouraged (@clauswilke, #2694).",NA
ggplot2,1,210,210,FALSE,"`coord_sf()` now also understands the `clip` argument, just like the other coords (@clauswilke, #2938).",NA
ggplot2,1,211,211,FALSE,"`fortify()` now displays a more informative error message for `grouped_df()` objects when dplyr is not installed (@jimhester, #2822).",NA
ggplot2,1,212,212,FALSE,"All `geom_*()` now display an informative error message when required aesthetics are missing (@dpseidel, #2637 and #2706).",NA
ggplot2,1,213,213,FALSE,"`geom_boxplot()` now understands the `width` parameter even when used with a non-standard stat, such as `stat_identity()` (@clauswilke, #2893).",NA
ggplot2,1,214,214,FALSE,"`geom_hex()` now understands the `size` and `linetype` aesthetics (@mikmart, #2488).",NA
ggplot2,1,215,215,FALSE,"`geom_hline()`, `geom_vline()`, and `geom_abline()` now work properly with `coord_trans()` (@clauswilke, #2149, #2812).",NA
ggplot2,1,216,216,FALSE,"`geom_text(..., parse = TRUE)` now correctly renders the expected number of items instead of silently dropping items that are empty expressions, e.g. the empty string """". If an expression spans multiple lines, we take just the first line and drop the rest. This same issue is also fixed for `geom_label()` and the axis labels for `geom_sf()` (@slowkow, #2867).",NA
ggplot2,1,217,217,FALSE,"`geom_sf()` now respects `lineend`, `linejoin`, and `linemitre` parameters for lines and polygons (@alistaire47, #2826).",NA
ggplot2,1,218,218,FALSE,"`ggsave()` now exits without creating a new graphics device if previously none was open (@clauswilke, #2363).",NA
ggplot2,1,219,219,FALSE,"`labs()` now has named arguments `title`, `subtitle`, `caption`, and `tag`. Also, `labs()` now accepts tidyeval (@yutannihilation, #2669).",NA
ggplot2,1,220,220,FALSE,"`position_nudge()` is now more robust and nudges only in the direction requested. This enables, for example, the horizontal nudging of boxplots (@clauswilke, #2733).",NA
ggplot2,1,221,221,FALSE,"`sec_axis()` and `dup_axis()` now return appropriate breaks for the secondary axis when applied to log transformed scales (@dpseidel, #2729).",NA
ggplot2,1,222,222,FALSE,"`sec_axis()` now works as expected when used in combination with tidy eval (@dpseidel, #2788).",NA
ggplot2,1,223,223,FALSE,"`scale_*_date()`, `scale_*_time()` and `scale_*_datetime()` can now display a secondary axis that is a **one-to-one** transformation of the primary axis, implemented using the `sec.axis` argument to the scale constructor (@dpseidel, #2244).",NA
ggplot2,1,224,224,FALSE,"`stat_contour()`, `stat_density2d()`, `stat_bin2d()`, `stat_binhex()` now calculate normalized statistics including `nlevel`, `ndensity`, and `ncount`. Also, `stat_density()` now includes the calculated statistic `nlevel`, an alias for `scaled`, to better match the syntax of `stat_bin()` (@bjreisman, #2679).",NA
ggplot2,1,225,225,FALSE,"ggplot2 now supports/uses tidy evaluation (as described below). This is a major change and breaks a number of packages; we made this breaking change because it is important to make ggplot2 more programmable, and to be more consistent with the rest of the tidyverse. The best general (and detailed) introduction to tidy evaluation can be found in the meta programming chapters in [Advanced R](https://adv-r.hadley.nz). The primary developer facing change is that `aes()` now contains quosures (expression + environment pairs) rather than symbols, and you'll need to take a different approach to extracting the information you need. A common symptom of this change are errors ""undefined columns selected"" or ""invalid 'type' (list) of argument"" (#2610). As in the previous version, constants (like `aes(x = 1)` or `aes(colour = ""smoothed"")`) are stored as is. In this version of ggplot2, if you need to describe a mapping in a string, use `quo_name()` (to generate single-line strings; longer expressions may be abbreviated) or `quo_text()` (to generate non-abbreviated strings that may span multiple lines). If you do need to extract the value of a variable instead use `rlang::eval_tidy()`. You may want to condition on `(packageVersion(""ggplot2"") <= ""2.2.1"")` so that your code can work with both released and development versions of ggplot2. We recognise that this is a big change and if you're not already familiar with rlang, there's a lot to learn. If you are stuck, or need any help, please reach out on <https://community.rstudio.com>.",NA
ggplot2,1,226,226,FALSE,"Error: Column `y` must be a 1d atomic vector or a list Internally, ggplot2 now uses `as.data.frame(tibble::as_tibble(x))` to convert a list into a data frame. This improves ggplot2's support for list-columns (needed for sf support), at a small cost: you can no longer use matrix-columns. Note that unlike tibble we still allow column vectors such as returned by `base::scale()` because of their widespread use.",NA
ggplot2,1,227,227,FALSE,"Error: More than one expression parsed Previously `aes_string(x = c(""a"", ""b"", ""c""))` silently returned `aes(x = a)`. Now this is a clear error.",NA
ggplot2,1,228,228,FALSE,"Error: `data` must be uniquely named but has duplicate columns If layer data contains columns with identical names an error will be thrown. In earlier versions the first occuring column was chosen silently, potentially masking that the wrong data was chosen.",NA
ggplot2,1,229,229,FALSE,Error: Aesthetics must be either length 1 or the same as the data Layers are stricter about the columns they will combine into a single data frame. Each aesthetic now must be either the same length as the data frame or a single value. This makes silent recycling errors much less likely.,NA
ggplot2,1,230,230,FALSE,Error: `coord_*` doesn't support free scales Free scales only work with selected coordinate systems; previously you'd get an incorrect plot.,NA
ggplot2,1,231,231,FALSE,"Error in f(...) : unused argument (range = c(0, 1)) This is because the `oob` argument to scale has been set to a function that only takes a single argument; it needs to take two arguments (`x`, and `range`).",NA
ggplot2,1,232,232,FALSE,"Error: unused argument (output) The function `guide_train()` now has an optional parameter `aesthetic` that allows you to override the `aesthetic` setting in the scale. To make your code work with the both released and development versions of ggplot2 appropriate, add `aesthetic = NULL` to the `guide_train()` method signature.",NA
ggplot2,1,232,233,TRUE,"```
# old
guide_train.legend <- function(guide, scale) {...}

# new 
guide_train.legend <- function(guide, scale, aesthetic = NULL) {...}
```",NA
ggplot2,1,232,233,FALSE,"Then, inside the function, replace `scale$aesthetics[1]`, `aesthetic %||% scale$aesthetics[1]`. (The %\|\|% operator is defined in the rlang package).",NA
ggplot2,1,232,234,TRUE,"```
# old
setNames(list(scale$map(breaks)), scale$aesthetics[1])

# new
setNames(list(scale$map(breaks)), aesthetic %||% scale$aesthetics[1])
```",NA
ggplot2,1,233,235,FALSE,The long-deprecated `subset` argument to `layer()` has been removed.,NA
ggplot2,1,234,236,FALSE,"`aes()` now supports quasiquotation so that you can use `!!`, `!!!`, and `:=`. This replaces `aes_()` and `aes_string()` which are now soft-deprecated (but will remain around for a long time).",NA
ggplot2,1,235,237,FALSE,"`facet_wrap()` and `facet_grid()` now support `vars()` inputs. Like `dplyr::vars()`, this helper quotes its inputs and supports quasiquotation. For instance, you can now supply faceting variables like this: `facet_wrap(vars(am, cyl))` instead of `facet_wrap(~am + cyl)`. Note that the formula interface is not going away and will not be deprecated. `vars()` is simply meant to make it easier to create functions around `facet_wrap()` and `facet_grid()`. The first two arguments of `facet_grid()` become `rows` and `cols` and now support `vars()` inputs. Note however that we took special care to ensure complete backward compatibility. With this change `facet_grid(vars(cyl), vars(am, vs))` is equivalent to `facet_grid(cyl ~ am + vs)`, and `facet_grid(cols = vars(am, vs))` is equivalent to `facet_grid(. ~ am + vs)`. One nice aspect of the new interface is that you can now easily supply names: `facet_grid(vars(Cylinder = cyl), labeller = label_both)` will give nice label titles to the facets. Of course, those names can be unquoted with the usual tidy eval syntax.",NA
ggplot2,1,236,238,FALSE,ggplot2 now has full support for sf with `geom_sf()` and `coord_sf()`:,NA
ggplot2,1,236,239,TRUE,"```
nc <- sf::st_read(system.file(""shape/nc.shp"", package = ""sf""), quiet = TRUE)
ggplot(nc) +
  geom_sf(aes(fill = AREA))
```",NA
ggplot2,1,236,239,FALSE,"It supports all simple features, automatically aligns CRS across layers, sets up the correct aspect ratio, and draws a graticule.",NA
ggplot2,1,237,240,FALSE,"ggplot2 now works on R 3.1 onwards, and uses the [vdiffr](https://github.com/r-lib/vdiffr) package for visual testing.",NA
ggplot2,1,238,241,FALSE,"In most cases, accidentally using `%>%` instead of `+` will generate an informative error (#2400).",NA
ggplot2,1,239,242,FALSE,"New syntax for calculated aesthetics. Instead of using `aes(y = ..count..)` you can (and should!) use `aes(y = stat(count))`. `stat()` is a real function with documentation which hopefully will make this part of ggplot2 less confusing (#2059). `stat()` is particularly nice for more complex calculations because you only need to specify it once: `aes(y = stat(count / max(count)))`, rather than `aes(y = ..count.. / max(..count..))`",NA
ggplot2,1,240,243,FALSE,"New `tag` label for adding identification tags to plots, typically used for labelling a subplot with a letter. Add a tag with `labs(tag = ""A"")`, style it with the `plot.tag` theme element, and control position with the `plot.tag.position` theme setting (@thomasp85).",NA
ggplot2,1,241,244,FALSE,"`geom_segment()` and `geom_curve()` have a new `arrow.fill` parameter which allows you to specify a separate fill colour for closed arrowheads (@hrbrmstr and @clauswilke, #2375).",NA
ggplot2,1,242,245,FALSE,"`geom_point()` and friends can now take shapes as strings instead of integers, e.g. `geom_point(shape = ""diamond"")` (@daniel-barnett, #2075).",NA
ggplot2,1,243,246,FALSE,"`position_dodge()` gains a `preserve` argument that allows you to control whether the `total` width at each `x` value is preserved (the current default), or ensure that the width of a `single` element is preserved (what many people want) (#1935).",NA
ggplot2,1,244,247,FALSE,"New `position_dodge2()` provides enhanced dodging for boxplots. Compared to `position_dodge()`, `position_dodge2()` compares `xmin` and `xmax` values\ to determine which elements overlap, and spreads overlapping elements evenly within the region of overlap. `position_dodge2()` is now the default position adjustment for `geom_boxplot()`, because it handles `varwidth = TRUE`, and will be considered for other geoms in the future. The `padding` parameter adds a small amount of padding between elements (@karawoo, #2143) and a `reverse` parameter allows you to reverse the order of placement (@karawoo, #2171).",NA
ggplot2,1,245,248,FALSE,"New `stat_qq_line()` makes it easy to add a simple line to a Q-Q plot, which makes it easier to judge the fit of the theoretical distribution (@nicksolomon).",NA
ggplot2,1,246,249,FALSE,"Improved support for mapping date/time variables to `alpha`, `size`, `colour`, and `fill` aesthetics, including `date_breaks` and `date_labels` arguments (@karawoo, #1526), and new `scale_alpha()` variants (@karawoo, #1526).",NA
ggplot2,1,247,250,FALSE,"Improved support for ordered factors. Ordered factors throw a warning when mapped to shape (unordered factors do not), and do not throw warnings when mapped to size or alpha (unordered factors do). Viridis is used as the default colour and fill scale for ordered factors (@karawoo, #1526).",NA
ggplot2,1,248,251,FALSE,"The `expand` argument of `scale_*_continuous()` and `scale_*_discrete()` now accepts separate expansion values for the lower and upper range limits. The expansion limits can be specified using the convenience function `expand_scale()`. Separate expansion limits may be useful for bar charts, e.g. if one wants the bottom of the bars to be flush with the x axis but still leave some (automatically calculated amount of) space above them:",NA
ggplot2,1,248,252,TRUE,"```
ggplot(mtcars) +
    geom_bar(aes(x = factor(cyl))) +
    scale_y_continuous(expand = expand_scale(mult = c(0, .1)))
```",NA
ggplot2,1,248,252,FALSE,"It can also be useful for line charts, e.g. for counts over time, where one wants to have a 'hard' lower limit of y = 0 but leave the upper limit unspecified (and perhaps differing between panels), with some extra space above the highest point on the line (with symmetrical limits, the extra space above the highest point could in some cases cause the lower limit to be negative). The old syntax for the `expand` argument will, of course, continue to work (@huftis, #1669).",NA
ggplot2,1,249,253,FALSE,"`scale_colour_continuous()` and `scale_colour_gradient()` are now controlled by global options `ggplot2.continuous.colour` and `ggplot2.continuous.fill`. These can be set to `""gradient""` (the default) or `""viridis""` (@karawoo).",NA
ggplot2,1,250,254,FALSE,"New `scale_colour_viridis_c()`/`scale_fill_viridis_c()` (continuous) and `scale_colour_viridis_d()`/`scale_fill_viridis_d()` (discrete) make it easy to use Viridis colour scales (@karawoo, #1526).",NA
ggplot2,1,251,255,FALSE,"Guides for `geom_text()` now accept custom labels with `guide_legend(override.aes = list(label = ""foo""))` (@brianwdavis, #2458).",NA
ggplot2,1,252,256,FALSE,"Strips gain margins on all sides by default. This means that to fully justify text to the edge of a strip, you will need to also set the margins to 0 (@karawoo).",NA
ggplot2,1,253,257,FALSE,Rotated strip labels now correctly understand `hjust` and `vjust` parameters at all angles (@karawoo).,NA
ggplot2,1,254,258,FALSE,"Strip labels now understand justification relative to the direction of the text, meaning that in y facets, the strip text can be placed at either end of the strip using `hjust` (@karawoo).",NA
ggplot2,1,255,259,FALSE,"Legend titles and labels get a little extra space around them, which prevents legend titles from overlapping the legend at large font sizes (@karawoo, #1881).",NA
ggplot2,1,256,260,FALSE,"New `autolayer()` S3 generic (@mitchelloharawild, #1974). This is similar to `autoplot()` but produces layers rather than complete plots.",NA
ggplot2,1,257,261,FALSE,Custom objects can now be added using `+` if a `ggplot_add` method has been defined for the class of the object (@thomasp85).,NA
ggplot2,1,258,262,FALSE,"Theme elements can now be subclassed. Add a `merge_element` method to control how properties are inherited from the parent element. Add an `element_grob` method to define how elements are rendered into grobs (@thomasp85, #1981).",NA
ggplot2,1,259,263,FALSE,"Coords have gained new extension mechanisms. If you have an existing coord extension, you will need to revise the specification of the `train()` method. It is now called `setup_panel_params()` (better reflecting what it actually does) and now has arguments `scale_x`, and `scale_y` (the x and y scales respectively) and `param`, a list of plot specific parameters generated by `setup_params()`. What was formerly called `scale_details` (in coords), `panel_ranges` (in layout) and `panel_scales` (in geoms) are now consistently called `panel_params` (#1311). These are parameters of the coord that vary from panel to panel.",NA
ggplot2,1,260,264,FALSE,"`ggplot_build()` and `ggplot_gtable()` are now generics, so ggplot-subclasses can define additional behavior during the build stage.",NA
ggplot2,1,261,265,FALSE,"`guide_train()`, `guide_merge()`, `guide_geom()`, and `guide_gengrob()` are now exported as they are needed if you want to design your own guide. They are not currently documented; use at your own risk (#2528).",NA
ggplot2,1,262,266,FALSE,`scale_type()` generic is now exported and documented. Use this if you want to extend ggplot2 to work with a new type of vector.,NA
ggplot2,1,263,267,FALSE,`facet_grid()` gives a more informative error message if you try to use a variable in both rows and cols (#1928).,NA
ggplot2,1,264,268,FALSE,`facet_grid()` and `facet_wrap()` both give better error messages if you attempt to use an unsupported coord with free scales (#2049).,NA
ggplot2,1,265,269,FALSE,`label_parsed()` works once again (#2279).,NA
ggplot2,1,266,270,FALSE,You can now style the background of horizontal and vertical strips independently with `strip.background.x` and `strip.background.y` theme settings (#2249).,NA
ggplot2,1,267,271,FALSE,"`discrete_scale()` documentation now inherits shared definitions from `continuous_scale()` (@alistaire47, #2052).",NA
ggplot2,1,268,272,FALSE,"`guide_colorbar()` shows all colours of the scale (@has2k1, #2343).",NA
ggplot2,1,269,273,FALSE,`scale_identity()` once again produces legends by default (#2112).,NA
ggplot2,1,270,274,FALSE,"Tick marks for secondary axes with strong transformations are more accurately placed (@thomasp85, #1992).",NA
ggplot2,1,271,275,FALSE,Missing line types now reliably generate missing lines (with standard warning) (#2206).,NA
ggplot2,1,272,276,FALSE,Legends now ignore set aesthetics that are not length one (#1932).,NA
ggplot2,1,273,277,FALSE,"All colour and fill scales now have an `aesthetics` argument that can be used to set the aesthetic(s) the scale works with. This makes it possible to apply a colour scale to both colour and fill aesthetics at the same time, via `aesthetics = c(""colour"", ""fill"")` (@clauswilke).",NA
ggplot2,1,274,278,FALSE,"Three new generic scales work with any aesthetic or set of aesthetics: `scale_continuous_identity()`, `scale_discrete_identity()`, and `scale_discrete_manual()` (@clauswilke).",NA
ggplot2,1,275,279,FALSE,"`scale_*_gradient2()` now consistently omits points outside limits by rescaling after the limits are enforced (@foo-bar-baz-qux, #2230).",NA
ggplot2,1,276,280,FALSE,"`geom_label()` now correctly produces unbordered labels when `label.size` is 0, even when saving to PDF (@bfgray3, #2407).",NA
ggplot2,1,277,281,FALSE,"`layer()` gives considerably better error messages for incorrectly specified `geom`, `stat`, or `position` (#2401).",NA
ggplot2,1,278,282,FALSE,"In all layers that use it, `linemitre` now defaults to 10 (instead of 1) to better match base R.",NA
ggplot2,1,279,283,FALSE,"`geom_boxplot()` now supplies a default value if no `x` aesthetic is present (@foo-bar-baz-qux, #2110).",NA
ggplot2,1,280,284,FALSE,"`geom_density()` drops groups with fewer than two data points and throws a warning. For groups with two data points, density values are now calculated with `stats::density` (@karawoo, #2127).",NA
ggplot2,1,281,285,FALSE,"`geom_segment()` now also takes a `linejoin` parameter. This allows more control over the appearance of the segments, which is especially useful for plotting thick arrows (@Ax3man, #774).",NA
ggplot2,1,282,286,FALSE,"`geom_smooth()` now reports the formula used when `method = ""auto""` (@davharris #1951). `geom_smooth()` now orders by the `x` aesthetic, making it easier to pass pre-computed values without manual ordering (@izahn, #2028). It also now knows it has `ymin` and `ymax` aesthetics (#1939). The legend correctly reflects the status of the `se` argument when used with stats other than the default (@clauswilke, #1546).",NA
ggplot2,1,283,287,FALSE,"`geom_tile()` now once again interprets `width` and `height` correctly (1, #2510).",NA
ggplot2,1,284,288,FALSE,"`position_jitter()` and `position_jitterdodge()` gain a `seed` argument that allows the specification of a random seed for reproducible jittering (@krlmlr, #1996 and @slowkow, #2445).",NA
ggplot2,1,285,289,FALSE,`stat_density()` has better behaviour if all groups are dropped because they are too small (#2282).,NA
ggplot2,1,286,290,FALSE,"`stat_summary_bin()` now understands the `breaks` parameter (@karawoo, #2214).",NA
ggplot2,1,287,291,FALSE,`stat_bin()` now accepts functions for `binwidth`. This allows better binning when faceting along variables with different ranges (@botanize).,NA
ggplot2,1,288,292,FALSE,"`stat_bin()` and `geom_histogram()` now sum correctly when using the `weight` aesthetic (@jiho, #1921).",NA
ggplot2,1,289,293,FALSE,"`stat_bin()` again uses correct scaling for the computed variable `ndensity` (@timgoodman, #2324).",NA
ggplot2,1,290,294,FALSE,"`stat_bin()` and `stat_bin_2d()` now properly handle the `breaks` parameter when the scales are transformed (@has2k1, #2366).",NA
ggplot2,1,291,295,FALSE,"`update_geom_defaults()` and `update_stat_defaults()` allow American spelling of aesthetic parameters (@foo-bar-baz-qux, #2299).",NA
ggplot2,1,292,296,FALSE,"The `show.legend` parameter now accepts a named logical vector to hide/show only some aesthetics in the legend (@tutuchan, #1798).",NA
ggplot2,1,293,297,FALSE,Layers now silently ignore unknown aesthetics with value `NULL` (#1909).,NA
ggplot2,1,294,298,FALSE,"Clipping to the plot panel is now configurable, through a `clip` argument to coordinate systems, e.g. `coord_cartesian(clip = ""off"")` (@clauswilke, #2536).",NA
ggplot2,1,295,299,FALSE,"Like scales, coordinate systems now give you a message when you're replacing an existing coordinate system (#2264).",NA
ggplot2,1,296,300,FALSE,"`coord_polar()` now draws secondary axis ticks and labels (@dylan-stark, #2072), and can draw the radius axis on the right (@thomasp85, #2005).",NA
ggplot2,1,297,301,FALSE,"`coord_trans()` now generates a warning when a transformation generates non-finite values (@foo-bar-baz-qux, #2147).",NA
ggplot2,1,298,302,FALSE,"Complete themes now always override all elements of the default theme (@has2k1, #2058, #2079).",NA
ggplot2,1,299,303,FALSE,Themes now set default grid colour in `panel.grid` rather than individually in `panel.grid.major` and `panel.grid.minor` individually. This makes it slightly easier to customise the theme (#2352).,NA
ggplot2,1,300,304,FALSE,Fixed bug when setting strips to `element_blank()` (@thomasp85).,NA
ggplot2,1,301,305,FALSE,"Axes positioned on the top and to the right can now customize their ticks and lines separately (@thomasp85, #1899).",NA
ggplot2,1,302,306,FALSE,"Built-in themes gain parameters `base_line_size` and `base_rect_size` which control the default sizes of line and rectangle elements (@karawoo, #2176).",NA
ggplot2,1,303,307,FALSE,Default themes use `rel()` to set line widths (@baptiste).,NA
ggplot2,1,304,308,FALSE,Themes were tweaked for visual consistency and more graceful behavior when changing the base font size. All absolute heights or widths were replaced with heights or widths that are proportional to the base font size. One relative font size was eliminated (@clauswilke).,NA
ggplot2,1,305,309,FALSE,"The height of descenders is now calculated solely on font metrics and doesn't change with the specific letters in the string. This fixes minor alignment issues with plot titles, subtitles, and legend titles (#2288, @clauswilke).",NA
ggplot2,1,306,310,FALSE,"`guide_colorbar()` is more configurable: tick marks and color bar frame can now by styled with arguments `ticks.colour`, `ticks.linewidth`, `frame.colour`, `frame.linewidth`, and `frame.linetype` (@clauswilke).",NA
ggplot2,1,307,311,FALSE,"`guide_colorbar()` now uses `legend.spacing.x` and `legend.spacing.y` correctly, and it can handle multi-line titles. Minor tweaks were made to `guide_legend()` to make sure the two legend functions behave as similarly as possible (@clauswilke, #2397 and #2398).",NA
ggplot2,1,308,312,FALSE,"The theme elements `legend.title` and `legend.text` now respect the settings of `margin`, `hjust`, and `vjust` (@clauswilke, #2465, #1502).",NA
ggplot2,1,309,313,FALSE,"Non-angle parameters of `label.theme` or `title.theme` can now be set in `guide_legend()` and `guide_colorbar()` (@clauswilke, #2544).",NA
ggplot2,1,310,314,FALSE,"`fortify()` gains a method for tbls (@karawoo, #2218).",NA
ggplot2,1,311,315,FALSE,"`ggplot` gains a method for `grouped_df`s that adds a `.group` variable, which computes a unique value for each group. Use it with `aes(group = .group)` (#2351).",NA
ggplot2,1,312,316,FALSE,"`ggproto()` produces objects with class `c(""ggproto"", ""gg"")`, allowing for a more informative error message when adding layers, scales, or other ggproto objects (@jrnold, #2056).",NA
ggplot2,1,313,317,FALSE,"`ggsave()`'s DPI argument now supports 3 string options: ""retina"" (320 DPI), ""print"" (300 DPI), and ""screen"" (72 DPI) (@foo-bar-baz-qux, #2156). `ggsave()` now uses full argument names to avoid partial match warnings (#2355), and correctly restores the previous graphics device when several graphics devices are open (#2363).",NA
ggplot2,1,314,318,FALSE,"`print.ggplot()` now returns the original ggplot object, instead of the output from `ggplot_build()`. Also, the object returned from `ggplot_build()` now has the class `""ggplot_built""` (#2034).",NA
ggplot2,1,315,319,FALSE,`map_data()` now works even when purrr is loaded (tidyverse#66).,NA
ggplot2,1,316,320,FALSE,"New functions `summarise_layout()`, `summarise_coord()`, and `summarise_layers()` summarise the layout, coordinate systems, and layers of a built ggplot object (#2034, @wch). This provides a tested API that (e.g.) shiny can depend on.",NA
ggplot2,1,317,321,FALSE,"Updated startup messages reflect new resources (#2410, @mine-cetinkaya-rundel).",NA
ggplot2,1,319,323,FALSE,"`facet_grid()` and `facet_wrap()` now allow expressions in their faceting formulas (@DanRuderman, #1596).",NA
ggplot2,1,320,324,FALSE,"When `facet_wrap()` results in an uneven number of panels, axes will now be drawn underneath the hanging panels (fixes #1607)",NA
ggplot2,1,321,325,FALSE,Strips can now be freely positioned in `facet_wrap()` using the `strip.position` argument (deprecates `switch`).,NA
ggplot2,1,322,326,FALSE,"The relative order of panel, strip, and axis can now be controlled with the theme setting `strip.placement` that takes either `inside` (strip between panel and axis) or `outside` (strip after axis).",NA
ggplot2,1,323,327,FALSE,The theme option `panel.margin` has been deprecated in favour of `panel.spacing` to more clearly communicate intent.,NA
ggplot2,1,324,328,FALSE,"The position of x and y axes can now be changed using the `position` argument in `scale_x_*`and `scale_y_*` which can take `top` and `bottom`, and `left` and `right` respectively. The themes of top and right axes can be modified using the `.top` and `.right` modifiers",NA
ggplot2,1,325,329,FALSE,`scale_x_continuous()` and `scale_y_continuous()` can now display a secondary axis that is a **one-to-one** transformation of the primary axis (e.g. degrees Celcius to degrees Fahrenheit). The secondary axis will be positioned opposite to the primary axis and can be controlled with the `sec.axis` argument to the scale constructor.,NA
ggplot2,1,326,330,FALSE,"Scales worry less about having breaks. If no breaks can be computed, the plot will work instead of throwing an uninformative error (#791). This is particularly helpful when you have facets with free scales, and not all panels contain data.",NA
ggplot2,1,327,331,FALSE,Scales now warn when transformation introduces infinite values (#1696).,NA
ggplot2,1,328,332,FALSE,"`scale_*_datetime()` now supports time zones. It will use the timezone attached to the varaible by default, but can be overridden with the `timezone` argument.",NA
ggplot2,1,329,333,FALSE,New `scale_x_time()` and `scale_y_time()` generate reasonable default breaks and labels for hms vectors (#1752).,NA
ggplot2,1,338,342,FALSE,The `theme()` constructor now has named arguments rather than ellipses. This should make autocomplete substantially more useful. The documentation (including examples) has been considerably improved.,NA
ggplot2,1,339,343,FALSE,"Built-in themes are more visually homogeneous, and match `theme_grey` better. (@jiho, #1679)",NA
ggplot2,1,340,344,FALSE,"When computing the height of titles, ggplot2 now includes the height of the descenders (i.e. the bits of `g` and `y` that hang beneath the baseline). This improves the margins around titles, particularly the y axis label (#1712). I have also very slightly increased the inner margins of axis titles, and removed the outer margins.",NA
ggplot2,1,341,345,FALSE,"Theme element inheritance is now easier to work with as modification now overrides default `element_blank` elements (#1555, #1557, #1565, #1567)",NA
ggplot2,1,342,346,FALSE,"Horizontal legends (i.e. legends on the top or bottom) are horizontally aligned by default (#1842). Use `legend.box = ""vertical""` to switch back to the previous behaviour.",NA
ggplot2,1,343,347,FALSE,`element_line()` now takes an `arrow` argument to specify arrows at the end of lines (#1740),NA
ggplot2,1,344,348,FALSE,"`legend.justification` now controls appearance will plotting the legend outside of the plot area. For example, you can use `theme(legend.justification = ""top"")` to make the legend align with the top of the plot.",NA
ggplot2,1,345,349,FALSE,"`panel.margin` and `legend.margin` have been renamed to `panel.spacing` and `legend.spacing` respectively, to better communicate intent (they only affect spacing between legends and panels, not the margins around them)",NA
ggplot2,1,346,350,FALSE,`legend.margin` now controls margin around individual legends.,NA
ggplot2,1,347,351,FALSE,"New `legend.box.background`, `legend.box.spacing`, and `legend.box.margin` control the background, spacing, and margin of the legend box (the region that contains all legends).",NA
ggplot2,1,348,352,FALSE,ggplot2 now imports tibble. This ensures that all built-in datasets print compactly even if you haven't explicitly loaded tibble or dplyr (#1677).,NA
ggplot2,1,349,353,FALSE,Class of aesthetic mapping is preserved when adding `aes()` objects (#1624).,NA
ggplot2,1,350,354,FALSE,`+.gg` now works for lists that include data frames.,NA
ggplot2,1,351,355,FALSE,`annotation_x()` now works in the absense of global data (#1655),NA
ggplot2,1,352,356,FALSE,`geom_*(show.legend = FALSE)` now works for `guide_colorbar`.,NA
ggplot2,1,353,357,FALSE,"`geom_boxplot()` gains new `outlier.alpha` (@jonathan-g) and `outlier.fill` (@schloerke, #1787) parameters to control the alpha/fill of outlier points independently of the alpha of the boxes.",NA
ggplot2,1,354,358,FALSE,"`position_jitter()` (and hence `geom_jitter()`) now correctly computes the jitter width/jitter when supplied by the user (#1775, @has2k1).",NA
ggplot2,1,355,359,FALSE,`geom_contour()` more clearly describes what inputs it needs (#1577).,NA
ggplot2,1,356,360,FALSE,`geom_curve()` respects the `lineend` paramater (#1852).,NA
ggplot2,1,357,361,FALSE,`geom_histogram()` and `stat_bin()` understand the `breaks` parameter once more. (#1665). The floating point adjustment for histogram bins is now actually used - it was previously inadvertently ignored (#1651).,NA
ggplot2,1,358,362,FALSE,"`geom_violin()` no longer transforms quantile lines with the alpha aesthetic (@mnbram, #1714). It no longer errors when quantiles are requested but data have zero range (#1687). When `trim = FALSE` it once again has a nice range that allows the density to reach zero (by extending the range 3 bandwidths to either side of the data) (#1700).",NA
ggplot2,1,359,363,FALSE,"`geom_dotplot()` works better when faceting and binning on the y-axis. (#1618, @has2k1).",NA
ggplot2,1,360,364,FALSE,"`geom_hexbin()` once again supports `..density..` (@mikebirdgeneau, #1688).",NA
ggplot2,1,361,365,FALSE,`geom_step()` gives useful warning if only one data point in layer (#1645).,NA
ggplot2,1,362,366,FALSE,`layer()` gains new `check.aes` and `check.param` arguments. These allow geom/stat authors to optional suppress checks for known aesthetics/parameters. Currently this is used only in `geom_blank()` which powers `expand_limits()` (#1795).,NA
ggplot2,1,363,367,FALSE,All `stat_*()` display a better error message when required aesthetics are missing.,NA
ggplot2,1,364,368,FALSE,`stat_bin()` and `stat_summary_hex()` now accept length 1 `binwidth` (#1610),NA
ggplot2,1,365,369,FALSE,"`stat_density()` gains new argument `n`, which is passed to underlying function `stats::density` (""number of equally spaced points at which the density is to be estimated""). (@hbuschme)",NA
ggplot2,1,366,370,FALSE,`stat_binhex()` now again returns `count` rather than `value` (#1747),NA
ggplot2,1,367,371,FALSE,`stat_ecdf()` respects `pad` argument (#1646).,NA
ggplot2,1,368,372,FALSE,`stat_smooth()` once again informs you about the method it has chosen. It also correctly calculates the size of the largest group within facets.,NA
ggplot2,1,369,373,FALSE,"`x` and `y` scales are now symmetric regarding the list of aesthetics they accept: `xmin_final`, `xmax_final`, `xlower`, `xmiddle` and `xupper` are now valid `x` aesthetics.",NA
ggplot2,1,370,374,FALSE,`Scale` extensions can now override the `make_title` and `make_sec_title` methods to let the scale modify the axis/legend titles.,NA
ggplot2,1,371,375,FALSE,The random stream is now reset after calling `.onAttach()` (#2409).,NA
ggplot2,1,372,376,FALSE,"When mapping an aesthetic to a constant (e.g. `geom_smooth(aes(colour = ""loess"")))`), the default guide title is the name of the aesthetic (i.e. ""colour""), not the value (i.e. ""loess"") (#1431).",NA
ggplot2,1,373,377,FALSE,"`layer()` now accepts a function as the data argument. The function will be applied to the data passed to the `ggplot()` function and must return a data.frame (#1527, @thomasp85). This is a more general version of the deprecated `subset` argument.",NA
ggplot2,1,374,378,FALSE,"`theme_update()` now uses the `+` operator instead of `%+replace%`, so that unspecified values will no longer be `NULL`ed out. `theme_replace()` preserves the old behaviour if desired (@oneillkza, #1519).",NA
ggplot2,1,375,379,FALSE,"`stat_bin()` has been overhauled to use the same algorithm as ggvis, which has been considerably improved thanks to the advice of Randy Prium (@rpruim). This includes:",NA
ggplot2,2,375,380,FALSE,* Better arguments and a better algorithm for determining the origin. You can now specify either `boundary` or the `center` of a bin. `origin` has been deprecated in favour of these arguments.,"`stat_bin()` has been overhauled to use the same algorithm as ggvis, which has been considerably improved thanks to the advice of Randy Prium (@rpruim). This includes:"
ggplot2,2,375,381,FALSE,"* `drop` is deprecated in favour of `pad`, which adds extra 0-count bins at either end (needed for frequency polygons). `geom_histogram()` defaults to `pad = FALSE` which considerably improves the default limits for the histogram, especially when the bins are big (#1477).","`stat_bin()` has been overhauled to use the same algorithm as ggvis, which has been considerably improved thanks to the advice of Randy Prium (@rpruim). This includes:"
ggplot2,2,375,382,FALSE,* The default algorithm does a (somewhat) better job at picking nice widths and origins across a wider range of input data.,"`stat_bin()` has been overhauled to use the same algorithm as ggvis, which has been considerably improved thanks to the advice of Randy Prium (@rpruim). This includes:"
ggplot2,2,375,383,FALSE,"* `bins = n` now gives a histogram with `n` bins, not `n + 1` (#1487).","`stat_bin()` has been overhauled to use the same algorithm as ggvis, which has been considerably improved thanks to the advice of Randy Prium (@rpruim). This includes:"
ggplot2,1,380,384,FALSE,All `\donttest{}` examples run.,NA
ggplot2,1,381,385,FALSE,"All `geom_()` and `stat_()` functions now have consistent argument order: data + mapping, then geom/stat/position, then `...`, then specific arguments, then arguments common to all layers (#1305). This may break code if you were previously relying on partial name matching, but in the long-term should make ggplot2 easier to use. In particular, you can now set the `n` parameter in `geom_density2d()` without it partially matching `na.rm` (#1485).",NA
ggplot2,1,382,386,FALSE,"For geoms with both `colour` and `fill`, `alpha` once again only affects fill (Reverts #1371, #1523). This was causing problems for people.",NA
ggplot2,1,383,387,FALSE,`facet_wrap()`/`facet_grid()` works with multiple empty panels of data (#1445).,NA
ggplot2,1,384,388,FALSE,`facet_wrap()` correctly swaps `nrow` and `ncol` when faceting vertically (#1417).,NA
ggplot2,1,385,389,FALSE,"`ggsave(""x.svg"")` now uses svglite to produce the svg (#1432).",NA
ggplot2,1,386,390,FALSE,`geom_boxplot()` now understands `outlier.color` (#1455).,NA
ggplot2,1,387,391,FALSE,"`geom_path()` knows that ""solid"" (not just 1) represents a solid line (#1534).",NA
ggplot2,1,388,392,FALSE,`geom_ribbon()` preserves missing values so they correctly generate a gap in the ribbon (#1549).,NA
ggplot2,1,389,393,FALSE,"`geom_tile()` once again accepts `width` and `height` parameters (#1513). It uses `draw_key_polygon()` for better a legend, including a coloured outline (#1484).",NA
ggplot2,1,390,394,FALSE,`layer()` now automatically adds a `na.rm` parameter if none is explicitly supplied.,NA
ggplot2,1,391,395,FALSE,"`position_jitterdodge()` now works on all possible dodge aesthetics, e.g. `color`, `linetype` etc. instead of only based on `fill` (@bleutner)",NA
ggplot2,1,392,396,FALSE,"`position = ""nudge""` now works (although it doesn't do anything useful) (#1428).",NA
ggplot2,1,393,397,FALSE,"The default scale for columns of class ""AsIs"" is now ""identity"" (#1518).",NA
ggplot2,1,394,398,FALSE,`scale_*_discrete()` has better defaults when used with purely continuous data (#1542).,NA
ggplot2,1,395,399,FALSE,`scale_size()` warns when used with categorical data.,NA
ggplot2,1,396,400,FALSE,"`scale_size()`, `scale_colour()`, and `scale_fill()` gain date and date-time variants (#1526).",NA
ggplot2,1,397,401,FALSE,"`stat_bin_hex()` and `stat_bin_summary()` now use the same underlying algorithm so results are consistent (#1383). `stat_bin_hex()` now accepts a `weight` aesthetic. To be consistent with related stats, the output variable from `stat_bin_hex()` is now value instead of count.",NA
ggplot2,1,398,402,FALSE,`stat_density()` gains a `bw` parameter which makes it easy to get consistent smoothing between facets (@jiho),NA
ggplot2,1,399,403,FALSE,"`stat-density-2d()` no longer ignores the `h` parameter, and now accepts `bins` and `binwidth` parameters to control the number of contours (#1448, @has2k1).",NA
ggplot2,1,400,404,FALSE,"`stat_ecdf()` does a better job of adding padding to -Inf/Inf, and gains an argument `pad` to suppress the padding if not needed (#1467).",NA
ggplot2,1,401,405,FALSE,`stat_function()` gains an `xlim` parameter (#1528). It once again works with discrete x values (#1509).,NA
ggplot2,1,402,406,FALSE,`stat_summary()` preserves sorted x order which avoids artefacts when display results with `geom_smooth()` (#1520).,NA
ggplot2,1,403,407,FALSE,"All elements should now inherit correctly for all themes except `theme_void()`. (@Katiedaisey, #1555)",NA
ggplot2,1,404,408,FALSE,`theme_void()` was completely void of text but facets and legends still need labels. They are now visible (@jiho).,NA
ggplot2,1,405,409,FALSE,"You can once again set legend key and height width to unit arithmetic objects (like `2 * unit(1, ""cm"")`) (#1437).",NA
ggplot2,1,406,410,FALSE,Eliminate spurious warning if you have a layer with no data and no aesthetics (#1451).,NA
ggplot2,1,407,411,FALSE,Removed a superfluous comma in `theme-defaults.r` code (@jschoeley),NA
ggplot2,1,408,412,FALSE,Fixed a compatibility issue with `ggproto` and R versions prior to 3.1.2. (#1444),NA
ggplot2,1,409,413,FALSE,"Fixed issue where `coord_map()` fails when given an explicit `parameters` argument (@tdmcarthur, #1729)",NA
ggplot2,1,410,414,FALSE,Fixed issue where `geom_errorbarh()` had a required `x` aesthetic (#1933),NA
ggplot2,1,411,415,FALSE,ggplot no longer throws an error if your plot has no layers. Instead it automatically adds `geom_blank()` (#1246).,NA
ggplot2,1,412,416,FALSE,"New `cut_width()` is a convenient replacement for the verbose `plyr::round_any()`, with the additional benefit of offering finer control.",NA
ggplot2,1,413,417,FALSE,New `geom_count()` is a convenient alias to `stat_sum()`. Use it when you have overlapping points on a scatterplot. `stat_sum()` now defaults to using counts instead of proportions.,NA
ggplot2,1,414,418,FALSE,"New `geom_curve()` adds curved lines, with a similar specification to `geom_segment()` (@veraanadi, #1088).",NA
ggplot2,1,415,419,FALSE,"Date and datetime scales now have `date_breaks`, `date_minor_breaks` and `date_labels` arguments so that you never need to use the long `scales::date_breaks()` or `scales::date_format()`.",NA
ggplot2,1,416,420,FALSE,"`geom_bar()` now has it's own stat, distinct from `stat_bin()` which was also used by `geom_histogram()`. `geom_bar()` now uses `stat_count()` which counts values at each distinct value of x (i.e. it does not bin the data first). This can be useful when you want to show exactly which values are used in a continuous variable.",NA
ggplot2,1,417,421,FALSE,"`geom_point()` gains a `stroke` aesthetic which controls the border width of shapes 21-25 (#1133, @SeySayux). `size` and `stroke` are additive so a point with `size = 5` and `stroke = 5` will have a diameter of 10mm. (#1142)",NA
ggplot2,1,418,422,FALSE,New `position_nudge()` allows you to slightly offset labels (or other geoms) from their corresponding points (#1109).,NA
ggplot2,1,419,423,FALSE,"`scale_size()` now maps values to *area*, not radius. Use `scale_radius()` if you want the old behaviour (not recommended, except perhaps for lines).",NA
ggplot2,1,420,424,FALSE,"New `stat_summary_bin()` works like `stat_summary()` but on binned data. It's a generalisation of `stat_bin()` that can compute any aggregate, not just counts (#1274). Both default to `mean_se()` if no aggregation functions are supplied (#1386).",NA
ggplot2,1,421,425,FALSE,"Layers are now much stricter about their arguments - you will get an error if you've supplied an argument that isn't an aesthetic or a parameter. This is likely to cause some short-term pain but in the long-term it will make it much easier to spot spelling mistakes and other errors (#1293). This change does break a handful of geoms/stats that used `...` to pass additional arguments on to the underlying computation. Now `geom_smooth()`/`stat_smooth()` and `geom_quantile()`/`stat_quantile()` use `method.args` instead (#1245, #1289); and `stat_summary()` (#1242), `stat_summary_hex()`, and `stat_summary2d()` use `fun.args`.",NA
ggplot2,1,422,426,FALSE,"All Geoms, Stats and Positions are now exported, so you can inherit from them when making your own objects (#989).",NA
ggplot2,1,423,427,FALSE,"ggplot2 no longer uses proto or reference classes. Instead, we now use ggproto, a new OO system designed specifically for ggplot2. Unlike proto and RC, ggproto supports clean cross-package inheritance. Creating a new OO system isn't usually the right way to solve a problem, but I'm pretty sure it was necessary here. Read more about it in the vignette.",NA
ggplot2,1,424,428,FALSE,"`aes_()` replaces `aes_q()`. It also supports formulas, so the most concise SE version of `aes(carat, price)` is now `aes_(~carat, ~price)`. You may want to use this form in packages, as it will avoid spurious `R CMD check` warnings about undefined global variables.",NA
ggplot2,1,425,429,FALSE,`geom_text()` has been overhauled to make labelling your data a little easier. It:,NA
ggplot2,2,425,430,FALSE,* `nudge_x` and `nudge_y` arguments let you offset labels from their corresponding points (#1120).,`geom_text()` has been overhauled to make labelling your data a little easier. It:
ggplot2,2,425,431,FALSE,* `check_overlap = TRUE` provides a simple way to avoid overplotting of labels: labels that would otherwise overlap are omitted (#1039).,`geom_text()` has been overhauled to make labelling your data a little easier. It:
ggplot2,2,425,432,FALSE,"* `hjust` and `vjust` can now be character vectors: ""left"", ""center"", ""right"", ""bottom"", ""middle"", ""top"". New options include ""inward"" and ""outward"" which align text towards and away from the center of the plot respectively.",`geom_text()` has been overhauled to make labelling your data a little easier. It:
ggplot2,1,429,433,FALSE,`geom_label()` works like `geom_text()` but draws a rounded rectangle underneath each label (#1039). This is useful when you want to label plots that are dense with data.,NA
ggplot2,1,430,434,FALSE,The little used `aes_auto()` has been deprecated.,NA
ggplot2,1,431,435,FALSE,`aes_q()` has been replaced with `aes_()` to be consistent with SE versions of NSE functions in other packages.,NA
ggplot2,1,432,436,FALSE,"The `order` aesthetic is officially deprecated. It never really worked, and was poorly documented.",NA
ggplot2,1,433,437,FALSE,"The `stat` and `position` arguments to `qplot()` have been deprecated. `qplot()` is designed for quick plots - if you need to specify position or stat, use `ggplot()` instead.",NA
ggplot2,1,434,438,FALSE,The theme setting `axis.ticks.margin` has been deprecated: now use the margin property of `axis.text`.,NA
ggplot2,1,435,439,FALSE,"`stat_abline()`, `stat_hline()` and `stat_vline()` have been removed: these were never suitable for use other than with `geom_abline()` etc and were not documented.",NA
ggplot2,1,436,440,FALSE,"`show_guide` has been renamed to `show.legend`: this more accurately reflects what it does (controls appearance of layer in legend), and uses the same convention as other ggplot2 arguments (i.e. a `.` between names). (Yes, I know that's inconsistent with function names with use `_`, but it's too late to change now.)",NA
ggplot2,1,437,441,FALSE,"`stat_binhex()` and `stat_bin2d()` have been renamed to `stat_bin_hex()` and `stat_bin_2d()` (#1274). `stat_summary2d()` has been renamed to `stat_summary_2d()`, `geom_density2d()`/`stat_density2d()` has been renamed to `geom_density_2d()`/`stat_density_2d()`.",NA
ggplot2,1,438,442,FALSE,`stat_spoke()` is now `geom_spoke()` since I realised it's a reparameterisation of `geom_segment()`.,NA
ggplot2,1,439,443,FALSE,"`stat_bindot()` has been removed because it's so tightly coupled to `geom_dotplot()`. If you happened to use `stat_bindot()`, just change to `geom_dotplot()` (#1194).",NA
ggplot2,1,440,444,FALSE,"The default `theme_grey()` background colour has been changed from ""grey90"" to ""grey92"": this makes the background a little less visually prominent.",NA
ggplot2,1,441,445,FALSE,Labels and titles have been tweaked for readability:,NA
ggplot2,2,441,446,FALSE,* Axes labels are darker.,Labels and titles have been tweaked for readability:
ggplot2,2,441,447,FALSE,* Legend and axis titles are given the same visual treatment.,Labels and titles have been tweaked for readability:
ggplot2,2,441,448,FALSE,"* The default font size dropped from 12 to 11. You might be surprised that I've made the default text size smaller as it was already hard for many people to read. It turns out there was a bug in RStudio (fixed in 0.99.724), that shrunk the text of all grid based graphics. Once that was resolved the defaults seemed too big to my eyes.",Labels and titles have been tweaked for readability:
ggplot2,2,441,449,FALSE,* More spacing between titles and borders.,Labels and titles have been tweaked for readability:
ggplot2,2,441,450,FALSE,"* Default margins scale with the theme font size, so the appearance at larger font sizes should be considerably improved (#1228).",Labels and titles have been tweaked for readability:
ggplot2,1,447,451,FALSE,`alpha` now affects both fill and colour aesthetics (#1371).,NA
ggplot2,1,448,452,FALSE,`element_text()` gains a margins argument which allows you to add additional padding around text elements. To help see what's going on use `debug = TRUE` to display the text region and anchors.,NA
ggplot2,1,449,453,FALSE,The default font size in `geom_text()` has been decreased from 5mm (14 pts) to 3.8 mm (11 pts) to match the new default theme sizes.,NA
ggplot2,1,450,454,FALSE,"A diagonal line is no longer drawn on bar and rectangle legends. Instead, the border has been tweaked to be more visible, and more closely match the size of line drawn on the plot.",NA
ggplot2,1,451,455,FALSE,`geom_pointrange()` and `geom_linerange()` get vertical (not horizontal) lines in the legend (#1389).,NA
ggplot2,1,452,456,FALSE,The default line `size` for `geom_smooth()` has been increased from 0.5 to 1 to make it easier to see when overlaid on data.,NA
ggplot2,1,453,457,FALSE,`geom_bar()` and `geom_rect()` use a slightly paler shade of grey so they aren't so visually heavy.,NA
ggplot2,1,454,458,FALSE,`geom_boxplot()` now colours outliers the same way as the boxes.,NA
ggplot2,1,455,459,FALSE,"`geom_point()` now uses shape 19 instead of 16. This looks much better on the default Linux graphics device. (It's very slightly smaller than the old point, but it shouldn't affect any graphics significantly)",NA
ggplot2,1,456,460,FALSE,"Sizes in ggplot2 are measured in mm. Previously they were converted to pts (for use in grid) by multiplying by 72 / 25.4. However, grid uses printer's points, not Adobe (big pts), so sizes are now correctly multiplied by 72.27 / 25.4. This is unlikely to noticeably affect display, but it's technically correct (<https://youtu.be/hou0lU8WMgo>).",NA
ggplot2,1,457,461,FALSE,The default legend will now allocate multiple rows (if vertical) or columns (if horizontal) in order to make a legend that is more likely to fit on the screen. You can override with the `nrow`/`ncol` arguments to `guide_legend()`,NA
ggplot2,1,457,462,TRUE,"```
p <- ggplot(mpg, aes(displ,hwy, colour = model)) + geom_point()
p
p + theme(legend.position = ""bottom"")
# Previous behaviour
p + guides(colour = guide_legend(ncol = 1))
```",NA
ggplot2,1,458,463,FALSE,"New `theme_void()` is completely empty. It's useful for plots with non- standard coordinates or for drawings (@jiho, #976).",NA
ggplot2,1,459,464,FALSE,"New `theme_dark()` has a dark background designed to make colours pop out (@jiho, #1018)",NA
ggplot2,1,460,465,FALSE,"`theme_minimal()` became slightly more minimal by removing the axis ticks: labels now line up directly beneath grid lines (@tomschloss, #1084)",NA
ggplot2,1,461,466,FALSE,"New theme setting `panel.ontop` (logical) make it possible to place background elements (i.e., gridlines) on top of data. Best used with transparent `panel.background` (@noamross. #551).",NA
ggplot2,1,462,467,FALSE,`facet_wrap()` gains a `labeller` option (#25).,NA
ggplot2,1,463,468,FALSE,"`facet_grid()` and `facet_wrap()` gain a `switch` argument to display the facet titles near the axes. When switched, the labels become axes subtitles. `switch` can be set to ""x"", ""y"" or ""both"" (the latter only for grids) to control which margin is switched.",NA
ggplot2,1,464,469,FALSE,They now offer the `multi_line` argument to control whether to display composite facets (those specified as `~var1 + var2`) on one or multiple lines.,NA
ggplot2,1,465,470,FALSE,"In `label_bquote()` you now refer directly to the names of variables. With this change, you can create math expressions that depend on more than one variable. This math expression can be specified either for the rows or the columns and you can also provide different expressions to each margin. As a consequence of these changes, referring to `x` in backquoted expressions is deprecated.",NA
ggplot2,1,466,471,FALSE,"Similarly to `label_bquote()`, `labeller()` now take `.rows` and `.cols` arguments. In addition, it also takes `.default`. `labeller()` is useful to customise how particular variables are labelled. The three additional arguments specify how to label the variables are not specifically mentioned, respectively for rows, columns or both. This makes it especially easy to set up a project-wide labeller dispatcher that can be reused across all your plots. See the documentation for an example.",NA
ggplot2,1,467,472,FALSE,"The new labeller `label_context()` adapts to the number of factors facetted over. With a single factor, it displays only the values, just as before. But with multiple factors in a composite margin (e.g. with `~cyl + am`), the labels are passed over to `label_both()`. This way the variables names are displayed with the values to help identifying them.",NA
ggplot2,1,468,473,FALSE,"Previously, a labeller function would take `variable` and `value` arguments and return a character vector. Now, they take a data frame of character vectors and return a list. The input data frame has one column per factor facetted over and each column in the returned list becomes one line in the strip label. See documentation for more details.",NA
ggplot2,1,469,474,FALSE,"The labels received by a labeller now contain metadata: their margin (in the ""type"" attribute) and whether they come from a wrap or a grid facet (in the ""facet"" attribute).",NA
ggplot2,1,470,475,FALSE,Note that the new `as_labeller()` function operator provides an easy way to transform an existing function to a labeller function. The existing function just needs to take and return a character vector.,NA
ggplot2,1,471,476,FALSE,"Improved documentation for `aes()`, `layer()` and much much more.",NA
ggplot2,1,472,477,FALSE,I've tried to reduce the use of `...` so that you can see all the documentation in one place rather than having to integrate multiple pages. In some cases this has involved adding additional arguments to geoms to make it more clear what you can do:,NA
ggplot2,2,472,478,FALSE,"* `geom_smooth()` gains explicit `method`, `se` and `formula` arguments.",I've tried to reduce the use of `...` so that you can see all the documentation in one place rather than having to integrate multiple pages. In some cases this has involved adding additional arguments to geoms to make it more clear what you can do:
ggplot2,2,472,479,FALSE,"* `geom_histogram()` gains `binwidth`, `bins`, `origin` and `right` arguments.",I've tried to reduce the use of `...` so that you can see all the documentation in one place rather than having to integrate multiple pages. In some cases this has involved adding additional arguments to geoms to make it more clear what you can do:
ggplot2,2,472,480,FALSE,* `geom_jitter()` gains `width` and `height` arguments to make it easier to control the amount of jittering without using the lengthy `position_jitter()` function (#1116),I've tried to reduce the use of `...` so that you can see all the documentation in one place rather than having to integrate multiple pages. In some cases this has involved adding additional arguments to geoms to make it more clear what you can do:
ggplot2,1,476,481,FALSE,"Use of `qplot()` in examples has been minimised (#1123, @hrbrmstr). This is inline with the 2nd edition of the ggplot2 box, which minimises the use of `qplot()` in favour of `ggplot()`.",NA
ggplot2,1,477,482,FALSE,"Tighly linked geoms and stats (e.g. `geom_boxplot()` and `stat_boxplot()`) are now documented in the same file so you can see all the arguments in one place. Variations of the same idea (e.g. `geom_path()`, `geom_line()`, and `geom_step()`) are also documented together.",NA
ggplot2,1,478,483,FALSE,"It's now obvious that you can set the `binwidth` parameter for `stat_bin_hex()`, `stat_summary_hex()`, `stat_bin_2d()`, and `stat_summary_2d()`.",NA
ggplot2,1,479,484,FALSE,"The internals of positions have been cleaned up considerably. You're unlikely to notice any external changes, although the documentation should be a little less confusing since positions now don't list parameters they never use.",NA
ggplot2,1,480,485,FALSE,"All datasets have class `tbl_df` so if you also use dplyr, you get a better print method.",NA
ggplot2,1,481,486,FALSE,`economics` has been brought up to date to 2015-04-01.,NA
ggplot2,1,482,487,FALSE,New `economics_long` is the economics data in long form.,NA
ggplot2,1,483,488,FALSE,"New `txhousing` dataset containing information about the Texas housing market. Useful for examples that need multiple time series, and for demonstrating model+vis methods.",NA
ggplot2,1,484,489,FALSE,New `luv_colours` dataset which contains the locations of all built-in `colors()` in Luv space.,NA
ggplot2,1,485,490,FALSE,"`movies` has been moved into its own package, ggplot2movies, because it was large and not terribly useful. If you've used the movies dataset, you'll now need to explicitly load the package with `library(ggplot2movies)`.",NA
ggplot2,1,486,491,FALSE,"All partially matched arguments and `$` have been been replaced with full matches (@jimhester, #1134).",NA
ggplot2,1,487,492,FALSE,"ggplot2 now exports `alpha()` from the scales package (#1107), and `arrow()` and `unit()` from grid (#1225). This means you don't need attach scales/grid or do `scales::`/`grid::` for these commonly used functions.",NA
ggplot2,1,488,493,FALSE,`aes_string()` now only parses character inputs. This fixes bugs when using it with numbers and non default `OutDec` settings (#1045).,NA
ggplot2,1,489,494,FALSE,"`annotation_custom()` automatically adds a unique id to each grob name, making it easier to plot multiple grobs with the same name (e.g. grobs of ggplot2 graphics) in the same plot (#1256).",NA
ggplot2,1,490,495,FALSE,"`borders()` now accepts xlim and ylim arguments for specifying the geographical region of interest (@markpayneatwork, #1392).",NA
ggplot2,1,491,496,FALSE,`coord_cartesian()` applies the same expansion factor to limits as for scales. You can suppress with `expand = FALSE` (#1207).,NA
ggplot2,1,492,497,FALSE,`coord_trans()` now works when breaks are suppressed (#1422).,NA
ggplot2,1,493,498,FALSE,`cut_number()` gives error message if the number of requested bins can be created because there are two few unique values (#1046).,NA
ggplot2,1,494,499,FALSE,Character labels in `facet_grid()` are no longer (incorrectly) coerced into factors. This caused problems with custom label functions (#1070).,NA
ggplot2,1,495,500,FALSE,`facet_wrap()` and `facet_grid()` now allow you to use non-standard variable names by surrounding them with backticks (#1067).,NA
ggplot2,1,496,501,FALSE,"`facet_wrap()` more carefully checks its `nrow` and `ncol` arguments to ensure that they're specified correctly (@richierocks, #962)",NA
ggplot2,1,497,502,FALSE,"`facet_wrap()` gains a `dir` argument to control the direction the panels are wrapped in. The default is ""h"" for horizontal. Use ""v"" for vertical layout (#1260).",NA
ggplot2,1,498,503,FALSE,"`geom_abline()`, `geom_hline()` and `geom_vline()` have been rewritten to have simpler behaviour and be more consistent:",NA
ggplot2,2,498,504,FALSE,"* `stat_abline()`, `stat_hline()` and `stat_vline()` have been removed: these were never suitable for use other than with `geom_abline()` etc and were not documented.","`geom_abline()`, `geom_hline()` and `geom_vline()` have been rewritten to have simpler behaviour and be more consistent:"
ggplot2,2,498,505,FALSE,"* `geom_abline()`, `geom_vline()` and `geom_hline()` are bound to `stat_identity()` and `position_identity()`","`geom_abline()`, `geom_hline()` and `geom_vline()` have been rewritten to have simpler behaviour and be more consistent:"
ggplot2,2,498,506,FALSE,* Intercept parameters can no longer be set to a function.,"`geom_abline()`, `geom_hline()` and `geom_vline()` have been rewritten to have simpler behaviour and be more consistent:"
ggplot2,2,498,507,FALSE,"* They are all documented in one file, since they are so closely related.","`geom_abline()`, `geom_hline()` and `geom_vline()` have been rewritten to have simpler behaviour and be more consistent:"
ggplot2,1,503,508,FALSE,"`geom_bin2d()` will now let you specify one dimension's breaks exactly, without touching the other dimension's default breaks at all (#1126).",NA
ggplot2,1,504,509,FALSE,`geom_crossbar()` sets grouping correctly so you can display multiple crossbars on one plot. It also makes the default `fatten` argument a little bigger to make the middle line more obvious (#1125).,NA
ggplot2,1,505,510,FALSE,"`geom_histogram()` and `geom_smooth()` now only inform you about the default values once per layer, rather than once per panel (#1220).",NA
ggplot2,1,506,511,FALSE,`geom_pointrange()` gains `fatten` argument so you can control the size of the point relative to the size of the line.,NA
ggplot2,1,507,512,FALSE,"`geom_segment()` annotations were not transforming with scales (@BrianDiggs, #859).",NA
ggplot2,1,508,513,FALSE,"`geom_smooth()` is no longer so chatty. If you want to know what the deafult smoothing method is, look it up in the documentation! (#1247)",NA
ggplot2,1,509,514,FALSE,`geom_violin()` now has the ability to draw quantile lines (@DanRuderman).,NA
ggplot2,1,510,515,FALSE,"`ggplot()` now captures the parent frame to use for evaluation, rather than always defaulting to the global environment. This should make ggplot more suitable to use in more situations (e.g. with knitr)",NA
ggplot2,1,511,516,FALSE,"`ggsave()` has been simplified a little to make it easier to maintain. It no longer checks that you're printing a ggplot2 object (so now also works with any grid grob) (#970), and always requires a filename. Parameter `device` now supports character argument to specify which supported device to use ('pdf', 'png', 'jpeg', etc.), for when it cannot be correctly inferred from the file extension (for example when a temporary filename is supplied server side in shiny apps) (@sebkopf, #939). It no longer opens a graphics device if one isn't already open - this is annoying when you're running from a script (#1326).",NA
ggplot2,1,512,517,FALSE,"`guide_colorbar()` creates correct legend if only one color (@krlmlr, #943).",NA
ggplot2,1,513,518,FALSE,`guide_colorbar()` no longer fails when the legend is empty - previously this often masked misspecifications elsewhere in the plot (#967).,NA
ggplot2,1,514,519,FALSE,New `layer_data()` function extracts the data used for plotting for a given layer. It's mostly useful for testing.,NA
ggplot2,1,515,520,FALSE,"User supplied `minor_breaks` can now be supplied on the same scale as the data, and will be automatically transformed with by scale (#1385).",NA
ggplot2,1,516,521,FALSE,"You can now suppress the appearance of an axis/legend title (and the space that would allocated for it) with `NULL` in the `scale_` function. To use the default lable, use `waiver()` (#1145).",NA
ggplot2,1,517,522,FALSE,Position adjustments no longer warn about potentially varying ranges because the problem rarely occurs in practice and there are currently a lot of false positives since I don't understand exactly what FP criteria I should be testing.,NA
ggplot2,1,518,523,FALSE,`scale_fill_grey()` now uses red for missing values. This matches `scale_colour_grey()` and makes it obvious where missing values lie. Override with `na.value`.,NA
ggplot2,1,519,524,FALSE,`scale_*_gradient2()` defaults to using Lab colour space.,NA
ggplot2,1,520,525,FALSE,`scale_*_gradientn()` now allows `colours` or `colors` (#1290),NA
ggplot2,1,521,526,FALSE,"`scale_y_continuous()` now also transforms the `lower`, `middle` and `upper` aesthetics used by `geom_boxplot()`: this only affects `geom_boxplot(stat = ""identity"")` (#1020).",NA
ggplot2,1,522,527,FALSE,Legends no longer inherit aesthetics if `inherit.aes` is FALSE (#1267).,NA
ggplot2,1,523,528,FALSE,`lims()` makes it easy to set the limits of any axis (#1138).,NA
ggplot2,1,524,529,FALSE,"`labels = NULL` now works with `guide_legend()` and `guide_colorbar()`. (#1175, #1183).",NA
ggplot2,1,525,530,FALSE,"`override.aes` now works with American aesthetic spelling, e.g. color",NA
ggplot2,1,526,531,FALSE,Scales no longer round data points to improve performance of colour palettes. Instead the scales package now uses a much faster colour interpolation algorithm (#1022).,NA
ggplot2,1,527,532,FALSE,"`scale_*_brewer()` and `scale_*_distiller()` add new `direction` argument of `scales::brewer_pal`, making it easier to change the order of colours (@jiho, #1139).",NA
ggplot2,1,528,533,FALSE,`scale_x_date()` now clips dates outside the limits in the same way as `scale_x_continuous()` (#1090).,NA
ggplot2,1,529,534,FALSE,"`stat_bin()` gains `bins` arguments, which denotes the number of bins. Now you can set `bins=100` instead of `binwidth=0.5`. Note that `breaks` or `binwidth` will override it (@tmshn, #1158, #102).",NA
ggplot2,1,530,535,FALSE,"`stat_boxplot()` warns if a continuous variable is used for the `x` aesthetic without also supplying a `group` aesthetic (#992, @krlmlr).",NA
ggplot2,1,531,536,FALSE,"`stat_summary_2d()` and `stat_bin_2d()` now share exactly the same code for determining breaks from `bins`, `binwidth`, and `origin`.",NA
ggplot2,1,532,537,FALSE,`stat_summary_2d()` and `stat_bin_2d()` now output in tile/raster compatible form instead of rect compatible form.,NA
ggplot2,1,533,538,FALSE,"Automatically computed breaks do not lead to an error for transformations like ""probit"" where the inverse can map to infinity (#871, @krlmlr)",NA
ggplot2,1,534,539,FALSE,"`stat_function()` now always evaluates the function on the original scale. Previously it computed the function on transformed scales, giving incorrect values (@BrianDiggs, #1011).",NA
ggplot2,1,535,540,FALSE,"`strip_dots` works with anonymous functions within calculated aesthetics (e.g. `aes(sapply(..density.., function(x) mean(x))))` (#1154, @NikNakk)",NA
ggplot2,1,536,541,FALSE,"`theme()` gains `validate = FALSE` parameter to turn off validation, and hence store arbitrary additional data in the themes. (@tdhock, #1121)",NA
ggplot2,1,537,542,FALSE,"Improved the calculation of segments needed to draw the curve representing a line when plotted in polar coordinates. In some cases, the last segment of a multi-segment line was not drawn (@BrianDiggs, #952)",NA
googledrive,1,1,1,FALSE,[Team Drives is being renamed to shared drives](https://workspaceupdates.googleblog.com/2019/04/shared-drives.html),NA
googledrive,1,2,2,FALSE,[Upcoming changes to the Google Drive API and Google Picker API](https://cloud.google.com/blog/products/application-development/upcoming-changes-to-the-google-drive-api-and-google-picker-api),NA
googledrive,1,3,3,FALSE,`shortcut_create()`: creates a shortcut to a specific Drive file (or,NA
googledrive,1,4,4,FALSE,"`shortcut_resolve()`: resolves a shortcut to its target, i.e. the file it refers to. Works for multiple files at once, i.e. the input can be a mix of shortcuts and non-shortcuts. The non-shortcuts are",NA
googledrive,1,5,5,FALSE,"Main principle: shortcuts are first-class Drive files that we assume users will need to manipulate with googledrive. In general, there is",NA
googledrive,1,6,6,FALSE,"`drive_reveal(what = ""path"")` returns the canonical path, i.e. there will be no shortcuts among the non-terminal ""folder"" parts of the",NA
googledrive,1,7,7,FALSE,"`drive_get(path = ""foo/"")` can retrieve a folder named ""foo"" or a",NA
googledrive,1,8,8,FALSE,"When a shortcut-to-a-folder is specified as the `path`, in a context where it unambiguously specifies a parent folder, the `path` **is** auto-resolved to its target folder. This is the exception to the ""no automatic resolution"" rule. Functions affected:",NA
googledrive,2,8,9,FALSE,"* `drive_ls(path, ...)`","When a shortcut-to-a-folder is specified as the `path`, in a context where it unambiguously specifies a parent folder, the `path` **is** auto-resolved to its target folder. This is the exception to the ""no automatic resolution"" rule. Functions affected:"
googledrive,2,8,10,FALSE,"* `drive_create(name, path, ...)` and its convenience wrappers `drive_mkdir()` and `shortcut_create()`","When a shortcut-to-a-folder is specified as the `path`, in a context where it unambiguously specifies a parent folder, the `path` **is** auto-resolved to its target folder. This is the exception to the ""no automatic resolution"" rule. Functions affected:"
googledrive,2,8,11,FALSE,"* `drive_cp(file, path, ...)`","When a shortcut-to-a-folder is specified as the `path`, in a context where it unambiguously specifies a parent folder, the `path` **is** auto-resolved to its target folder. This is the exception to the ""no automatic resolution"" rule. Functions affected:"
googledrive,2,8,12,FALSE,"* `drive_mv(file, path, ...)`","When a shortcut-to-a-folder is specified as the `path`, in a context where it unambiguously specifies a parent folder, the `path` **is** auto-resolved to its target folder. This is the exception to the ""no automatic resolution"" rule. Functions affected:"
googledrive,2,8,13,FALSE,"* `drive_upload(media, path, ...)` and its close friend `drive_put()`","When a shortcut-to-a-folder is specified as the `path`, in a context where it unambiguously specifies a parent folder, the `path` **is** auto-resolved to its target folder. This is the exception to the ""no automatic resolution"" rule. Functions affected:"
googledrive,1,14,14,FALSE,[Simplifying Google Drive's folder structure and sharing,NA
googledrive,1,15,15,FALSE,[Single-parenting behavior,NA
googledrive,1,16,16,FALSE,[Create a shortcut to a Drive,NA
googledrive,1,17,17,FALSE,Find files & folders with Google Drive shortcuts:,NA
googledrive,1,18,18,FALSE,"We now share a variety of world-readable, persistent example files on Drive, for use in examples and documentation. These remote example files complement the local example files that were already included in googledrive. `drive_example()` is deprecated in favor of these accessors for example files:",NA
googledrive,2,18,19,FALSE,"* Plural forms:`drive_examples_remote()`, `drive_examples_local()`","We now share a variety of world-readable, persistent example files on Drive, for use in examples and documentation. These remote example files complement the local example files that were already included in googledrive. `drive_example()` is deprecated in favor of these accessors for example files:"
googledrive,2,18,20,FALSE,"* Singular forms: `drive_example_remote()`, `drive_example_local()`","We now share a variety of world-readable, persistent example files on Drive, for use in examples and documentation. These remote example files complement the local example files that were already included in googledrive. `drive_example()` is deprecated in favor of these accessors for example files:"
googledrive,1,21,21,FALSE,"`drive_read_string()` and `drive_read_raw()` are new functions that read the content of a Drive file directly into R, skipping the step of downloading to a local file (#81).",NA
googledrive,1,22,22,FALSE,"`drive_reveal(what = ""property_name"")` now works for any property found in the file metadata stored in the `drive_resource` column. The new column is also simplified in more cases now, e.g. to `character` or `logical`. If the `property_name` suggests it's a date-time, we return `POSIXct`.",NA
googledrive,1,23,23,FALSE,"We've modernized the mechanisms by which the `dribble` class is (or is not) retained by various data frame operations. This boils down to updating or adding methods used by the base, dplyr, pillar/tibble, and vctrs packages. We focus on compatibility with dplyr \>= 1.0.0, which was released a year ago. googledrive only Suggests dplyr, so all this really means is that `dribble` manipulation via dplyr now works best with dplyr \>= 1.0.0.",NA
googledrive,1,24,24,FALSE,"The `drive_id` S3 class is now implemented more fully, using the vctrs package (#93, #364):",NA
googledrive,2,24,25,FALSE,"* The `drive_id` class will persist after mundane operations, like subsetting.","The `drive_id` S3 class is now implemented more fully, using the vctrs package (#93, #364):"
googledrive,2,24,26,FALSE,* You can no longer put strings that are obviously invalid into a `drive_id` object.,"The `drive_id` S3 class is now implemented more fully, using the vctrs package (#93, #364):"
googledrive,2,24,27,FALSE,* The `id` column of a `dribble` is now an instance of `drive_id`.,"The `drive_id` S3 class is now implemented more fully, using the vctrs package (#93, #364):"
googledrive,1,28,28,FALSE,"The overall design of googledrive has survived \~2 years on CRAN, with very little need for change. The API and feature set is fairly",NA
googledrive,1,29,29,FALSE,There are changes in the auth interface that are not backwards,NA
googledrive,1,31,31,FALSE,Service account tokens from the metadata server available to VMs,NA
googledrive,1,32,32,FALSE,Help for [`drive_auth()`](https://googledrive.tidyverse.org/reference/drive_auth.html),NA
googledrive,1,33,33,FALSE,*details for more advanced users*,NA
googledrive,2,33,34,FALSE,* [Bring your own OAuth app or API key](https://googledrive.tidyverse.org/articles/articles/bring-your-own-app.html),*details for more advanced users*
googledrive,2,33,35,FALSE,* [How to get your own API credentials](https://gargle.r-lib.org/articles/get-api-credentials.html),*details for more advanced users*
googledrive,2,33,36,FALSE,* [Non-interactive auth](https://gargle.r-lib.org/articles/non-interactive-auth.html),*details for more advanced users*
googledrive,2,33,37,FALSE,* [Auth when using R in the browser](https://gargle.r-lib.org/articles/auth-from-web.html),*details for more advanced users*
googledrive,2,33,38,FALSE,* [How gargle gets tokens](https://gargle.r-lib.org/articles/how-gargle-gets-tokens.html),*details for more advanced users*
googledrive,2,33,39,FALSE,* [Managing tokens securely](https://gargle.r-lib.org/articles/articles/managing-tokens-securely.html),*details for more advanced users*
googledrive,1,40,40,FALSE,Previous signature (v0.1.3 and earlier),NA
googledrive,1,40,41,TRUE,"```
drive_auth(
  oauth_token = NULL,                       # use `token` now
  service_token = NULL,                     # use `path` now
  reset = FALSE,                            
  cache = getOption(""httr_oauth_cache""),
  use_oob = getOption(""httr_oob_default""),
  verbose = TRUE
)
```",NA
googledrive,1,41,42,FALSE,Current signature (\>= v1.0.0),NA
googledrive,1,41,43,TRUE,"```
drive_auth(
  email = gargle::gargle_oauth_email(),             # NEW!
  path = NULL,                                      # was `service_token`
  scopes = ""https://www.googleapis.com/auth/drive"", # NEW!
  cache = gargle::gargle_oauth_cache(),
  use_oob = gargle::gargle_oob_default(),
  token = NULL                                      # was `oauth_token`
)
```",NA
googledrive,1,42,44,FALSE,"`drive_auth_configure()` is a variant of the now-deprecated `drive_auth_config()` whose explicit and only job is to *set* aspects of the configuration, i.e. the OAuth app or API key.",NA
googledrive,2,42,45,FALSE,"* Use `drive_oauth_app()` (new) and `drive_api_key()` to *retrieve* a user-configured app or API key, if such exist.","`drive_auth_configure()` is a variant of the now-deprecated `drive_auth_config()` whose explicit and only job is to *set* aspects of the configuration, i.e. the OAuth app or API key."
googledrive,2,42,46,FALSE,"* These functions no longer return built-in auth assets, although built-in assets still exist and are used in the absence of user configuration.","`drive_auth_configure()` is a variant of the now-deprecated `drive_auth_config()` whose explicit and only job is to *set* aspects of the configuration, i.e. the OAuth app or API key."
googledrive,1,45,47,FALSE,"`drive_deauth()` is how you go into a de-authorized state, i.e. send",NA
googledrive,1,47,49,FALSE,`make_request()` had been renamed to `request_make()` and is a very thin wrapper around `gargle::request_make()` that only adds,NA
googledrive,1,48,50,FALSE,"`build_request()` has been removed. If you can't do what you need with `request_generate()`, use `gargle::request_develop()` or",NA
googledrive,1,49,51,FALSE,"`process_response()` has been removed. Instead, use",NA
googledrive,1,50,52,FALSE,All functions that create a new item or rename/move an existing item,NA
googledrive,1,51,53,FALSE,`drive_put()` is a new convenience wrapper that figures out whether,NA
googledrive,1,58,61,FALSE,Internal usage of `glue::collapse()` modified to call `glue::glue_collapse()` if glue v1.3.0 or later is installed and `glue::collapse()` otherwise. Eliminates a deprecation warning,NA
googlesheets4,1,1,1,FALSE,cli is new in Imports.,NA
googlesheets4,1,2,2,FALSE,"googlesheets4 Suggests testthat \>= 3.0.0 and, specifically, uses third edition features.",NA
googlesheets4,1,3,3,FALSE,"`gs4_`: refers variously to the googlesheets4 package, v4 of the",NA
googlesheets4,1,6,6,FALSE,"`gs4_create()` creates a new Google Sheet and, optionally, writes",NA
googlesheets4,1,7,7,FALSE,"`sheet_write()` (also available as `write_sheet()`) writes a data frame into a new or existing (work)sheet, inside an existing (or",NA
googlesheets4,1,10,10,FALSE,"`range_flood()` ""floods"" all cells in a range with the same content. `range_clear()` is a wrapper around `range_flood()` for the special",NA
googlesheets4,1,13,13,FALSE,`sheet_properties()` returns a tibble of metadata with one row per,NA
googlesheets4,1,21,21,FALSE,`read_sheet()` passes its `na` argument down to the helpers that,NA
googlesheets4,1,22,22,FALSE,"Patch release to modify a test fixture, to be compatible with tibble",NA
haven,1,1,1,FALSE,All `labelled()` vectors now have left-aligned column headers when printing in tibbles for better alignment with labels (#676).,NA
haven,1,2,2,FALSE,`write_*()` now accept functions as well as strings in the `.name_repair` argument in line with the documentation. Previously they only supported string values (#684).,NA
haven,1,3,3,FALSE,`write_sav()` variable name validation no longer treats all non-ASCII characters as invalid (#689).,NA
haven,1,4,4,FALSE,@gorcha is now a haven author in recognition of his significant and,NA
haven,1,5,5,FALSE,All `write_` functions can now write custom variable widths by setting the `width` attribute (#650).,NA
haven,1,6,6,FALSE,"When writing files, the minimum width for character variables is now 1. This fixes issues with statistical software reading blank character variables with width 0 (#650).",NA
haven,1,7,7,FALSE,"`write_dta()` now uses strL when strings are too long to be stored in an str# variable (#437). strL is used when strings are longer than 2045 characters by default, which matches Stata's behaviour, but this can be reduced with the `strl_threshold` argument.",NA
haven,1,8,8,FALSE,"`write_xpt()` can now write dataset labels with the `label` argument, which defaults to the `label` attribute of the input data frame, if present (#562).",NA
haven,1,9,9,FALSE,"`write_sav()` now checks for case-insensitive duplicate variable names (@juansebastianl, #641) and verifies that variable names are valid SPSS variables.",NA
haven,1,10,10,FALSE,"The `compress` argument for `write_sav()` now supports all 3 SPSS compression modes specified as a character string - ""byte"", ""none"" and ""zsav"" (#614). `TRUE` and `FALSE` can be used for backwards compatibility, and correspond to the ""zsav"" and ""none"" options respectively.",NA
haven,1,11,11,FALSE,`write_sav()` successfully writes user missing values and ranges for `labelled()` integer vectors (#596).,NA
haven,1,12,12,FALSE,"POSIXct and POSIXlt values with no time component (e.g. ""2010-01-01"") were being converted to `NA` when attempting to convert the output timezone to UTC. These now output successfully (#634).",NA
haven,1,13,13,FALSE,Fix bug in output timezone conversion that was causing variable labels and other variable attributes to disappear (#624).,NA
haven,1,14,14,FALSE,Updated to ReadStat 1.1.8 RC.,NA
haven,2,14,15,FALSE,* Fix bug when writing formats to XPT files (#650).,Updated to ReadStat 1.1.8 RC.
haven,2,14,16,FALSE,* Fix off by one error in indexing for strL variables (#437).,Updated to ReadStat 1.1.8 RC.
haven,1,17,17,FALSE,`labelled()` vectors now throw a warning when combining two vectors with conflicting labels (#667).,NA
haven,1,18,18,FALSE,`zap_labels()` gains a `user_na` argument to control whether user-defined missing values are converted to `NA` or left as is (#638).,NA
haven,1,19,19,FALSE,vctrs casting and coercion generics now do less work when working with two identical `labelled()` vectors. This significantly improves performance when working with `labelled()` vectors in grouped data frames (#658).,NA
haven,1,20,20,FALSE,Errors and warnings now use `cli_abort()` and `cli_warning()` (#661).,NA
haven,1,21,21,FALSE,"R 3.4 is now the minimum supported version, in line with [tidyverse policy](https://www.tidyverse.org/blog/2019/04/r-version-support/).",NA
haven,1,22,22,FALSE,cli \>= 3.0.0 has been added to Imports to support new error messaging.,NA
haven,1,23,23,FALSE,"lifecycle has been added to Imports, and is now used to manage deprecations.",NA
haven,1,25,25,FALSE,Updated to ReadStat 1.1.7 RC (#620).,NA
haven,1,26,26,FALSE,"`read_dta()` no longer crashes if it sees StrL variables with missing values (@gorcha, #594, #600, #608).",NA
haven,1,27,27,FALSE,"`write_dta()` now correctly handles ""labelled""-class numeric (double) variables that don't have value labels (@jmobrien, #606, #609).",NA
haven,1,28,28,FALSE,"`write_dta()` now allows variable names up to 32 characters (@sbae, #605).",NA
haven,1,29,29,FALSE,"Can now correctly combine `labelled_spss()` with identical labels (@gorcha, #599).",NA
haven,1,31,31,FALSE,"`labelled_spss()` gains full vctrs support thanks to the hard work of @gorcha (#527, #534, #538, #557). This means that they should now work seamlessly in dplyr 1.0.0, tidyr 1.0.0 and other packages that use vctrs.",NA
haven,1,32,32,FALSE,"`labelled()` vectors are more permissive when concatenating; output labels will be a combination of the left-hand and the right-hand side, preferring values assigned to the left-hand side (#543).",NA
haven,1,33,33,FALSE,"Date-times are no longer forced to UTC, but instead converted to the equivalent UTC (#555). This should ensure that you see the same date-time in R and in Stata/SPSS/SAS.",NA
haven,1,34,34,FALSE,Updated to ReadStat 1.1.5. Most importantly this includes support for SAS binary compression.,NA
haven,1,35,35,FALSE,"`as_factor(levels = ""values"")` preserves values of unlabelled elements (#570).",NA
haven,1,36,36,FALSE,"`labelled_spss()` is a little stricter: it prevents `na_range` and `na_value` from containing missing values, and ensures that `na_range` is in the correct order (#574).",NA
haven,1,37,37,FALSE,`read_spss()` now reads NA values and ranges of character variables (#409).,NA
haven,1,38,38,FALSE,`write_dta()` now correctly writes tagged NAs (including tagged NAs in labels) (#583) and once again validates length of variables names (#485).,NA
haven,1,39,39,FALSE,"`write_*()` now validate file and variable metadata with ReadStat. This should prevent many invalid files from being written (#408). Additionally, validation failures now provide more details about the source of the problem (e.g. the column name of the problem) (#463).",NA
haven,1,40,40,FALSE,"`write_sav(compress = FALSE)` now uses SPSS bytecode compression instead of the rarely-used uncompressed mode. `compress = TRUE` continues to use the newer (and not universally supported, but more compact) zlib format (@oliverbock, #544).",NA
haven,1,41,41,FALSE,"Add missing methods so `median()`, `quantile()` and `summary()` work once more (#520).",NA
haven,1,42,42,FALSE,Add missing cast methods (#522).,NA
haven,1,43,43,FALSE,"`labelled()` gains the necessary support to work seemlessly in dplyr 1.0.0, tidyr 1.0.0, and other packages that use vctrs (@mikmart, #496).",NA
haven,1,44,44,FALSE,"`labelled()` vectors now explicitly inherit from the corresponding base types (e.g. integer, double, or character) (#509).",NA
haven,1,45,45,FALSE,"ReadStat update, including `read_sas()` supports for ""any"" encoding (#482), and fixes for compiler warnings.",NA
haven,1,46,46,FALSE,`col_select`: selects columns to read with a tidyselect interface,NA
haven,1,49,49,FALSE,"`as_factor()` allows non-unique labels when `levels = ""label""`. This fixes a particularly annoying printing bug (#424, @gergness)",NA
haven,1,50,50,FALSE,`read_sas()` now supports (IS\|E\|B)8601(DT\|DA\|TM) date/time formats (@mikmart).,NA
haven,1,51,51,FALSE,All `write_` functions gain a `.name_repair` argument that controls what happens when the input dataset has repeated column names (#436).,NA
haven,1,52,52,FALSE,All `write_` functions can now write labelled vectors with `NULL` labels (#442).,NA
haven,1,53,53,FALSE,"`write_dta()` can now write dataset labels with the `label` argument, which defaults to the `label` attribute of the input data frame, if present (@gorcha, #449).",NA
haven,1,54,54,FALSE,"`write_dta()` works better with Stata 15, thanks to updated ReadStat (#461)",NA
haven,1,56,56,FALSE,`as_factor()`:,NA
haven,2,56,57,FALSE,* Is faster when input doesn't contain any missing values (@hughparsonage).,`as_factor()`:
haven,2,56,58,FALSE,* Added `labelled` method for backward compatbility (#414).,`as_factor()`:
haven,2,56,59,FALSE,"* `data.frame` method now correctly passes `...` along (#407, @zkamvar).",`as_factor()`:
haven,1,60,60,FALSE,"`write_dta()` now checks that the labelled values are integers, not the values themselves (#401).",NA
haven,1,61,61,FALSE,Updated to latest ReadStat from @evanmiller:,NA
haven,2,61,62,FALSE,* `read_por()` can now read files from SPSS 25 (#412),Updated to latest ReadStat from @evanmiller:
haven,2,61,63,FALSE,* `read_por()` now uses base-30 instead of base-10 for the exponent (#413),Updated to latest ReadStat from @evanmiller:
haven,2,61,64,FALSE,* `read_sas()` can read zero column file (#420),Updated to latest ReadStat from @evanmiller:
haven,2,61,65,FALSE,* `read_sav()` reads long strings (#381),Updated to latest ReadStat from @evanmiller:
haven,2,61,66,FALSE,* `read_sav()` has greater memory limit allowing it to read more labels (#418),Updated to latest ReadStat from @evanmiller:
haven,2,61,67,FALSE,* `read_spss()` reads long variable labels (#422),Updated to latest ReadStat from @evanmiller:
haven,2,61,68,FALSE,* `write_sav()` no longer creates incorrect column names when \>10k columns (#410),Updated to latest ReadStat from @evanmiller:
haven,2,61,69,FALSE,* `write_sav()` no longer crashes when writing long label names (#395),Updated to latest ReadStat from @evanmiller:
haven,1,70,70,FALSE,"`labelled()` and `labelled_spss()` now produce objects with class ""haven_labelled"" and ""haven_labelled_spss"". Previously, the ""labelled"" class name clashed with the labelled class defined by Hmisc (#329). Unfortunately I couldn't come up with a way to fix this problem except to change the class name; it seems reasonable that haven should be the one to change names given that Hmisc has been around much longer. This will require some changes to packages that use haven, but shouldn't affect user code.",NA
haven,1,71,71,FALSE,"`labelled()` and `labelled_spss()` now support adding the `label` attribute to the resulting object. The `label` is a short, human-readable description of the object, and is now also used when printing, and can be easily removed using the new `zap_label()` function. (#362, @huftis) Previously, the `label` attribute was supported both when reading and writing SPSS files, but it was not possible to actually create objects in R having the `label` attribute using the constructors `labelled()` or `labelled_spss()`.",NA
haven,1,72,72,FALSE,haven can read and write non-ASCII paths in R 3.5 (#371).,NA
haven,1,73,73,FALSE,"`labelled_spss` objects preserve their attributes when subsetted (#360, @gergness).",NA
haven,1,74,74,FALSE,`read_sav()` gains an `encoding` argument to override the encoding stored in the file (#305). `read_sav()` can now read `.zsav` files (#338).,NA
haven,1,75,75,FALSE,"`write_*()` functions now invisibly return the input data frame (as documented) (#349, @austensen).",NA
haven,1,76,76,FALSE,`write_dta()` allows non-ASCII variable labels for version 14 and above (#383). It also uses a less strict check for integers so that a labelled double containing only integer values can written (#343).,NA
haven,1,77,77,FALSE,`write_sav()` produces `.zsav` files when `compress = TRUE` (#338).,NA
haven,1,78,78,FALSE,"`write_xpt()` can now set the ""member"" name, which defaults to the file name san extension (#328).",NA
haven,1,79,79,FALSE,Update to latest readstat.,NA
haven,2,79,80,FALSE,* Fixes out of memory error (#342),Update to latest readstat.
haven,2,79,81,FALSE,* Now supports reading and writing stata 15 files (#339),Update to latest readstat.
haven,2,79,82,FALSE,* Negative integer labelled values were tagged as missing (#367),Update to latest readstat.
haven,1,83,83,FALSE,"Fix for when `as_factor()` with option `levels=""labels""` is used on tagged NAs (#340, @gergness)",NA
haven,1,84,84,FALSE,Update to latest readstat. Includes:,NA
haven,2,84,85,FALSE,* SPSS: empty charater columns now read as character (#311),Update to latest readstat. Includes:
haven,2,84,86,FALSE,* SPSS: now write long strings (#266),Update to latest readstat. Includes:
haven,2,84,87,FALSE,* Stata: reorder labelled vectors on write (#327),Update to latest readstat. Includes:
haven,2,84,88,FALSE,* State: `encoding` now affects value labels (#325),Update to latest readstat. Includes:
haven,2,84,89,FALSE,"* SAS: can now write wide/long rows (#272, #335).",Update to latest readstat. Includes:
haven,2,84,90,FALSE,* SAS: can now handle Windows Vietnamese character set (#336),Update to latest readstat. Includes:
haven,1,91,91,FALSE,`read_por()` and `read_xpt()` now correctly preserve attributes if output needs to be reallocated (which is typical behaviour) (#313),NA
haven,1,92,92,FALSE,`read_sas()` recognises date/times format with trailing separator and width specifications (#324),NA
haven,1,93,93,FALSE,`read_sas()` gains a `catalog_encoding` argument so you can independently specify encoding of data and catalog (#312),NA
haven,1,94,94,FALSE,"`write_*()` correctly measures lengths of non-ASCII labels (#258): this fixes the cryptic error ""A provided string value was longer than the available storage size of the specified column.""",NA
haven,1,95,95,FALSE,"`write_dta()` now checks for bad labels in all columns, not just the first (#326).",NA
haven,1,96,96,FALSE,`write_sav()` no longer fails on empty factors or factors with an `NA` level (#301) and writes out more metadata for `labelled_spss` vectors (#334).,NA
haven,1,97,97,FALSE,Update to latest readstat. Includes:,NA
haven,2,97,98,FALSE,* SAS: support Win baltic code page (#231),Update to latest readstat. Includes:
haven,2,97,99,FALSE,"* SAS: better error messages instead of crashes (#234, #270)",Update to latest readstat. Includes:
haven,2,97,100,FALSE,"* SAS: fix ""unable to read error"" (#271)",Update to latest readstat. Includes:
haven,2,97,101,FALSE,* SPSS: support uppercase time stamps (#230),Update to latest readstat. Includes:
haven,2,97,102,FALSE,* SPSS: fixes for 252-255 byte strings (#226),Update to latest readstat. Includes:
haven,2,97,103,FALSE,* SPSS: fixes for 0 byte strings (#245),Update to latest readstat. Includes:
haven,1,104,104,FALSE,Share `as_factor()` with forcats package (#256),NA
haven,1,105,105,FALSE,`read_sav()` once again correctly returns system defined missings as `NA` (rather than `NaN`) (#223). `read_sav()` and `write_sav()` preserve SPSS's display widths (@ecortens).,NA
haven,1,106,106,FALSE,`read_sas()` gains experimental `cols_only` argument to only read in specified columns (#248).,NA
haven,1,107,107,FALSE,"tibbles are created with `tibble::as_tibble()`, rather than by ""hand"" (#229).",NA
haven,1,108,108,FALSE,`write_sav()` checks that factors don't have levels with \>120 characters (#262),NA
haven,1,109,109,FALSE,`write_dta()` no longer checks that all value labels are at most 32 characters (since this is not a restriction of dta files) (#239).,NA
haven,1,110,110,FALSE,All write methds now check that you're trying to write a data frame (#287).,NA
haven,1,111,111,FALSE,Add support for reading (`read_xpt()`) and writing (`write_xpt()`) SAS transport files.,NA
haven,1,112,112,FALSE,`write_*` functions turn ordered factors into labelled vectors (#285),NA
haven,1,113,113,FALSE,"The ReadStat library is stored in a subdirectory of `src` (#209, @krlmlr).",NA
haven,1,114,114,FALSE,"Import tibble so that tibbles are printed consistently (#154, @krlmlr).",NA
haven,1,115,115,FALSE,Update to latest ReadStat (#65). Includes:,NA
haven,2,115,116,FALSE,* Support for binary (aka Ross) compression for SAS (#31).,Update to latest ReadStat (#65). Includes:
haven,2,115,117,FALSE,* Support extended ASCII encoding for Stata (#71).,Update to latest ReadStat (#65). Includes:
haven,2,115,118,FALSE,"* Support for Stata 14 files (#75, #212).",Update to latest ReadStat (#65). Includes:
haven,2,115,119,FALSE,* Support for SPSS value labels with more than 8 characters (#157).,Update to latest ReadStat (#65). Includes:
haven,2,115,120,FALSE,* More likely to get an error when attempting to create an invalid output file (#171).,Update to latest ReadStat (#65). Includes:
haven,1,121,121,FALSE,"Added support for reading and writing variable formats. Similarly to to variable labels, formats are stored as an attribute on the vector. Use `zap_formats()` if you want to remove these attributes. (@gorcha, #119, #123).",NA
haven,1,122,122,FALSE,"Added support for reading file ""label"" and ""notes"". These are not currently printed, but are stored in the attributes if you need to access them (#186).",NA
haven,1,123,123,FALSE,"Added support for ""tagged"" missing values (in Stata these are called ""extended"" and in SAS these are called ""special"") which carry an extra byte of information: a character label from ""a"" to ""z"". The downside of this change is that all integer columns are now converted to doubles, to support the encoding of the tag in the payload of a NaN.",NA
haven,1,124,124,FALSE,"New `labelled_spss()` is a subclass of `labelled()` that can model user missing values from SPSS. These can either be a set of distinct values, or for numeric vectors, a range. `zap_labels()` strips labels, and replaces user-defined missing values with `NA`. New `zap_missing()` just replaces user-defined missing values with `NA`. `labelled_spss()` is potentially dangerous to work with in R because base functions don't know about `labelled_spss()` functions so will return the wrong result in the presence of user-defined missing values. For this reason, they will only be created by `read_spss()` when `user_na = TRUE` (normally user-defined missings are converted to NA).",NA
haven,1,125,125,FALSE,"`as_factor()` no longer drops the `label` attribute (variable label) when used (#177, @itsdalmo).",NA
haven,1,126,126,FALSE,"Using `as_factor()` with `levels = ""default` or `levels = ""both""` preserves unused labels (implicit missing) when converting (#172, @itsdalmo). Labels (and the resulting factor levels) are always sorted by values.",NA
haven,1,127,127,FALSE,"`as_factor()` gains a new `levels = ""default""` mechanism. This uses the labels where present, and otherwise uses the labels. This is now the default, as it seems to map better to the semantics of labelled values in other statistical packages (#81). You can also use `levels = ""both""` to combine the value and the label into a single string (#82). It also gains a method for data frames, so you can easily convert every labelled column to a factor in one function call.",NA
haven,1,128,128,FALSE,"New `vignette(""semantics"", package = ""haven"")` discusses the semantics of missing values and labelling in SAS, SPSS, and Stata, and how they are translated into R.",NA
haven,1,129,129,FALSE,"Support for `hms()` has been moved into the hms package (#162). Time varibles now have class `c(""hms"", ""difftime"")` and a `units` attribute with value ""secs"" (#162).",NA
haven,1,130,130,FALSE,"`labelled()` is less strict with its checks: you can mix double and integer value and labels (#86, #110, @lionel-), and `is.labelled()` is now exported (#124). Putting a labelled vector in a data frame now generates the correct column name (#193).",NA
haven,1,131,131,FALSE,"`read_dta()` now recognises ""%d"" and custom date types (#80, #130). It also gains an encoding parameter which you can use to override the default encoding. This is particularly useful for Stata 13 and below which did not store the encoding used in the file (#163).",NA
haven,1,132,132,FALSE,`read_por()` now actually works (#35).,NA
haven,1,133,133,FALSE,"`read_sav()` now correctly recognises EDATE and JDATE formats as dates (#72). Variables with format DATE, ADATE, EDATE, JDATE or SDATE are imported as `Date` variables instead of `POSIXct`. You can now set `user_na = TRUE` to preserve user defined missing values: they will be given class `labelled_spss`.",NA
haven,1,134,134,FALSE,"`read_dta()`, `read_sas()`, and `read_sav()` have a better test for missing string values (#79). They can all read from connections and compressed files (@lionel-, #109)",NA
haven,1,135,135,FALSE,`read_sas()` gains an encoding parameter to overide the encoding stored in the file if it is incorrect (#176). It gets better argument names (#214).,NA
haven,1,136,136,FALSE,Added `type_sum()` method for labelled objects so they print nicely in tibbles.,NA
haven,1,137,137,FALSE,"`write_dta()` now verifies that variable names are valid Stata variables (#132), and throws an error if you attempt to save a labelled vector that is not an integer (#144). You can choose which `version` of Stata's file format to output (#217).",NA
haven,1,138,138,FALSE,New `write_sas()` allows you to write data frames out to `sas7bdat` files. This is still somewhat experimental.,NA
haven,1,139,139,FALSE,"`write_sav()` writes hms variables to SPSS time variables, and the ""measure"" type is set for each variable (#133).",NA
haven,1,140,140,FALSE,"`write_dta()` and `write_sav()` support writing date and date/times (#25, #139, #145). Labelled values are always converted to UTF-8 before being written out (#87). Infinite values are now converted to missing values since SPSS and Stata don't support them (#149). Both use a better test for missing values (#70).",NA
haven,1,141,141,FALSE,"`zap_labels()` has been completely overhauled. It now works (@markriseley, #69), and only drops label attributes; it no longer replaces labelled values with `NA`s. It also gains a data frame method that zaps the labels from every column.",NA
haven,1,142,142,FALSE,`print.labelled()` and `print.labelled_spss()` now display the type.,NA
haven,1,143,143,FALSE,"fixed a bug in `as_factor.labelled`, which generated `<NA>`{=html}'s and wrong labels for integer labels.",NA
haven,1,144,144,FALSE,"`zap_labels()` now leaves unlabelled vectors unchanged, making it easier to apply to all columns.",NA
haven,1,145,145,FALSE,`write_dta()` and `write_sav()` take more care to always write output as UTF-8 (#36),NA
haven,1,146,146,FALSE,"`write_dta()` and `write_sav()` won't crash if you give them invalid paths, and you can now use `~` to refer to your home directory (#37).",NA
haven,1,147,147,FALSE,"Byte variables are now correctly read into integers (not strings, #45), and missing values are captured correctly (#43).",NA
haven,1,148,148,FALSE,Added `read_stata()` as alias to `read_dta()` (#52).,NA
haven,1,149,149,FALSE,`read_spss()` uses extension to automatically choose between `read_sav()` and `read_por()` (#53),NA
haven,1,150,150,FALSE,"Updates from ReadStat. Including fixes for various parsing bugs, more encodings, and better support for large files.",NA
haven,1,151,151,FALSE,hms objects deal better with missings when printing.,NA
haven,1,152,152,FALSE,Fixed bug causing labels for numeric variables to be read in as integers and associated error: `` Error: `x` and `labels` must be same type ``,NA
hms,1,3,3,FALSE,Avoid blanket import for lifecycle package for compatibility with,NA
hms,1,4,4,FALSE,"Establish compatibility with development version of testthat (#101,",NA
hms,1,5,5,FALSE,"`""hms""` objects no longer have a common type with `character` and `numeric`. Combining such values previously threw a warning, now",NA
hms,1,6,6,FALSE,`vec_cast()` and `as_hms()` throw error instead of a warning if,NA
hms,1,10,10,FALSE,Bump required versions of ellipsis and vctrs to avoid warning during,NA
hms,1,13,13,FALSE,"`""hms""` objects no longer have a common type with `character` and `numeric`. Combining such values previously threw a warning, now",NA
hms,1,14,14,FALSE,`vec_cast()` and `as_hms()` now throw error instead of a warning if,NA
hms,1,16,16,FALSE,"`round_hms()` and `trunc_hms()` gain `digits` argument (#78,",NA
hms,1,17,17,FALSE,`as_hms()` and `vec_cast()` now correctly treat objects of class,NA
hms,1,20,20,FALSE,"Use `vec_default_ptype2()`, remove `vec_ptype2.hms.unspecified()`",NA
hms,1,21,21,FALSE,`vec_ptype2.hms.default()` forwards to `vec_default_ptype2()` for,NA
hms,1,24,24,FALSE,Work around parsing error that occurs on DST changeover dates,NA
hms,1,25,25,FALSE,Lossy casts from `character` vectors to `hms` now also trigger a warning if the cast succeeds in the first element of the vector but,NA
hms,1,26,26,FALSE,Now based on vctrs \>= 0.2.0 (#61). This adds support for `vec_cast()` and `vec_ptype2()`. Some operations (such as subset assignment) are now stricter. The `new_hms()` constructor permits safe construction of `hms` objects from a numeric vector.,NA
hms,1,27,27,FALSE,The new `is_hms()` deprecates the existing `is.hms()`. `as.hms()` is deprecated in favor of `vec_cast()` or the new `as_hms()` (which is just a thin wrapper around `vec_cast()`).,NA
hms,1,28,28,FALSE,Always show seconds in a pillar if they are different from zero (#54).,NA
hms,1,29,29,FALSE,"Values with nonzero hours, seconds and split-seconds are now displayed correctly in tibbles (#56), even with a very small distance to the full second (#64).",NA
hms,1,35,35,FALSE,"`as.hms.POSIXt()` now defaults to the current time zone, the previous default was `""UTC""` and can be restored by calling",NA
hms,1,36,36,FALSE,"Pillar support, will display `hms` columns in tibbles in color on",NA
hms,1,37,37,FALSE,New `round_hms()` and `trunc_hms()` for rounding or truncating to a,NA
hms,1,38,38,FALSE,"New `parse_hms()` and `parse_hm()` to parse strings in ""HH:MM:SS""",NA
hms,1,40,40,FALSE,`as.hms.character()` and `parse_hms()` accept fractional seconds,NA
hms,1,41,41,FALSE,"`hms()` now works correctly if all four components (days, hours,",NA
hms,1,42,42,FALSE,`hms()` creates a zero-length object of class `hms` that prints as,NA
hms,1,43,43,FALSE,`hms(integer())` and `as.hms(integer())` both work and are identical,NA
hms,1,44,44,FALSE,Values with durations of over 10000 hours are now printed correctly,NA
hms,1,48,48,FALSE,Improved error message if calling `hms()` with a character argument,NA
hms,1,52,52,FALSE,`format.hms()` right-justifies the output by padding with spaces,NA
hms,1,53,53,FALSE,Times larger than 24 hours or with split seconds are now formatted,NA
hms,1,54,54,FALSE,"Sub-second part is printed with up to six digits, for even smaller",NA
hms,1,55,55,FALSE,Values are stored as a numeric vector that contains the number of seconds since midnight.,NA
hms,2,55,56,FALSE,* Inherits from `difftime` class.,Values are stored as a numeric vector that contains the number of seconds since midnight.
hms,2,55,57,FALSE,"* Updating units is a no-op, anything different from `""secs""` issues a warning.",Values are stored as a numeric vector that contains the number of seconds since midnight.
hms,1,58,58,FALSE,"Supports construction from time values, coercion to and from various data types, and formatting.",NA
hms,2,58,59,FALSE,* Conversion from numeric treats input as seconds.,"Supports construction from time values, coercion to and from various data types, and formatting."
hms,2,58,60,FALSE,* Negative times are formatted with a leading `-`.,"Supports construction from time values, coercion to and from various data types, and formatting."
hms,1,62,62,FALSE,Full test coverage.,NA
hms,2,62,63,FALSE,"* Test for arithmetic with `Date`, `POSIXt` and `hms` classes.",Full test coverage.
hms,2,62,64,FALSE,* Test basic compatibility with `lubridate` package (#5).,Full test coverage.
hms,1,65,65,FALSE,Interface:,NA
hms,2,65,66,FALSE,* `hms()` (with rigorous argument checks),Interface:
hms,2,65,67,FALSE,"* `as.hms()` for `character`, `numeric`, `POSIXct` and `POSIXlt`",Interface:
hms,2,65,68,FALSE,"* `as.xxx.hms()` for `character`, `numeric` (implicitly), `POSIXct` and `POSIXlt`",Interface:
hms,2,65,69,FALSE,* `is.hms()`,Interface:
hms,2,65,70,FALSE,* `as.data.frame.hms()` (forwards to `as.data.frame.difftime()`),Interface:
hms,2,65,71,FALSE,* `format.hms()`,Interface:
hms,2,65,72,FALSE,* `print.hms()` (returns unchanged input invisibly),Interface:
httr,1,3,3,FALSE,Fix failing test.,NA
httr,1,4,4,FALSE,"`parse_url()` now refers to RFC3986 for the parsing of the URL's scheme, with a bit more permissive syntax (@ymarcon, #615).",NA
httr,1,5,5,FALSE,"Remove the default `cainfo` option on Windows. Providing a CA bundle is not needed anymore because `curl` now uses the native schannel SSL backend. For recent versions of libcurl, overriding the CA bundle actually breaks custom trust certificates on corporate networks. (@jeroen, #603)",NA
httr,1,6,6,FALSE,"`http_status()` now throws the correct error message if http status code is not in the list of known codes (@Javdat, #567).",NA
httr,1,7,7,FALSE,"`POST()` gains an example on how to use `encode = ""raw""` for specific json string body (@cderv, #563)",NA
httr,1,8,8,FALSE,"`RETRY()` now throws the correct error message if an error occurs during the request (@austin3dickey, #581).",NA
httr,1,9,9,FALSE,"`VERB()` and `RETRY()` now automatically uppercase methods (@patr1ckm, #571).",NA
httr,1,10,10,FALSE,"`init_oauth2.0()` passes `use_basic_auth` onwards, enabling basic authentication for OAuth 2.0 (@peterhartman, #484).",NA
httr,1,11,11,FALSE,"`oauth2.0_token()` (and `init_oauth2.0()`) gains a `oob_value` argument that allows arbitrary values to be sent for the `request_uri` parameter during OOB flows (@ctrombley, #493).",NA
httr,1,12,12,FALSE,"`oauth2.0_token()` (and `init_oauth2.0()`) gain a new `query_authorize_extra` parameter make it possible to add extra query parameters to the authorization URL. This is needed some APIs (e.g. fitbit) (@cosmomeese, #503).",NA
httr,1,13,13,FALSE,"`oauth_endpoints()` contains updated urls for Yahoo (@ctrombley, #493) and Vimeo (#491).",NA
httr,1,14,14,FALSE,OAuth 2.0 token refresh gives a more informative error if it fails (#516).,NA
httr,1,15,15,FALSE,"Prior to token retrieval from on-disk cache, scopes are de-duplicated, sorted, and stripped of names before being hashed. This eliminates a source of hash mismatch that causes new tokens to be requested, even when existing tokens had the necessary scope. (@jennybc, #495)",NA
httr,1,16,16,FALSE,The Facebook OAuth demo now uses device flow (#510). This allows you to continue using the FB api from R under their new security policy.,NA
httr,1,17,17,FALSE,"A new Noun Project demo shows how to use one-legged OAuth1 (@cderv, #548).",NA
httr,1,18,18,FALSE,The Vimeo demo has been updated from OAuth 1.0 to 2.0 (#491).,NA
httr,1,19,19,FALSE,"`cache_info()` now handles un-named flags, as illustrated by ""private"" when the server returns ""private, max-age = 0"".",NA
httr,1,20,20,FALSE,"`parse_http_date()` gets a better default value for the `failure` argument so that reponses with unparseable dates can be printed without error (@shrektan, #544).",NA
httr,1,21,21,FALSE,"`POST()` now uses 22 digits of precision for `body` list elements by default (@jmwerner, #490)",NA
httr,1,22,22,FALSE,"`RETRY()` now terminates on any successful request, regardless of the value of `terminate_on`. To return to the previous behaviour, set `terminate_on_success = FALSE` (#522).",NA
httr,1,23,23,FALSE,"In `RETRY()` and `VERB()`, `HEAD` requests now succeed (#478, #499).",NA
httr,1,24,24,FALSE,Encoding falls back to UTF-8 if not supplied and content-type parsing fails (#500).,NA
httr,1,25,25,FALSE,"Non-http(s) headers are no longer parsed (@billdenney, #537). This makes it possible to use httr with protocols other than http, although this is not advised, and you're own your own.",NA
httr,1,27,27,FALSE,Deprecated `safe_callback()` has been removed.,NA
httr,1,28,28,FALSE,"`is_interactive` argument to `init_oauth1.0()`, `init_oauth2.0()` and `oauth_listener()` has been deprecated, as the R session does not actually need to be interactive.",NA
httr,1,29,29,FALSE,"New `set_callback()` and `get_callback()` set and query callback functions that are called right before and after performing an HTTP request (@gaborcsardi, #409)",NA
httr,1,30,30,FALSE,"`RETRY()` now retries if an error occurs during the request (@asieira, #404), and gains two new arguments:",NA
httr,2,30,31,FALSE,"* `terminate_on` gives you greater control over which status codes should it stop retrying. (@asieira, #404)","`RETRY()` now retries if an error occurs during the request (@asieira, #404), and gains two new arguments:"
httr,2,30,32,FALSE,* `pause_min` allows for sub-second delays. (Use with caution! Generally the default is preferred.) (@r2evans),"`RETRY()` now retries if an error occurs during the request (@asieira, #404), and gains two new arguments:"
httr,2,30,33,FALSE,"* If the server returns HTTP status code 429 and specifies a `retry-after` value, that value will now be used instead of exponential backoff with jitter, unless it's smaller than `pause_min`. (@nielsoledam, #472)","`RETRY()` now retries if an error occurs during the request (@asieira, #404), and gains two new arguments:"
httr,1,34,34,FALSE,"New oauth cache files are always added to `.gitignore` and, if it exists, `.Rbuildignore`. Specifically, this now happens when option `httr_oauth_cache = TRUE` or user specifies cache file name explicitly. (@jennybc, #436)",NA
httr,1,35,35,FALSE,"`oauth_encode()` now handles UTF-8 characters correctly. (@yutannihilation, #424)",NA
httr,1,36,36,FALSE,`oauth_app()` allows you to specify the `redirect_url` if you need to customise it.,NA
httr,1,37,37,FALSE,"`oauth_service_token()` gains a `sub` parameter so you can request access on behalf of another user (#410), and accepts a character vector of `scopes` as was described in the documentation (#389).",NA
httr,1,38,38,FALSE,"`oauth_signature()` now normalises the URL as described in the OAuth1.0a spec (@leeper, #435)",NA
httr,1,39,39,FALSE,New `oauth2.0_authorize_url()` and `oauth2.0_access_token()` functions pull out parts of the OAuth process for reuse elsewhere (#457).,NA
httr,1,40,40,FALSE,`oauth2.0_token()` gains three new arguments:,NA
httr,2,40,41,FALSE,"* `config_init` allows you to supply additional config for the initial request. This is needed for some APIs (e.g. reddit) which rate limit based on `user_agent` (@muschellij2, #363).",`oauth2.0_token()` gains three new arguments:
httr,2,40,42,FALSE,"* `client_credentials`, allows you to use the OAauth2 *Client Credential Grant*. See [RFC 6749](https://tools.ietf.org/html/rfc6749#section-4) for details. (@cderv, #384)",`oauth2.0_token()` gains three new arguments:
httr,2,40,43,FALSE,* A `credentials` argument that allows you to customise the auth flow. For advanced used only (#457),`oauth2.0_token()` gains three new arguments:
httr,1,44,44,FALSE,"`is_interactive` argument to `init_oauth1.0()`, `init_oauth2.0()` and `oauth_listener()` has been deprecated, as the R session does not need to be interactive.",NA
httr,1,45,45,FALSE,`BROWSER()` prints a message telling you to browse to the URL if called in a non-interactive session.,NA
httr,1,46,46,FALSE,"`find_cert_bundle()` will now correctly find cert bundle in ""R_HOME/etc"" (@jiwalker-usgs, #386).",NA
httr,1,47,47,FALSE,"You can now send lists containing `curl::form_data()` in the `body` of requests with \`encoding = ""multipart"". This makes it possible to specify the mime-type of individual components (#430).",NA
httr,1,48,48,FALSE,"`modify_url()` recognises more forms of empty queries. This eliminates a source of spurious trailing `?` and `?=` (@jennybc, #452).",NA
httr,1,49,49,FALSE,The `length()` method of the internal `path` class is no longer exported (#395).,NA
httr,1,50,50,FALSE,Fix bug with new cache creation code: need to check that cache isn't,NA
httr,1,51,51,FALSE,"`oauth_signature()` no longer prepends 'oauth\_' to additional parameters. (@jimhester, #373)",NA
httr,1,52,52,FALSE,All `print()` methods now invisibly return `x` (#355).,NA
httr,1,53,53,FALSE,`DELETE()` gains a body parameter (#326).,NA
httr,1,54,54,FALSE,"New `encode = ""raw""` allows you to do your own encoding for requests with bodies.",NA
httr,1,55,55,FALSE,"New `http_type()` returns the content/mime type of a request, sans parameters.",NA
httr,1,56,56,FALSE,"No longer uses use custom requests for standard `POST` requests (#356, #357). This has the side-effect of properly following redirects after `POST`, fixing some login issues (eg hadley/rvest#133).",NA
httr,1,57,57,FALSE,"Long deprecated `multipart` argument to `POST()`, `PUT()` and `PATCH()` has been removed.",NA
httr,1,58,58,FALSE,"The cross-session OAuth cache is now created with permission 0600, and should give a better error if it can't be created (#365).",NA
httr,1,59,59,FALSE,New `RETRY()` function allows you to retry a request multiple times until it succeeds (#353).,NA
httr,1,60,60,FALSE,"The default user agent string is now computed once and cached. This is a small performance improvement, but important for local connections (#322, @richfitz).",NA
httr,1,61,61,FALSE,`oauth_callback()` gains trailing slash for facebook compatibility (#324).,NA
httr,1,62,62,FALSE,`progress()` gains `con` argument to control where progress bar is rendered (#359).,NA
httr,1,63,63,FALSE,"When `use_basic_auth` option is used to obtain a token, token refreshes will now use basic authentication too.",NA
httr,1,64,64,FALSE,"Suppress unhelpful ""No encoding supplied: defaulting to UTF-8."" when printing a response (#327).",NA
httr,1,65,65,FALSE,All auto parser functions now have consistent arguments. This fixes problem where `...` is pass on to another function (#330).,NA
httr,1,66,66,FALSE,"`parse_media()` can once again parse multiple parameters (#362, #366).",NA
httr,1,67,67,FALSE,Correctly cast `config` in `POST()`.,NA
httr,1,68,68,FALSE,Fix in readfunction to close connection when done.,NA
httr,1,69,69,FALSE,"`stop_for_status()`, `warn_for_status()` and (new) `message_for_status()` replace `message` argument with new `task` argument that optionally describes the current task. This allows API wrappers to provide more informative error messages on failure (#277, #302). `stop_for_status()` and `warn_for_status()` return the response if there were no errors. This makes them easier to use in pipelines (#278).",NA
httr,1,70,70,FALSE,"`url_ok()` and `url_successful()` have been deprecated in favour of the more flexible `http_error()`, which works with urls, responses and integer status codes (#299).",NA
httr,1,71,71,FALSE,"`oauth1.0_token()` gains RSA-SHA1 signature support with the `private_key` argument (@nathangoulding, #316).",NA
httr,1,72,72,FALSE,`oauth2.0_token()` throws an error if it fails to get an access token (#250) and gains two new arguments:,NA
httr,2,72,73,FALSE,"* `user_params` allows you to pass arbitrary additional parameters to the token access endpoint when acquiring or refreshing a token (@cornf4ke, #312)",`oauth2.0_token()` throws an error if it fails to get an access token (#250) and gains two new arguments:
httr,2,72,74,FALSE,"* `use_basic_auth` allows you to pick use http authentication when getting a token (#310, @grahamrp).",`oauth2.0_token()` throws an error if it fails to get an access token (#250) and gains two new arguments:
httr,1,75,75,FALSE,"`oauth_service_token()` checks that its arguments are the correct types (#282) and anways returns a `request` object (#313, @nathangoulding).",NA
httr,1,76,76,FALSE,"`refresh_oauth2.0()` checks for known OAuth2.0 errors and clears the locally cached token in the presense of any (@nathangoulding, #315).",NA
httr,1,77,77,FALSE,"httr no longer bundles `cacert.pem`, and instead it relies on the bundle in openssl. This bundle is only used a last-resort on windows with R \<3.2.0.",NA
httr,1,78,78,FALSE,"Switch to 'openssl' package for hashing, hmac, signatures, and base64.",NA
httr,1,79,79,FALSE,"httr no longer depends on stringr (#285, @jimhester).",NA
httr,1,80,80,FALSE,"`build_url()` collapses vector `path` with `/` (#280, @artemklevtsov).",NA
httr,1,81,81,FALSE,`content(x)` uses xml2 for XML documents and readr for csv and tsv.,NA
httr,1,82,82,FALSE,"`content(, type = ""text"")` defaults to UTF-8 encoding if not otherwise specified.",NA
httr,1,83,83,FALSE,`has_content()` correctly tests for the presence/absence of body content (#91).,NA
httr,1,84,84,FALSE,`parse_url()` correctly parses urls like `file:///a/b/c` work (#309).,NA
httr,1,85,85,FALSE,"`progress()` returns `TRUE` to fix for 'progress callback must return boolean' warning (@jeroenooms, #252).",NA
httr,1,86,86,FALSE,"`upload_file()` supports very large files (\> 2.5 Gb) (@jeroenooms, #257).",NA
httr,1,87,87,FALSE,"httr no longer uses the RCurl package. Instead it uses the curl package, a modern binding to libcurl written by Jeroen Ooms (#172). This should make httr more reliable and prevent the ""easy handle already used in multi handle"" error. This change shouldn't affect any code that uses httr - all the changes have happened behind the scenes.",NA
httr,1,88,88,FALSE,"The `oauth_listener` can now listen on a custom IP address and port (the previously hardwired ip:port of `127.0.0.1:1410` is now just the default). This permits authentication to work under other settings, such as inside docker containers (which require localhost uses `0.0.0.0` instead). To configure, set the system environmental variables `HTTR_LOCALHOST` and `HTTR_PORT` respectively (@cboettig, #211).",NA
httr,1,89,89,FALSE,"`POST(encode = 'json')` now automatically turns length-1 vectors into json scalars. To prevent this automatic ""unboxing"", wrap the vector in `I()` (#187).",NA
httr,1,90,90,FALSE,"`POST()`, `PUT()` and `PATCH()` now drop `NULL` body elements. This is convenient and consistent with the behaviour for url query params.",NA
httr,1,91,91,FALSE,`cookies` argument to `handle()` is deprecated - cookies are always turned on by default.,NA
httr,1,92,92,FALSE,`brew_dr()` has been renamed to `httr_dr()` - that's what it should've been in the first place!,NA
httr,1,93,93,FALSE,"`content(type = ""text"")` compares encodings in a case-insensitive manner (#209).",NA
httr,1,94,94,FALSE,"`context(type = ""auto"")` uses a better strategy for text based formats (#209). This should allow the `encoding` argument to work more reliably.",NA
httr,1,95,95,FALSE,`config()` now cleans up duplicated options (#213).,NA
httr,1,96,96,FALSE,Uses `CURL_CA_BUNDLE` environment variable to look for cert bundle on Windows (#223).,NA
httr,1,97,97,FALSE,`safe_callback()` is deprecated - it's no longer needed with curl.,NA
httr,1,98,98,FALSE,`POST()` and `PUT()` now clean up after themselves when uploading a single file (@mtmorgan).,NA
httr,1,99,99,FALSE,`proxy()` gains an `auth` argument which allows you to pick the type of http authentication used by the proxy (#216).,NA
httr,1,100,100,FALSE,`VERB()` gains `body` and `encode` arguments so you can generate arbitrary requests with a body.,NA
httr,1,101,101,FALSE,tumblr added as an `oauth_endpoint`.,NA
httr,1,102,102,FALSE,"Correctly parse headers with multiple `:`, thanks to @mmorgan (#180).",NA
httr,1,103,103,FALSE,"In `content()`, if no type is provided to function or specified in headers, and we can't guess the type from the extension, we now assume that it's `application/octet-stream` (#181).",NA
httr,1,104,104,FALSE,Throw error if `timeout()` is less than 1 ms (#175).,NA
httr,1,105,105,FALSE,Improved LinkedIn OAuth demo (#173).,NA
httr,1,106,106,FALSE,New `write_stream()` allows you to process the response from a server as a stream of raw vectors (#143).,NA
httr,1,107,107,FALSE,"Suport for Google OAuth2 [service accounts](https://developers.google.com/identity/protocols/oauth2/service-account). (#119, thanks to help from @siddharthab).",NA
httr,1,108,108,FALSE,`VERB()` allows to you use custom http verbs (#169).,NA
httr,1,109,109,FALSE,"New `handle_reset()` to allow you to reset the handle if you get the error ""easy handle already used in multi handle"" (#112).",NA
httr,1,110,110,FALSE,Uses R6 instead of RC. This makes it possible to extend the OAuth classes from outside of httr (#113).,NA
httr,1,111,111,FALSE,Now only set `capath` on Windows - system defaults on linux and mac ox seem to be adequate (and in some cases better). I've added a couple of tests to ensure that this continues to work in the future.,NA
httr,1,112,112,FALSE,"`vignette(""api-packages"")` gains more detailed instructions on setting environment variables, thanks to @jennybc.",NA
httr,1,113,113,FALSE,Add `revoke_all()` to revoke all stored tokens (if possible) (#77).,NA
httr,1,114,114,FALSE,"Fix for OAuth 2 process when using `options(httr_oob_default = TRUE)` (#126, @WillemPaling).",NA
httr,1,115,115,FALSE,New `brew_dr()` checks for common problems. Currently checks if your libCurl uses NSS. This is unlikely to work so it gives you some advice on how to fix the problem (thanks to @eddelbuettel for debugging this problem).,NA
httr,1,116,116,FALSE,"`Content-Type` set to title case to avoid errors in servers which do not correctly implement case insensitivity in header names. (#142, #146) thanks to Håkon Malmedal (@hmalmedal) and Jim Hester (@jimhester).",NA
httr,1,117,117,FALSE,Correctly parse http status when it only contains two components (#162).,NA
httr,1,118,118,FALSE,Correctly parse http headers when field name is followed by any amount (including none) of white space.,NA
httr,1,119,119,FALSE,"Default ""Accepts"" header set to `application/json, text/xml, application/xml, */*`: this should slightly increase the likelihood of getting xml back. `application/xml` is correctly converted to text before being parsed to `XML::xmlParse()` (#160).",NA
httr,1,120,120,FALSE,Make it again possible to override the content type set up by `POST()` when sending data (#140).,NA
httr,1,121,121,FALSE,New `safe_callback()` function operator that makes R functions safe for use as RCurl callbacks (#144).,NA
httr,1,122,122,FALSE,"Added support for passing oauth1 tokens in URL instead of the headers (#145, @bogstag).",NA
httr,1,123,123,FALSE,Default to out-of-band credential exchange when `httpuv` isn't installed. (#168),NA
httr,1,124,124,FALSE,"`new_token()` has been removed - this was always an internal function so you should never have been using it. If you were, switch to creating the tokens directly.",NA
httr,1,125,125,FALSE,"Deprecate `guess_media()`, and instead use `mime::guess_type()` (#148).",NA
httr,1,126,126,FALSE,You can now save response bodies directly to disk by using the `write_disk()` config. This is useful if you want to capture large files that don't fit in memory (#44).,NA
httr,1,127,127,FALSE,"Default accept header is now ""application/json, text/xml, */*"" - this should encourage servers to send json or xml if they know how.",NA
httr,1,128,128,FALSE,"`httr_options()` allows you to easily filter the options, e.g. `httr_options(""post"")`",NA
httr,1,129,129,FALSE,`POST()` now specifies Curl options more precisely so that Curl know's that you're doing a POST and can respond appropriately to redirects.,NA
httr,1,130,130,FALSE,Preliminary and experimental support for caching with `cache_info()` and `rerequest()` (#129). Be aware that this API is likely to change in the future.,NA
httr,1,131,131,FALSE,`parse_http_date()` parses http dates according RFC2616 spec.,NA
httr,1,132,132,FALSE,Requests now print the time they were made.,NA
httr,1,133,133,FALSE,Mime type `application/xml` is automatically parsed with \``XML::xmlParse()`. (#128),NA
httr,1,134,134,FALSE,Now possible to specify both handle and url when making a request.,NA
httr,1,135,135,FALSE,"`content(type = ""text"")` uses `readBin()` instead of `rawToChar()` so that strings with embedded NULLs (e.g. WINDOWS-1252) can be re-encoded to UTF-8.",NA
httr,1,136,136,FALSE,`DELETE()` now returns body of request (#138).,NA
httr,1,137,137,FALSE,`headers()` is now a generic with a method for response objects.,NA
httr,1,138,138,FALSE,"`parse_media()` failed to take into account that media types are case-insenstive - this lead to bad re-encoding for content-types like ""text/html; Charset=UTF-8""",NA
httr,1,139,139,FALSE,Typo which broke `set_cookies()` fixed by @hrbrmstr.,NA
httr,1,140,140,FALSE,"`url_ok()` works correctly now, instead of always returning `FALSE`, a bug since version 0.4 (#133).",NA
httr,1,141,141,FALSE,Remove redundant arguments `simplifyDataFrame` and `simplifyMatrix` for json parser.,NA
httr,1,142,142,FALSE,New `headers()` and `cookies()` functions to extract headers and cookies from responses. Previoulsy internal `status_code()` function now exported to extract `status_code()` from responses.,NA
httr,1,143,143,FALSE,"`POST()`, `PUT()`, and `PATCH()` now use `encode` argument to determine how list inputs are encoded. Valid values are ""multiple"", ""form"" or ""json"". The `multipart` argument is now deprecated (#103). You can stream a single file from disk with `upload_file(""path/"")`. The mime type will be guessed from the extension, or can be supplied explicitly as the second argument to `upload_file()`.",NA
httr,1,144,144,FALSE,"`progress()` will display a progress bar, useful if you're doing large uploads or downloads (#17).",NA
httr,1,145,145,FALSE,"`verbose()` now uses a custom debug function so that you can see exactly what data is sent to the server. Arguments control exactly what is included, and the defaults have been selected to be more helpful for the most common cases (#102).",NA
httr,1,146,146,FALSE,`with_verbose()` makes it easier to see verbose information when http requests are made within other functions (#87).,NA
httr,1,147,147,FALSE,New `quickstart` vignette to help you get up and running with httr.,NA
httr,1,148,148,FALSE,New `api-packages` vignette describes how best practices to follow when writing R packages that wrap web APIs.,NA
httr,1,149,149,FALSE,"`httr_options()` lists all known config options, translating between their short R names and the full libcurl names. The `curl_doc()` helper function allows you to jump directly to the online documentation for an option.",NA
httr,1,150,150,FALSE,"`authenticate()` now defaults to `type = ""basic""` which is pretty much the only type of authentication anyone uses.",NA
httr,1,151,151,FALSE,Updated `cacert.pem` to version at 2014-04-22 (#114).,NA
httr,1,152,152,FALSE,"`content_type()`, `content_type_xml()` and `content_type_json()` make it easier to set the content type for `POST` requests (and other requests with a body).",NA
httr,1,153,153,FALSE,`has_content()` tells you if request has any content associated with it (#91).,NA
httr,1,154,154,FALSE,"Add `is_interactive()` parameter to `oauth_listener()`, `init_oauth1.0()` and `init_oauth2.0()` (#90).",NA
httr,1,155,155,FALSE,`oauth_signature()` and `oauth_header()` now exported to make it easier to construct custom authentication for APIs that use only some components of the full OAuth process (e.g. 2 legged OAuth).,NA
httr,1,156,156,FALSE,NULL `query` parameters are now dropped automatically.,NA
httr,1,157,157,FALSE,"When `print()`ing a response, httr will only attempt to print the first few lines if it's a text format (i.e. either the main type is text or is application/json). It will also truncate each line so that it fits on screen - this should hopefully make it easier to see a little bit of the content, without filling the screen with gibberish.",NA
httr,1,158,158,FALSE,`new_bin()` has been removed: it's easier to see what's going on in examples with `httpbin.org`.,NA
httr,1,159,159,FALSE,`user_agent()` once again overrides default (closes #97),NA
httr,1,160,160,FALSE,"`parse(type = ""auto"")` returns NULL if no content associated with request (#91).",NA
httr,1,161,161,FALSE,Better strategy for resetting Curl handles prevents carry-over of error status and other problems (#112).,NA
httr,1,162,162,FALSE,`set_config()` and `with_config()` now work with `token`s (#111).,NA
httr,1,163,163,FALSE,"The OAuth token objects are now reference classes, which mean they can be updated in place, such as when an access token expires and needs to be refreshed. You can manually refresh by calling `$refresh()` on the object. You can force reinitialisation (to do the complete dance from scratch) by calling `$reinit(force = TRUE)`.",NA
httr,1,164,164,FALSE,"If a signed OAuth2 request fails with a 401 and the credentials have a `refresh_token`, then the OAuth token will be automatically refreshed (#74).",NA
httr,1,165,165,FALSE,"OAuth tokens are cached locally in a file called `.httr-oauth` (unless you opt out). This file should not be included in source code control, and httr will automatically add to `.gitignore` and `.Rbuildignore`. The caching policy is described in more detail in the help for the `Token` class.",NA
httr,1,166,166,FALSE,"The OAuth2 dance can now be performed without running a local webserver (#33, thanks to @craigcitro). To make that the default, set `options(httr_oob_default = TRUE)`. This is useful when running R remotely.",NA
httr,1,167,167,FALSE,"Add support for passing oauth2 tokens in headers instead of the URL, and make this the default (#34, thanks to @craigcitro).",NA
httr,1,168,168,FALSE,OAuth endpoints can store arbitrary extra urls.,NA
httr,1,169,169,FALSE,"Use the httpuv webserver for the OAuth dance instead of the built-in httpd server (#32, thanks to @jdeboer). This makes the dance work in Rstudio, and also seems a little faster. Rook is no longer required.",NA
httr,1,170,170,FALSE,`oauth_endpoints()` includes some popular OAuth endpoints.,NA
httr,1,171,171,FALSE,"HTTP verbs (`GET()`, `POST()` etc) now pass unnamed arguments to `config()` and named arguments to `modify_url()` (#81).",NA
httr,1,172,172,FALSE,"The placement of `...` in `POST()`, `PATCH()` and `PUT()` has been tweaked so that you must always specify `body` and `multipart` arguments with their full name. This has always been recommended practice; now it is enforced.",NA
httr,1,173,173,FALSE,"`httr` includes its own copy of `cacert.pem`, which is more recent than the version included in RCurl (#67).",NA
httr,1,174,174,FALSE,"Added default user agent which includes versions of Curl, RCurl and httr.",NA
httr,1,175,175,FALSE,Switched to jsonlite from rjson.,NA
httr,1,176,176,FALSE,Content parsers no longer load packages on to search path.,NA
httr,1,177,177,FALSE,`stop_for_status()` now raises errors with useful classes so that you can use `tryCatch()` to take different actions depending on the type of error. See `http_condition()` for more details.,NA
httr,1,178,178,FALSE,httr now imports the methods package so that it works when called with Rscript.,NA
httr,1,179,179,FALSE,New automatic parsers for mime types `text/tab-separated-values` and `text/csv` (#49),NA
httr,1,180,180,FALSE,"Add support for `fragment` in url building/parsing (#70, thanks to @craigcitro).",NA
httr,1,181,181,FALSE,"You can suppress the body entirely in `POST()`, `PATCH()` and `PUT()` with `body = FALSE`.",NA
httr,1,182,182,FALSE,"If you supply multiple headers of the same name, the value of the most recently set header will always be used.",NA
httr,1,183,183,FALSE,Urls with missing query param values (e.g. `http://x.com/?q=`) are now parsed correctly (#27). The names of query params are now also escaped and unescaped correctly when parsing and building urls.,NA
httr,1,184,184,FALSE,Default html parser is now `XML::htmlParse()` which is easier to use with xpath (#66).,NA
httr,1,185,185,FALSE,OAuth now uses custom escaping function which is guaranteed to work on all platforms (Fixes #21),NA
httr,1,186,186,FALSE,"When concatenating configs, concatenate all the headers. (Fixes #19)",NA
httr,1,187,187,FALSE,export `hmac_sha1` since so many authentication protocols need this,NA
httr,1,188,188,FALSE,"`content` will automatically guess what type of output (parsed, text or raw) based on the content-type header. It also automatically converts text content to UTF-8 (using the charset in the media type) and can guess at mime type from extension if server doesn't supply one. Media type and encoding can be overridden with the `type` and `encoding` arguments respectively.",NA
httr,1,189,189,FALSE,response objects automatically print content type to aid debugging.,NA
httr,1,190,190,FALSE,"`text_content` has become `context(, ""text"")` and `parsed_content` `content(, ""parsed"")`. The previous calls are deprecated and will be removed in a future version.",NA
httr,1,191,191,FALSE,"In `oauth_listener`, use existing httpd port if help server has already been started. This allows the ouath authentication dance to work if you're in RStudio. (Fixes #15).",NA
httr,1,192,192,FALSE,"add several functions related to checking the status of an http request. Those are : `status`, `url_ok` and `url_success` as well as `stop_for_status` and `warn_for_status`.",NA
httr,1,193,193,FALSE,`build_url`: correctly add params back into full url.,NA
httr,1,194,194,FALSE,Add new default config: use the standard SSL certificate,NA
httr,1,195,195,FALSE,Add recommendation to use custom handles with `authenticate`,NA
lubridate,1,1,1,FALSE,Date rounding functions accept a date-time `unit` argument for,NA
lubridate,1,2,2,FALSE,[#1005](https://github.com/tidyverse/lubridate/issues/1005) `as.duration` now allows for full roundtrip,NA
lubridate,1,3,3,FALSE,[#911](https://github.com/tidyverse/lubridate/issues/911) C parsers,NA
lubridate,1,4,4,FALSE,`stamp` gained new argument `exact=FALSE` to indicate whether,NA
lubridate,1,5,5,FALSE,"[#1001](https://github.com/tidyverse/lubridate/issues/1001) Add `%within` method with signature (Interval, list), which was",NA
lubridate,1,7,7,FALSE,[#1007](https://github.com/tidyverse/lubridate/issues/1007) Internal,NA
lubridate,1,8,8,FALSE,`train` argument in `parse_date_time` now takes effect. It was,NA
lubridate,1,9,9,FALSE,[#1004](https://github.com/tidyverse/lubridate/issues/1004) Fix,NA
lubridate,1,10,10,FALSE,[#1013](https://github.com/tidyverse/lubridate/issues/1013) Fix,NA
lubridate,1,11,11,FALSE,[#1002](https://github.com/tidyverse/lubridate/issues/1002) Parsing,NA
lubridate,1,12,12,FALSE,[#960](https://github.com/tidyverse/lubridate/issues/960) `c.POSIXct` and `c.Date` can deal with heterogeneous object types,NA
lubridate,1,13,13,FALSE,[#994](https://github.com/tidyverse/lubridate/issues/994) Subtracting two duration or two period objects no longer results in an ambiguous dispatch note.,NA
lubridate,1,14,14,FALSE,`c.Date` and `c.POSIXct` correctly deal with empty vectors.,NA
lubridate,1,15,15,FALSE,"`as_datetime(date, tz=XYZ)` returns the date-time object with HMS set to 00:00:00 in the corresponding `tz`",NA
lubridate,1,16,16,FALSE,[#966](https://github.com/tidyverse/lubridate/pull/966) Lubridate is,NA
lubridate,1,17,17,FALSE,[#955](https://github.com/tidyverse/lubridate/pull/955) Add `type`,NA
lubridate,1,18,18,FALSE,`fast_strptime()` and `parse_date_time2()` now accept multiple,NA
lubridate,1,19,19,FALSE,[#926](https://github.com/tidyverse/lubridate/issues/926) Fix,NA
lubridate,1,21,21,FALSE,[#914](https://github.com/tidyverse/lubridate/issues/914) New,NA
lubridate,1,22,22,FALSE,"[#928](https://github.com/tidyverse/lubridate/issues/928) On startup lubridate now resets TZDIR to a proper directory when it is set to non-dir values like ""internal"" or ""macOS"" (a change introduced in",NA
lubridate,1,23,23,FALSE,[#630](https://github.com/tidyverse/lubridate/issues/630) New,NA
lubridate,1,24,24,FALSE,[#930](https://github.com/tidyverse/lubridate/issues/930) `as.period()` on intervals now returns valid Periods with double,NA
lubridate,1,25,25,FALSE,[#871](https://github.com/tidyverse/lubridate/issues/893) Add,NA
lubridate,1,26,26,FALSE,[#890](https://github.com/tidyverse/lubridate/issues/890) Correctly,NA
lubridate,1,27,27,FALSE,[#893](https://github.com/tidyverse/lubridate/issues/893) Fix incorrect parsing of abbreviated months in locales with trailing dot,NA
lubridate,1,28,28,FALSE,[#886](https://github.com/tidyverse/lubridate/issues/886) Fix,NA
lubridate,1,29,29,FALSE,[#887](https://github.com/tidyverse/lubridate/issues/887) Error on,NA
lubridate,1,30,30,FALSE,[#889](https://github.com/tidyverse/lubridate/issues/889) Export new,NA
lubridate,1,31,31,FALSE,(breaking) Year and month durations now assume 365.25 days in a year consistently in conversion and constructors. Particularly,NA
lubridate,1,33,33,FALSE,New duration constructor `dmonths()` to complement other duration,NA
lubridate,1,36,36,FALSE,[#629](https://github.com/tidyverse/lubridate/issues/629) Added,NA
lubridate,1,37,37,FALSE,[#672](https://github.com/tidyverse/lubridate/issues/672) Eliminate,NA
lubridate,1,38,38,FALSE,[#674](https://github.com/tidyverse/lubridate/issues/674),NA
lubridate,1,39,39,FALSE,[#675](https://github.com/tidyverse/lubridate/issues/675),NA
lubridate,1,40,40,FALSE,[#681](https://github.com/tidyverse/lubridate/issues/681) New constants `NA_Date_` and `NA_POSIXct_` which parallel built-in,NA
lubridate,1,41,41,FALSE,[#681](https://github.com/tidyverse/lubridate/issues/681) New constructors `Date()` and `POSIXct()` which parallel built-in,NA
lubridate,1,42,42,FALSE,[#695](https://github.com/tidyverse/lubridate/issues/695) Durations,NA
lubridate,1,43,43,FALSE,[#707](https://github.com/tidyverse/lubridate/issues/707),NA
lubridate,1,44,44,FALSE,[#713](https://github.com/tidyverse/lubridate/issues/713) (breaking),NA
lubridate,1,45,45,FALSE,[#717](https://github.com/tidyverse/lubridate/issues/717) Common,NA
lubridate,1,46,46,FALSE,[#719](https://github.com/tidyverse/lubridate/issues/719) Negative,NA
lubridate,1,47,47,FALSE,[#829](https://github.com/tidyverse/lubridate/issues/829) `%within%`,NA
lubridate,1,48,48,FALSE,[#831](https://github.com/tidyverse/lubridate/issues/831) Changing,NA
lubridate,1,49,49,FALSE,[#869](https://github.com/tidyverse/lubridate/issues/869) Propagate,NA
lubridate,1,50,50,FALSE,[#682](https://github.com/tidyverse/lubridate/issues/682) Fix,NA
lubridate,1,51,51,FALSE,[#703](https://github.com/tidyverse/lubridate/issues/703),NA
lubridate,1,52,52,FALSE,[#778](https://github.com/tidyverse/lubridate/issues/778),NA
lubridate,1,54,54,FALSE,"Honor `exact = TRUE` argument in `parse_date_time2`, which was so",NA
lubridate,1,55,55,FALSE,"[#658](https://github.com/tidyverse/lubridate/issues/658) `%within%` now accepts a list of intervals, in which case an instant is checked",NA
lubridate,1,56,56,FALSE,[#661](https://github.com/tidyverse/lubridate/issues/661) Throw,NA
lubridate,1,57,57,FALSE,[#633](https://github.com/tidyverse/lubridate/issues/633) `%%` on intervals relies on `%m+` arithmetic and doesn't produce NAs when,NA
lubridate,1,58,58,FALSE,"`tz()` always returns ""UTC"" when `tzone` attribute cannot be",NA
lubridate,1,59,59,FALSE,[#664](https://github.com/tidyverse/lubridate/issues/664) Fix lookup,NA
lubridate,1,60,60,FALSE,[#649](https://github.com/tidyverse/lubridate/issues/664) Fix system,NA
lubridate,1,61,61,FALSE,"[#643](https://github.com/tidyverse/lubridate/issues/643), [#640](https://github.com/tidyverse/lubridate/issues/640), [#645](https://github.com/tidyverse/lubridate/issues/645) Fix faulty",NA
lubridate,1,63,63,FALSE,`interval` constructor accepts start and end character vectors in,NA
lubridate,1,64,64,FALSE,[#362](https://github.com/tidyverse/lubridate/issues/362) Add,NA
lubridate,1,65,65,FALSE,[#622](https://github.com/tidyverse/lubridate/issues/622) Add,NA
lubridate,1,67,67,FALSE,[#605](https://github.com/tidyverse/lubridate/issues/605) Fix wrong,NA
lubridate,1,68,68,FALSE,[#607](https://github.com/tidyverse/lubridate/issues/607) Re-instate `format` argument to `as_date` and `as_datetime` (regression in,NA
lubridate,1,71,71,FALSE,"[#575](https://github.com/tidyverse/lubridate/issues/598), [#600](https://github.com/tidyverse/lubridate/issues/600), [#602](https://github.com/tidyverse/lubridate/issues/602) Fix",NA
lubridate,1,72,72,FALSE,[#598](https://github.com/tidyverse/lubridate/issues/598) Fix broken,NA
lubridate,1,73,73,FALSE,[#597](https://github.com/tidyverse/lubridate/issues/597) Fix broken,NA
lubridate,1,74,74,FALSE,Reduced memory footprint on `trunc_multi_unit` so that it overwrites,NA
lubridate,1,75,75,FALSE,[#438](https://github.com/tidyverse/lubridate/issues/438) New,NA
lubridate,1,76,76,FALSE,[#438](https://github.com/tidyverse/lubridate/issues/438) New function `local_time` for the retrieval of local day time in,NA
lubridate,1,77,77,FALSE,[#560](https://github.com/tidyverse/lubridate/issues/560) New argument `cutoff_2000` for parsing functions to indicate 20th,NA
lubridate,1,78,78,FALSE,[#257](https://github.com/tidyverse/lubridate/issues/257) New,NA
lubridate,1,79,79,FALSE,[#401](https://github.com/tidyverse/lubridate/issues/401) New parameter `locale` in `wday`. Labels of the returned factors (when,NA
lubridate,1,80,80,FALSE,[#485](https://github.com/tidyverse/lubridate/pull/485) `quarter` gained a new argument `fiscal_start` to address the issue of,NA
lubridate,1,81,81,FALSE,[#492](https://github.com/tidyverse/lubridate/issues/492) New,NA
lubridate,1,82,82,FALSE,[#508](https://github.com/tidyverse/lubridate/pull/508) New parameter `locale` in `month`. Labels of the returned factors (when,NA
lubridate,1,83,83,FALSE,"[#509](https://github.com/tidyverse/lubridate/issues/509) New parameter `week_start` to `floor_date`, `ceiling_date` and",NA
lubridate,1,84,84,FALSE,[#519](https://github.com/tidyverse/lubridate/issues/519) Support,NA
lubridate,1,85,85,FALSE,[#502](https://github.com/tidyverse/lubridate/issues/502) Support,NA
lubridate,1,86,86,FALSE,[#529](https://github.com/tidyverse/lubridate/issues/529) Internal,NA
lubridate,1,87,87,FALSE,[#535](https://github.com/tidyverse/lubridate/issues/535) Rounding,NA
lubridate,1,88,88,FALSE,[#536](https://github.com/tidyverse/lubridate/issues/536) `as_date`,NA
lubridate,1,89,89,FALSE,"New parsing parameters to `parse_date_time` - `train=TRUE` and `drop=FALSE` which allow more refined control of the format guessing. Formats are no longer dropped in the process by default, process which resulted in surprising behavior on several occasions",NA
lubridate,1,90,90,FALSE,"[#401](https://github.com/tidyverse/lubridate/issues/401) **\[Breaking Change\]** Labels returned by `wday` and `month` are now in current locale. The abbreviated labels in English locales have been changed to standard abbreviations (Tues -\> Tue, Thurs -\>",NA
lubridate,1,91,91,FALSE,[#469](https://github.com/tidyverse/lubridate/issues/469) Throw,NA
lubridate,1,92,92,FALSE,[#572](https://github.com/tidyverse/lubridate/issues/572) `B` and `b` formats no longer match numeric months. This corresponds to the,NA
lubridate,1,93,93,FALSE,"[#314](https://github.com/tidyverse/lubridate/issues/314), [#407](https://github.com/tidyverse/lubridate/issues/407), [#499](https://github.com/tidyverse/lubridate/issues/499) Make `days`, `dhours`, `round_date` work when the methods package is not",NA
lubridate,1,94,94,FALSE,[#543](https://github.com/tidyverse/lubridate/issues/543) Make `wday` work on character inputs as it is the case with all other day,NA
lubridate,1,95,95,FALSE,[#566](https://github.com/tidyverse/lubridate/issues/566) Comparing,NA
lubridate,1,96,96,FALSE,[#556](https://github.com/tidyverse/lubridate/issues/556) Fix incorrect scoring of `y` format when it's the last in format order,NA
lubridate,1,97,97,FALSE,[#584](https://github.com/tidyverse/lubridate/issues/584) Fix,NA
lubridate,1,98,98,FALSE,"[#559](https://github.com/tidyverse/lubridate/issues/559) Parsing of alpha-months in English locales now drops correctly to low level C parsing. Thus, parsing with multiple orders containing `m` and `b`",NA
lubridate,1,99,99,FALSE,"[#570](https://github.com/tidyverse/lubridate/issues/570), [#574](https://github.com/tidyverse/lubridate/issues/574) Fix broken",NA
lubridate,1,100,100,FALSE,[#567](https://github.com/tidyverse/lubridate/issues/567) Fix year,NA
lubridate,1,101,101,FALSE,[#545](https://github.com/tidyverse/lubridate/pull/545) Fix wrong,NA
lubridate,1,102,102,FALSE,[#466](https://github.com/tidyverse/lubridate/pull/466) Fix wrong,NA
lubridate,1,103,103,FALSE,[#472](https://github.com/tidyverse/lubridate/pull/472) Printing method for duration doesn't throw format error on fractional,NA
lubridate,1,104,104,FALSE,[#475](https://github.com/tidyverse/lubridate/pull/475),NA
lubridate,1,105,105,FALSE,[#483](https://github.com/tidyverse/lubridate/pull/483) Fix,NA
lubridate,1,106,106,FALSE,[#486](https://github.com/tidyverse/lubridate/issues/486),NA
lubridate,1,107,107,FALSE,[#491](https://github.com/tidyverse/lubridate/issues/491),NA
lubridate,1,108,108,FALSE,[#507](https://github.com/tidyverse/lubridate/issues/507) Period and,NA
lubridate,1,109,109,FALSE,[#524](https://github.com/tidyverse/lubridate/pull/524) Correctly,NA
lubridate,1,110,110,FALSE,"[#525](https://github.com/tidyverse/lubridate/pull/525) Fix to prevent `day<-`, `minute<-`, etc. from producing an error when",NA
lubridate,1,111,111,FALSE,[#530](https://github.com/tidyverse/lubridate/issues/530) `parse_date_time` now throw warnings only for actual parsing errors,NA
lubridate,1,112,112,FALSE,[#534](https://github.com/tidyverse/lubridate/issues/534) Fix,NA
lubridate,1,113,113,FALSE,[#554](https://github.com/tidyverse/lubridate/pull/554) Fix tests,NA
lubridate,1,114,114,FALSE,[#464](https://github.com/tidyverse/lubridate/issues/464) New,NA
lubridate,1,115,115,FALSE,[#459](https://github.com/tidyverse/lubridate/issues/459) Flexible C-level parsing for periods and durations has been implemented; `period` and `duration` constructors now accept string as first argument. Same parsing rules apply to the 'unit' parameter in,NA
lubridate,1,116,116,FALSE,[#459](https://github.com/tidyverse/lubridate/issues/459) Comparison,NA
lubridate,1,117,117,FALSE,[#287](https://github.com/tidyverse/lubridate/issues/287) C-level and derivative parsers now handle English months (%b and %B formats),NA
lubridate,1,118,118,FALSE,[#327](https://github.com/tidyverse/lubridate/issues/327) C-level and derivative parsers now handles English AM/PM indicator,NA
lubridate,1,119,119,FALSE,"[#417](https://github.com/tidyverse/lubridate/issues/417) `hms`, `hm`, `ms` gained new argument `roll=TRUE` which rolls minutes and",NA
lubridate,1,120,120,FALSE,[#445](https://github.com/tidyverse/lubridate/issues/445) Division,NA
lubridate,1,121,121,FALSE,"[#442](https://github.com/tidyverse/lubridate/issues/442) `round_date`, `floor_date` and `ceiling_date` now support rounding",NA
lubridate,1,122,122,FALSE,[#422](https://github.com/tidyverse/lubridate/issues/422) New parsing function `yq` for parsing most common version of quarter,NA
lubridate,1,123,123,FALSE,[#422](https://github.com/tidyverse/lubridate/issues/422) New format,NA
lubridate,1,124,124,FALSE,[#441](https://github.com/tidyverse/lubridate/issues/441) Comparison,NA
lubridate,1,125,125,FALSE,[#437](https://github.com/tidyverse/lubridate/issues/437) New function `as_datetime` to coerce to POSIXct object. A counterpart of,NA
lubridate,1,126,126,FALSE,[#412](https://github.com/tidyverse/lubridate/issues/412) New function `make_date` to produce Date objects. A counterpart of,NA
lubridate,1,127,127,FALSE,[#443](https://github.com/tidyverse/lubridate/issues/443) Behavior of `ceiling_date` for `Date` objects was changed to what most of the users expect. Rounding up by months now produces first day of the,NA
lubridate,1,128,128,FALSE,"[#268](https://github.com/tidyverse/lubridate/issues/268) `round_date`, `ceiling_date`, and `floor_date` now accept ""quarter"",",NA
lubridate,1,129,129,FALSE,[#418](https://github.com/tidyverse/lubridate/issues/418) C level,NA
lubridate,1,130,130,FALSE,"Low letter specs for HMS (hms,hm,ms) in `parse_date_time` and",NA
lubridate,1,131,131,FALSE,[#445](https://github.com/tidyverse/lubridate/issues/445) No more warning on occasional imprecise period length conversions. Imprecise,NA
lubridate,1,132,132,FALSE,"`pretty.*` family of functions were renamed and are no longer exported. If you need to use them, use `lubridate:::pretty_*`",NA
lubridate,1,133,133,FALSE,`change_on_boundary` argument in `ceiling_date` does not allow for,NA
lubridate,1,134,134,FALSE,"`as.duration`, `as.numeric` don't show ""only estimate"" messages on conversion from periods. The occasional approximate conversion is",NA
lubridate,1,136,136,FALSE,[#403](https://github.com/tidyverse/lubridate/issues/403) Update on,NA
lubridate,1,137,137,FALSE,"[#411](https://github.com/tidyverse/lubridate/issues/411) format `mdy` or `myd` beginning with `""January""` or `""Jan""` now parsing",NA
lubridate,1,138,138,FALSE,`here` and `olson_time_zones` were deprecated in favor of `new` and,NA
lubridate,1,140,140,FALSE,[#456](https://github.com/tidyverse/lubridate/issues/456) Evaluation,NA
lubridate,1,141,141,FALSE,[#479](https://github.com/tidyverse/lubridate/issues/479) Fix the,NA
lubridate,1,142,142,FALSE,[#463](https://github.com/tidyverse/lubridate/issues/463) Fix NA,NA
lubridate,1,143,143,FALSE,[#462](https://github.com/tidyverse/lubridate/issues/462) Non-numeric or non-character arguments are disallowed as arguments,NA
lubridate,1,144,144,FALSE,[#458](https://github.com/tidyverse/lubridate/issues/458) When year,NA
lubridate,1,145,145,FALSE,[#448](https://github.com/tidyverse/lubridate/issues/448) Correctly,NA
lubridate,1,146,146,FALSE,[#450](https://github.com/tidyverse/lubridate/issues/450) Fix,NA
lubridate,1,147,147,FALSE,[#420](https://github.com/tidyverse/lubridate/issues/420) `as.numeric` correctly converts periods to (aproximate) numeric time,NA
lubridate,1,148,148,FALSE,[#390](https://github.com/tidyverse/lubridate/issues/390) `ceiling_date` gains new argument `change_on_boundary` to allow,NA
lubridate,1,149,149,FALSE,C parser can now produce a list of date-time components suitable for,NA
lubridate,1,150,150,FALSE,`parse_date_time2` and `fast_strptime` gain new `lt` argument to,NA
lubridate,1,151,151,FALSE,"[#373](https://github.com/tidyverse/lubridate/issues/373) New `date` and `date<-` additions to the `year`, `month` etc family of",NA
lubridate,1,152,152,FALSE,[#365](https://github.com/tidyverse/lubridate/issues/365) New very fast datetime constructor `make_datetime` (dropin replacement of,NA
lubridate,1,153,153,FALSE,[#344](https://github.com/tidyverse/lubridate/issues/344) `force_tz`,NA
lubridate,1,154,154,FALSE,[#355](https://github.com/tidyverse/lubridate/issues/355) New `as_date` replacement of `as.Date` with more intuitive behavior with,NA
lubridate,1,155,155,FALSE,[#333](https://github.com/tidyverse/lubridate/issues/333) `hms`,NA
lubridate,1,156,156,FALSE,[#391](https://github.com/tidyverse/lubridate/issues/391) `ymd` family of functions return `Date` object when `tz` argument is NULL,NA
lubridate,1,157,157,FALSE,[#364](https://github.com/tidyverse/lubridate/issues/364) Remove,NA
lubridate,1,158,158,FALSE,For consistency with `base:strptime` `fast_strptime` now returns,NA
lubridate,1,159,159,FALSE,`interval` constructor treats timezones correctly and works with UTC,NA
lubridate,1,160,160,FALSE,[#371](https://github.com/tidyverse/lubridate/issues/371) `as.period` correctly computes months with intervals spanning,NA
lubridate,1,161,161,FALSE,[#388](https://github.com/tidyverse/lubridate/issues/388) `time_length` and `add_with_rollback` now work correctly with,NA
lubridate,1,162,162,FALSE,[#394](https://github.com/tidyverse/lubridate/issues/394) `fast_strptime` and `parse_date_time2` correctly treat non-UTC time,NA
lubridate,1,163,163,FALSE,[#399](https://github.com/tidyverse/lubridate/issues/399) `floor_date` and `round_date` are not preserving tz component for,NA
lubridate,1,166,166,FALSE,[#326](https://github.com/tidyverse/lubridate/issues/326) Added `exact = TRUE` option to `parse_date_time` for faster and much more,NA
lubridate,1,167,167,FALSE,New `simple` argument to `fit_to_timeline` and `update` methods,NA
lubridate,1,168,168,FALSE,[#315](https://github.com/tidyverse/lubridate/issues/315) Implement,NA
lubridate,1,169,169,FALSE,[#295](https://github.com/tidyverse/lubridate/issues/295) New args,NA
lubridate,1,170,170,FALSE,[#303](https://github.com/tidyverse/lubridate/issues/303) New,NA
lubridate,1,171,171,FALSE,[#348](https://github.com/tidyverse/lubridate/issues/348) New,NA
lubridate,1,172,172,FALSE,[#278](https://github.com/tidyverse/lubridate/issues/278) Added,NA
lubridate,1,174,174,FALSE,"Time span constructors were re-factored; `new_interval`, `new_period`, `new_duration`, `new_difftime` were deprecated in favour of the more powerful `interval`, `period`, `duration` and",NA
lubridate,1,175,175,FALSE,"`eseconds`, `eminutes` etc. were deprecated in favour of `dsecons`,",NA
lubridate,1,177,177,FALSE,New testthat conventions are adopted. Tests are now in,NA
lubridate,1,178,178,FALSE,Internally `isodate` was replaced with a much faster,NA
lubridate,1,179,179,FALSE,"[#325](https://github.com/tidyverse/lubridate/issues/325) `Lubridate`'s `trunc`, `ceiling` and `floor` functions have been optimised and now are relying on R's `trunc.POSIXct` whenever",NA
lubridate,1,180,180,FALSE,[#285](https://github.com/tidyverse/lubridate/issues/285) Algebraic computations with negative periods are behaving asymmetrically with,NA
lubridate,1,182,182,FALSE,[#360](https://github.com/tidyverse/lubridate/issues/360) Fix c,NA
lubridate,1,183,183,FALSE,[#322](https://github.com/tidyverse/lubridate/issues/322) Explicitly,NA
lubridate,1,184,184,FALSE,[#302](https://github.com/tidyverse/lubridate/issues/302) Allow,NA
lubridate,1,185,185,FALSE,[#349](https://github.com/tidyverse/lubridate/issues/349) Fix broken,NA
lubridate,1,186,186,FALSE,[#336](https://github.com/tidyverse/lubridate/issues/336) Fix broken,NA
lubridate,1,187,187,FALSE,[#227](https://github.com/tidyverse/lubridate/issues/227) Treat,NA
lubridate,1,188,188,FALSE,[#286](https://github.com/tidyverse/lubridate/issues/286) %m+-%,NA
lubridate,1,189,189,FALSE,[#323](https://github.com/tidyverse/lubridate/issues/323) Implement,NA
lubridate,1,190,190,FALSE,[#226](https://github.com/tidyverse/lubridate/issues/226) Propagate,NA
lubridate,1,191,191,FALSE,[#235](https://github.com/tidyverse/lubridate/issues/235) Fix,NA
lubridate,1,192,192,FALSE,[#240](https://github.com/tidyverse/lubridate/issues/240) Make,NA
lubridate,1,193,193,FALSE,[#254](https://github.com/tidyverse/lubridate/issues/254) Don't,NA
lubridate,1,194,194,FALSE,[#289](https://github.com/tidyverse/lubridate/issues/289) Check for,NA
lubridate,1,195,195,FALSE,[#306](https://github.com/tidyverse/lubridate/issues/306) When,NA
lubridate,1,196,196,FALSE,[#308](https://github.com/tidyverse/lubridate/issues/308) Document,NA
lubridate,1,197,197,FALSE,[#313](https://github.com/tidyverse/lubridate/issues/313) Fixed and,NA
lubridate,1,198,198,FALSE,[#311](https://github.com/tidyverse/lubridate/issues/311) Always use,NA
lubridate,1,199,199,FALSE,[#294](https://github.com/tidyverse/lubridate/issues/294) Don't use,NA
lubridate,1,202,202,FALSE,[#219](https://github.com/tidyverse/lubridate/issues/219) In,NA
lubridate,1,203,203,FALSE,[#255](https://github.com/tidyverse/lubridate/issues/255) Parse yy,NA
lubridate,1,204,204,FALSE,[#266](https://github.com/tidyverse/lubridate/issues/266) Include,NA
lubridate,1,205,205,FALSE,[#251](https://github.com/tidyverse/lubridate/issues/251) Correct,NA
lubridate,1,206,206,FALSE,[#262](https://github.com/tidyverse/lubridate/issues/262) Document,NA
lubridate,1,207,207,FALSE,[#270](https://github.com/tidyverse/lubridate/issues/270) Add check,NA
lubridate,1,208,208,FALSE,[#276](https://github.com/tidyverse/lubridate/issues/276) Perform,NA
lubridate,1,209,209,FALSE,[#284](https://github.com/tidyverse/lubridate/issues/284) Compute periods in `as.period.interval` without recurring to modulo,NA
lubridate,1,210,210,FALSE,[#272](https://github.com/tidyverse/lubridate/issues/272) Update,NA
lubridate,1,211,211,FALSE,[#236](https://github.com/tidyverse/lubridate/issues/236) Don't,NA
lubridate,1,212,212,FALSE,[#247](https://github.com/tidyverse/lubridate/issues/247),NA
lubridate,1,213,213,FALSE,[#229](https://github.com/tidyverse/lubridate/issues/229),NA
lubridate,1,216,216,FALSE,New low level C parser for numeric formats and two new front-end R functions parse_date_time2 and fast_strptime. The achieved speed up is 50-100x as compared to standard as.POSIXct and strptime functions. The user level parser functions of ymd_hms family drop to these C routines whenever plain numeric formats are detected.,NA
lubridate,1,219,219,FALSE,"Lubridate's s4 methods no longer use the representation argument, which has been deprecated in R 3.0.0 (see ?setClass). As a result,",NA
lubridate,1,220,220,FALSE,"v1.3.0. treats math with month and year Periods more consistently. If adding or subtracting n months would result in a non-existent date, lubridate will return an NA instead of a day in the following month or year. For example, `ymd(""2013-01-31"") + months(1)` will return `NA` instead of `2013-03-04` as in v1.2.0. `ymd(""2012-02-29"") + years(1)` will also return an `NA`. This rule change helps ensure that date + timespan - timespan = date (or NA). If you'd prefer that such arithmetic just returns the last day of",NA
lubridate,1,221,221,FALSE,"update.POSIXct and update.POSIXlt have been rewritten to be 7x faster than their versions in v1.2.0. The speed gain is felt in `force_tz`, `with_tz`, `floor_date`, `ceiling_date`, `second<-`, `minute<-`, `hour<-`, `day<-`, `month<-`, `year<-`, and other",NA
lubridate,1,222,222,FALSE,lubridate includes a Korean translation provided by,NA
lubridate,1,223,223,FALSE,lubridate parser and stamp functions now handle ISO8601 date format,NA
lubridate,1,224,224,FALSE,lubridate v1.3.0 comes with a new R vignette. see,NA
lubridate,1,225,225,FALSE,"The accessors `second`, `minute`, `hour`, `day`, `month`, `year` and the settors `second<-`, `minute<-`, `hour<-`, `day<-`, `month<-`,",NA
lubridate,1,226,226,FALSE,users can control which messages lubridate returns when parsing and estimating with the global option lubridate.verbose. Run `options(lubridate.verbose = TRUE)` to turn parsing messages on. Run `options(lubridate.verbose = FALSE)` to turn estimation and coercion,NA
lubridate,1,227,227,FALSE,"lubridate parser functions now propagate NA's just as as.POSIXct, strptime and other functions do. Previously lubridate's parse",NA
lubridate,1,228,228,FALSE,"added \[\[ and \[\[\<- methods for INterval, Period and Duration",NA
lubridate,1,229,229,FALSE,added `%m+%` and `%m-%` methods for Interval and Duration class,NA
lubridate,1,230,230,FALSE,`olson_time_zones` retreives a character vector is Olson-style time,NA
lubridate,1,232,232,FALSE,date_decimal converts a date written as a decimal of a year into a,NA
lubridate,1,233,233,FALSE,fixed bug in way update.POSIXct and update.POSIXlt handle dates that occur in the fall daylight savings overlap. update will choose the date-time closest to the original date time (on the timeline) when,NA
lubridate,1,234,234,FALSE,"fixed bugs that created unintuitive results for `as.interval`, `int_overlaps`, `%within%` and the interval methods of `c`,",NA
lubridate,1,235,235,FALSE,"parse functions, `as.interval`, `as.period` and `as.duration` now",NA
lubridate,1,236,236,FALSE,parsers better handle vectors of input that have more than 100,NA
lubridate,1,237,237,FALSE,data frames that contain timespan objects with NAs in thme no longer,NA
lubridate,1,238,238,FALSE,"`round_date`, `ceiling_date` and `update` now correctly handle input",NA
lubridate,1,240,240,FALSE,"lubridate 1.2.0 is significantly faster than lubridate 1.1.0. This is largely thanks to a parser rewrite submitted by Vitalie Spinu. Thank you, Vitalie. Some metrics:",NA
lubridate,2,240,241,FALSE,* parser speed up - 60x faster,"lubridate 1.2.0 is significantly faster than lubridate 1.1.0. This is largely thanks to a parser rewrite submitted by Vitalie Spinu. Thank you, Vitalie. Some metrics:"
lubridate,2,240,242,FALSE,* `with_tz` speed up - 15x faster,"lubridate 1.2.0 is significantly faster than lubridate 1.1.0. This is largely thanks to a parser rewrite submitted by Vitalie Spinu. Thank you, Vitalie. Some metrics:"
lubridate,2,240,243,FALSE,* `force_tz` speed up - 3x faster,"lubridate 1.2.0 is significantly faster than lubridate 1.1.0. This is largely thanks to a parser rewrite submitted by Vitalie Spinu. Thank you, Vitalie. Some metrics:"
lubridate,1,244,244,FALSE,"Development for 1.2.0 has also focused on improving the way we work with months. `rollback` rolls dates back to the last day of the previous month. provides more options for working with months. `days_in_month` finds the number of days in a date's month. And, `%m+%` and `%m-%` provide a new way to \### handle unequal month lengths while doing arithmetic. See NEW FEATURES for more details",NA
lubridate,1,245,245,FALSE,"date parsing can now parse multiple date formats within the same vector of date-times. Parsing can also recognize a greater variety of date-time formats as well as incomplete (truncated) date-times. Contributed by Vitalie Spinu. Thank you, Vitalie.",NA
lubridate,1,246,246,FALSE,1.2.0 introduces a new display format for periods. The display is more math and international friendly.,NA
lubridate,1,247,247,FALSE,"1.2.0 transforms negative intervals into periods much more gracefully (e.g, - 3 days instead of -1 years, 11 months, and 27 days)",NA
lubridate,1,248,248,FALSE,S3 update methods are now exported,NA
lubridate,1,249,249,FALSE,"`stamp` allows users to print dates in whatever form they like. Contributed by Vitalie Spinu. Thank you, Vitalie.",NA
lubridate,1,250,250,FALSE,"periods now handle fractional seconds. Contributed by Vitalie Spinu. Thank you, Vitalie.",NA
lubridate,1,251,251,FALSE,"date parsing can now parse multiple date formats within the same vector of date-times. Parsing can also recognize a greater variety of date-time formats as well as incomplete (truncated) date-times. Contributed by Vitalie Spinu. Thank you, Vitalie.",NA
lubridate,1,252,252,FALSE,"`sort`, `order`, `rank` and `xtfrm` now work with periods",NA
lubridate,1,253,253,FALSE,`as.period.Interval` accepts a unit argument. `as.period` will convert intervals into periods no larger than the supplied unit.,NA
lubridate,1,254,254,FALSE,"`days_in_month` takes a date, returns the number of days in the date's month. Contributed by Richard Cotton. Thank you, Richard.",NA
lubridate,1,255,255,FALSE,"`%m+%` and `%m-%` perform addition and subtraction with months (and years) without rollover at the end of a month. These can be used in place of + and -. These can't be used with periods smaller than a month, which should be handled separately. An example of the new behavior: ymd(""2010-01-31"") %m+% months(1) \# ""2010-02-28 UTC"" ymd(""2010-01-31"") + months(1) \# ""2010-03-03 UTC"" ymd(""2010-03-31"") %m-% months(1) \# ""2010-02-28 UTC"" ymd(""2010-01-31"") - months(1) \# ""2010-03-03 UTC""",NA
lubridate,1,256,256,FALSE,`rollback` rolls a date back to the last day of the previous month.,NA
lubridate,1,257,257,FALSE,"`quarter` returns the fiscal quarter that a date occurs in. Like `quartes` in base R, but returns a numeric instead of a character string.",NA
lubridate,1,258,258,FALSE,date parsers now handle NAs,NA
lubridate,1,259,259,FALSE,periods now handle NAs,NA
lubridate,1,260,260,FALSE,"`[<-` now correctly updates all elements of a period inside a vector, list, or data.frame",NA
lubridate,1,261,261,FALSE,"`period()` now works with unit = ""weeks""",NA
lubridate,1,262,262,FALSE,`ceiling_date` no longer rounds up if a date is already at a ceiling,NA
lubridate,1,263,263,FALSE,"the redundant (i.e, repeated) hour of fall daylight savings time now displays with the correct time zone",NA
lubridate,1,264,264,FALSE,`update.POSIXct` and `update.POSIXlt` handle vectors that sum to zero in the days argument,NA
lubridate,1,265,265,FALSE,"the format method for periods, intervals and duration now accurately displays objects of length 0.",NA
lubridate,1,266,266,FALSE,"lubridate no longer overwrites base R methods for +, - , \*, /, %%, and %/%. To recreate the previous experience of subtracting two date times to create an interval, we've added the interval creation function %--%.",NA
lubridate,1,267,267,FALSE,"lubridate has moved to an S4 object system. Timespans, Intervals, Durations, and Periods have each been redefined as an S4 class with its own methods.",NA
lubridate,1,268,268,FALSE,"arithmetic operations will no longer perform implicit class changes between timespans. Users must explicitly state how and when they wish class changes to occur with as.period(), as.duration(), and as.interval(). This makes code written with lubridate more robust, as such implicit changes often did not produce consistent behavior across a variety of operations. It also allows lubridate to be less chatty with fewer console messages. lubridate does not need to explain what it is doing, because it no longer attempts to do things whose outcome would not be clear. On the other hand, arithmetic between multiple time classes will produce informative error messages.",NA
lubridate,1,269,269,FALSE,the internal structure of lubridate R code has been reorganized at https://github.com/tidyverse/lubridate to make lubridate more development friendly.,NA
lubridate,1,270,270,FALSE,"intervals are now more useful and lubridate has more ways to manipulate them. Intervals can be created with %--%; modified with int_shift(), int_flip(), and int_standardize(); manipulated with intersect(), union(), and setdiff(); and used in logical tests with int_aligns(), int_overlaps(), and %within%. lubridate will no longer perform arithmetic between two intervals because the correct results of such operations is no more obvious than the correct result of adding two dates. Instead users are encouraged to use the new set operations or to directly modify intervals with int_start() and int_end(), which can also be used as settors. lubridate now supports negative intervals as well as positive intervals. Intervals also now display with a time zone.",NA
lubridate,1,271,271,FALSE,"Modulo methods for timespans have been changed to return a timespan. this allows modulo methods to be used with integer division in an intuitive manner, e.g. `a = a %/% b * b + a %% b`",NA
lubridate,1,272,272,FALSE,"Periods, durations, and intervals can now all be put into a data frame.",NA
lubridate,1,273,273,FALSE,"Periods, durations, and intervals can be intuitively subset with \$ and \[\]. These operations also can be used as settors with \<-.",NA
lubridate,1,274,274,FALSE,The parsing functions and the as.period method for intervals are now slightly faster.,NA
lubridate,1,275,275,FALSE,month\<- and wday\<- settors accept names as well as numbers,NA
lubridate,1,276,276,FALSE,parsing functions now have a quiet argument to parse without messages and a tz argument to directly parse times into the desired time zone.,NA
lubridate,1,277,277,FALSE,logical comparison methods now work for period objects.,NA
lubridate,1,278,278,FALSE,use `test_package` to avoid incompatibility with current version of `testthat`,NA
lubridate,1,279,279,FALSE,other minor fixes to pass `R CMD check`,NA
lubridate,1,280,280,FALSE,added ymdThms() for parsing ISO 8061 formatted combned dates and,NA
lubridate,1,281,281,FALSE,"removed bug in parsing dates with ""T"" in them",NA
lubridate,1,282,282,FALSE,modified as.period.interval() to display periods in positive units,NA
lubridate,1,284,284,FALSE,"ymd_hms(), hms(), and ms() functions can now parse dates that include decimal values in the seconds element.",NA
lubridate,1,285,285,FALSE,"milliseconds(), microseconds(), nanoseconds(), and picoseconds() create period objects of the specified lengths. dmilliseconds(), dmicroseconds(), dnanoseconds(), and dpicoseconds() make duration objects of the specified lengths.",NA
lubridate,1,286,286,FALSE,"lubridate no longer overwrites months(), start(), and end() from base R. Start and end have been replaced with int_start() and int_end().",NA
lubridate,1,287,287,FALSE,"lubridate imports plyr and stringr packages, instead of depending on them.",NA
lubridate,1,288,288,FALSE,"made division, modulo, and integer division operations compatible with difftimes",NA
lubridate,1,289,289,FALSE,created c() methods for periods and durations,NA
lubridate,1,291,291,FALSE,"created parsing functions ymd_hm ymd_h dmy_hms dmy_hm dmy_h mdy_hms mdy_hm mdy_h ydm_hms ydm_hm ydm_h, which operate in the same way as",NA
lubridate,1,292,292,FALSE,fixed bug in add_dates(). duration objects can now be successfully,NA
lubridate,1,293,293,FALSE,"division between timespans: each timespan class (durations, periods, intervals) can be divided by other timespans. For example, how many weeks are there between Halloween and Christmas?: (christmas - halloween) / weeks(1)",NA
lubridate,1,294,294,FALSE,modulo operations between timespans,NA
lubridate,1,295,295,FALSE,duration objects now have their own class and display format separate from difftimes,NA
lubridate,1,296,296,FALSE,interval objects now use an improved data structure and have a cleaner display format,NA
lubridate,1,297,297,FALSE,lubridate now loads its own namespace,NA
lubridate,1,298,298,FALSE,"math operations now automatically coerce interval objects to duration objects. Allows intervals to be used ""right out of the box"" without error messages.",NA
lubridate,1,299,299,FALSE,created start() and end() functions for accessing and changing the boundary date-times of an interval,NA
lubridate,1,300,300,FALSE,"rep() methods for periods, intervals, and durations",NA
lubridate,1,301,301,FALSE,added a package help page with functions listed by purpose,NA
lubridate,1,302,302,FALSE,"eseconds(), eminutes(), etc. are aliased to dseconds(), dminutes(), etc. to make it easier to remember they are duration objects.",NA
lubridate,1,303,303,FALSE,changed leap.years() to leap_years() to maintain consistent naming scheme,NA
lubridate,1,304,304,FALSE,rewrote as.period() to create only positive periods.,NA
lubridate,1,305,305,FALSE,fixed rollover bug in update.POSIXct(),NA
lubridate,1,306,306,FALSE,"edited make_diff() to display in days when approporiate, not weeks",NA
magrittr,1,2,2,FALSE,"New eager pipe `%!>%` for sequential evaluation (#247). Consider using `force()` in your functions instead to make them strict, if sequentiality is required. See the examples in `?""pipe-eager""`.",NA
magrittr,1,3,3,FALSE,"Fixed an issue that could cause pipe invocations to fail in versions of R built with `--enable-strict-barrier`. (#239, @kevinushey)",NA
magrittr,1,4,4,FALSE,Fixed issue caused by objects with certain names being present in the calling environment (#233).,NA
magrittr,1,5,5,FALSE,Fixed regression in `freduce()` with long lists (kcf-jackson/sketch#5).,NA
magrittr,1,9,19,FALSE,Can now use the placeholder `.` with the splicing operator `!!!` from rlang (#191).,NA
magrittr,1,10,20,FALSE,"Piped arguments are now persistent. They can be evaluated after the pipeline has returned, which fixes subtle issues with function factories (#159, #195).",NA
modelr,1,7,7,FALSE,"`add_predictions()`, `gather_predictions()`, and `spread_predictions()` more carefully pass along `type` parameter in order to avoid problems with predict methods that don't deal with",NA
modelr,1,8,8,FALSE,"`add_predictions()`, `gather_predictions()`, and `spread_predictions()` gain a `type` parameter which is passed through to `stats::predict()` (#34, @pmenzel)",NA
modelr,1,9,9,FALSE,New `crossv_loo()` which implements leave-one-out cross validation (@pmenzel),NA
modelr,1,10,10,FALSE,`typical()` no longer ignores missing values in character and factor vectors (#80).,NA
modelr,1,11,11,FALSE,`data_grid()` no longer fails with modern tidyr (#58).,NA
modelr,1,12,12,FALSE,"New `mape()` and `rsae()` model quality statistics (@paulponcet, #33).",NA
modelr,1,13,13,FALSE,`rsquare()` use more robust calculation 1 - SS_res / SS_tot rather than SS_reg / SS_tot (#37).,NA
modelr,1,14,14,FALSE,"`typical()` gains `ordered` and `integer` methods (@jrnold, #44), and `...` argument (@jrnold, #42).",NA
modelr,1,15,15,FALSE,Added a `NEWS.md` file to track changes to the package.,NA
modelr,1,16,16,FALSE,Fixed R CMD CHECK note,NA
modelr,1,17,17,FALSE,Updated usage of `reduce()` for upcoming purrr release,NA
modelr,1,18,18,FALSE,More general `permute()` function,NA
modelr,1,19,19,FALSE,"Add `mse()` function to calculate mean squared error. Written by @bensoltoff, pull request #57",NA
pillar,1,2,2,FALSE,"New `pillar.advice` option to turn off advice in the footer, see `?pillar_options`. Now off by default in non-interactive mode",NA
pillar,1,3,3,FALSE,"Column names that are abbreviated in the header gain a footnote and are printed in full in the footer (#483), after the extra columns (#548). If a column name in the header is abbreviated, all backticks are removed (#525). The new `""pillar.superdigit_sep""` option that determines the string used to separate footnote from column name in the footer (#553).",NA
pillar,1,4,4,FALSE,"The default value of the `pillar.min_title_width` option is changed to 5. This means that effectively the width of a pillar is decided only by the data. Use `options(pillar.min_title_width = 15)` to restore the previous default, see also `?pillar_options` for details (#531).",NA
pillar,1,5,5,FALSE,Offer advice in the footer on how to print all columns or rows (#567).,NA
pillar,1,6,6,FALSE,Avoid aligning `NA` inside quotes for very short character vectors (#562).,NA
pillar,1,7,7,FALSE,"Pick up `""pillar_focus""` attribute on printing to define focus columns (#549).",NA
pillar,1,8,8,FALSE,"New `ctl_new_rowid_pillar()` generic and default method for customizing the appearance of row IDs (#260, #550, @nbenn).",NA
pillar,1,9,9,FALSE,Fix printing of `Surv` and `Surv2` objects (#561).,NA
pillar,1,10,10,FALSE,Fix wording for corner case `max_extra_cols = 1` (#535).,NA
pillar,1,11,11,FALSE,"Remove excess underlines for `bit64::integer64()` data of different magnitude (#517, #529).",NA
pillar,1,12,12,FALSE,`ctl_new_pillar_list()` is documented on a separate help page (#516).,NA
pillar,1,13,13,FALSE,"Remove outdated detail in `?tbl_sum` (@IndrajeetPatil, #565).",NA
pillar,1,14,14,FALSE,Drop crayon dependency (#559).,NA
pillar,1,15,15,FALSE,Import ellipsis from rlang (#554).,NA
pillar,1,16,16,FALSE,"Skip test that requires lubridate if it's not installed (#505, @MichaelChirico).",NA
pillar,1,17,17,FALSE,"Soft-deprecate `colonnade()`, `squeeze()` and `extra_cols()` (#496).",NA
pillar,1,18,18,FALSE,Require rlang 1.0.1 (#512).,NA
pillar,1,20,20,FALSE,`expect_known_display()` and `is_vector_s3()` are now deprecated,NA
pillar,1,22,22,FALSE,Focus columns specified via the `focus` argument to `tbl_format_setup()` are kept in their original place and shown with,NA
pillar,1,23,23,FALSE,"Update `s3_register()` to use new implementation from rlang, this",NA
pillar,1,24,24,FALSE,Single pillars constructed with `pillar()` use only as much width as,NA
pillar,1,25,25,FALSE,"New `ctl_new_pillar_list()`, supersedes `ctl_new_compound_pillar()`",NA
pillar,1,26,26,FALSE,"If some but not all sub-columns of a data frame or matrix column are shown, the names and types of the remaining columns are displayed in",NA
pillar,1,27,27,FALSE,`num(fixed_exponent = ...)` is now represented with the fixed,NA
pillar,1,28,28,FALSE,`tbl_format_setup()` gains `focus` argument that expects a character vector of column names. Focus columns are moved to the front and,NA
pillar,1,29,29,FALSE,"New `scale_x_num()` and `scale_y_num()`. If a column created with `num()` is used in a ggplot, the x and y scale will be formatted",NA
pillar,1,30,30,FALSE,List columns omit size information if horizontal space is,NA
pillar,1,31,31,FALSE,"If the column title of a backticked column is abbreviated, the",NA
pillar,1,32,32,FALSE,`new_pillar_shaft_simple()` gains `short_formatted` argument that contains the data to be used if horizontal space is insufficient,NA
pillar,1,33,33,FALSE,Default `obj_sum()` method returns abbreviation in attribute of,NA
pillar,1,34,34,FALSE,Extra columns in footer show backticks again if they are,NA
pillar,1,35,35,FALSE,Fixed some cases for combinations of printed width and,NA
pillar,1,38,38,FALSE,Use eager registration via `NAMESPACE` for own methods for classes,NA
pillar,1,39,39,FALSE,"Reworked formatting routine, now using a visitor-based approach with in-order iteration over all pillars. The only visible changes are that usage of free space (in the case of limited space) has slightly",NA
pillar,1,42,42,FALSE,"Replace internal `""pillar_vertical""` class with `glue::as_glue()`",NA
pillar,1,43,43,FALSE,Fix printing for some tibbles where a fixed-width column is followed,NA
pillar,1,47,47,FALSE,Avoid blanket import for lifecycle package for compatibility with,NA
pillar,1,48,48,FALSE,"Options `pillar.print_max`, `pillar.print_min`, `pillar.width` and `pillar.max_extra_cols` are now queried before the corresponding `tibble.` or `dplyr.` options are consulted, the latter will be",NA
pillar,1,49,49,FALSE,"New `pillar.bidi` option. When active, control characters are",NA
pillar,1,50,50,FALSE,The new `pillar.max_footer_lines` option (default: 7) allows controlling the maximum number of footer lines shown. It is applied,NA
pillar,1,51,51,FALSE,"If a column doesn't make use of all horizontal width offered to it,",NA
pillar,1,52,52,FALSE,Improved allocation of free space in multi-tier tables with,NA
pillar,1,53,53,FALSE,"All pillars are shown with their true horizontal extent, irrespective of the indicated `width`. This simplifies the",NA
pillar,1,54,54,FALSE,`num()` gains `extra_sigfig` argument to automatically show more significant figures for numbers of the same magnitude with subtle,NA
pillar,1,55,55,FALSE,`print.tbl()` and `format.tbl()` support the `max_extra_cols` and `max_footer_lines` arguments that override the corresponding options,NA
pillar,1,56,56,FALSE,`print.tbl()` and `format.tbl()` maps the now deprecated `n_extra`,NA
pillar,1,60,60,FALSE,`obj_sum()` no longer calls `type_sum()` for vectors since pillar,NA
pillar,1,61,61,FALSE,Fix documentation on usage of `vctrs::vec_proxy()` and,NA
pillar,1,65,65,FALSE,Bump required versions of ellipsis and vctrs to avoid warning during,NA
pillar,1,67,67,FALSE,New `num()` and `char()` offer a flexible way to customize the,NA
pillar,1,69,69,FALSE,New `format_type_sum.AsIs()` avoids the need to implement your own,NA
pillar,1,70,70,FALSE,`align()` gains `space` argument to control the character used for,NA
pillar,1,71,71,FALSE,Numbers in scientific and decimal notation are formatted with the,NA
pillar,1,72,72,FALSE,Load the debugme package only if the `DEBUGME` environment variable,NA
pillar,1,73,73,FALSE,"More accurate detection if the decimal dot is necessary, and how",NA
pillar,1,74,74,FALSE,Use display width instead of number of characters when truncating,NA
pillar,1,77,77,FALSE,"`format.pillar_shaft_simple()` requires `""na""` attribute and no",NA
pillar,1,79,79,FALSE,Color and formatting can now be reliably turned off by setting the,NA
pillar,1,82,82,FALSE,`obj_sum()` now always returns a string. `pillar_shaft.list()` iterates over its elements and calls `obj_sum()` for each (#137).,NA
pillar,1,83,83,FALSE,"Breaking: `print.pillar()` and `print.pillar_ornament()` now show `<pillar>` `<pillar_ornament>` in the first line (#227, #228).",NA
pillar,1,84,84,FALSE,pillar has been re-licensed as MIT (#215).,NA
pillar,1,85,85,FALSE,New `size_sum()` generic (#239).,NA
pillar,1,86,86,FALSE,"New `ctl_new_pillar()` and `ctl_new_compound_pillar()` used via `print.tbl()`, `format.tbl()` and `tbl_format_setup.tbl()` (#230).",NA
pillar,1,87,87,FALSE,New `new_pillar()` low-level constructor (#230).,NA
pillar,1,88,88,FALSE,New `new_pillar_component()` and `pillar_component()` (#230).,NA
pillar,1,89,89,FALSE,"New articles `vignette(""extending"")` and `vignette(""printing"")` (#251).",NA
pillar,1,90,90,FALSE,"All printing code has been moved from tibble to pillar (#179), including `glimpse()` (#234). This concentrates the printing code in one package and allows for better extensibility.",NA
pillar,1,91,91,FALSE,"New experimental generics `tbl_format_setup()`, `tbl_format_header()`, `tbl_format_body()` and `tbl_format_footer()` (#179).",NA
pillar,1,92,92,FALSE,Move definition of `tbl_sum()` to this package (#179).,NA
pillar,1,93,93,FALSE,"Improve formatting for `""Surv""` and `""Surv2""` classes from the survival package (#199).",NA
pillar,1,94,94,FALSE,Vectors of the `vctrs_unspecified()` class are formatted better (#256).,NA
pillar,1,95,95,FALSE,Arrays are now formatted by showing only their first slice (#142).,NA
pillar,1,96,96,FALSE,Avoid wrapping extra column names with spaces (#254).,NA
pillar,1,97,97,FALSE,"Now using debugme to simplify understand the complex control flow, see `vignette(""debugme"")` (#248).",NA
pillar,1,98,98,FALSE,New `format.pillar_ornament()` (#228).,NA
pillar,1,99,99,FALSE,Using testthat 3e (#218).,NA
pillar,1,100,100,FALSE,Avoid pillar.bold option in most tests (#216).,NA
pillar,1,101,101,FALSE,Change internal storage format for `colonnade()` and `extra_cols()` (#204).,NA
pillar,1,104,104,FALSE,"New `pillar.min_chars` option allows controlling the minimum number of characters shown for a character column (#178, @statsmaths).",NA
pillar,1,105,105,FALSE,`bit64::integer64()` columns are now formatted the same way as numeric columns (#175).,NA
pillar,1,106,106,FALSE,"New `align()` to support easy alignment of strings within a character vector (existing function exported by @davidchall, #185).",NA
pillar,1,107,107,FALSE,"`pillar_shaft()`, `format_type_sum()` and `extra_cols()` issue a warning if dots are unused.",NA
pillar,1,108,108,FALSE,`new_pillar_title()` and `new_pillar_type()` warn if `...` is not empty.,NA
pillar,1,109,109,FALSE,Use lifecycle package.,NA
pillar,1,110,110,FALSE,Remove compatibility code for R \< 3.3.,NA
pillar,1,111,111,FALSE,`obj_sum()` uses `vctrs::vec_size()` internally.,NA
pillar,1,112,112,FALSE,`is_vector_s3.default()` is soft-deprecated and no longer used. Please ensure that `vctrs::vec_is()` is `TRUE` for your class.,NA
pillar,1,113,113,FALSE,Rely on vctrs for type abbreviations.,NA
pillar,1,114,114,FALSE,`new_pillar_shaft_simple()` gains `na` argument to control appearance of `NA` values.,NA
pillar,1,115,115,FALSE,String columns are quoted if at least one value needs quotes (#171).,NA
pillar,1,116,116,FALSE,Apply subtle style to `list_of` columns (#172).,NA
pillar,1,117,117,FALSE,Fix formatting if mantissa is very close to 1 (#174).,NA
pillar,1,118,118,FALSE,Use `as.character()` instead of `as_character()`.,NA
pillar,1,119,119,FALSE,Remove compatibility with testthat \< 2.0.0.,NA
pillar,1,120,120,FALSE,"List columns are shown with their perceived dimensions, which may be different from those stored in the `""dim""` attribute. Regression introduced in 1.4.0 (#167).",NA
pillar,1,121,121,FALSE,Add ellipsis to `vec_ptype_abbr()` method.,NA
pillar,1,122,122,FALSE,More careful specification of minimum package versions for the,NA
pillar,1,123,123,FALSE,Fix `type_sum.vctrs_vctr()` that also led to a NOTE in,NA
pillar,1,124,124,FALSE,"Resolve `vec_is()` at runtime instead of during `.onLoad()` (#163,",NA
pillar,1,126,126,FALSE,`type_sum()` forwards to `vctrs::vec_ptype_abbr()` (#134). This makes sure that `list_of` columns (for values of the same type) are properly displayed. The value returned for `factor` and `complex`,NA
pillar,1,127,127,FALSE,The `class` argument to `new_pillar_shaft()` deprecates the existing `subclass` argument. Passing a `subclass` argument leads to a,NA
pillar,1,128,128,FALSE,Removed extra space for pillars with a negative value of lower,NA
pillar,1,129,129,FALSE,0-col tibble and matrix columns are now formatted with a capital,NA
pillar,1,130,130,FALSE,`squeeze()` is now faster (because the width computation in `pillar_shaft.numeric()` now uses more arithmetics instead of string concatenation). Further speedups may require implementation of,NA
pillar,1,131,131,FALSE,"Styling output is faster: an expensive check for availability of colored output is carried out only once per call to `colonnade()`,",NA
pillar,1,133,133,FALSE,"Only check native output on Windows, due to subtle differences when",NA
pillar,1,136,136,FALSE,Don't add quotes for pillars formatted with their `format()` method,NA
pillar,1,139,139,FALSE,"Unknown data types are formatted using `format()`, not `as.character()` (#120).",NA
pillar,1,140,140,FALSE,"Multi-tier colonnades can always fill the last tier, even if the width isn't a proper multiple of `getOption(""width"")`. (Example: `options(width = 80, tibble.width = 200)` will print a wide tibble in three tiers, each 80 characters wide, with a total width of 240 characters.)",NA
pillar,1,141,141,FALSE,"Fixed mixed formatting (showing some pillars with maximum, and some with minimum width). If a pillar's minimum width is smaller than `getOption(""width"")`, it is shown nevertheless, abbreviated with dots if necessary.",NA
pillar,1,143,143,FALSE,"Printing large multi-tier colonnades is much faster, the code that distributes pillars over tiers uses a much simpler and much faster algorithm (tidyverse/tibble#422).",NA
pillar,1,144,144,FALSE,"Printing is now faster overall, because less work is done for formatting in ""subtle"" style (gray of a fixed level), and because `fansi::strip_sgr()` is used instead of `crayon::strip_style()`.",NA
pillar,1,145,145,FALSE,Slightly faster printing of colonnades by reusing an intermediate result.,NA
pillar,1,146,146,FALSE,`pillar()` no longer adds backticks if `title` is non-syntactic.,NA
pillar,1,147,147,FALSE,"`colonnade()` supports data frames and matrices. When printing, each sub-column is shown individually, using a title that resembles the syntax used to access it. Also supports recursively nested data frames (with data frame or matrix columns).",NA
pillar,1,148,148,FALSE,Added fuzz tests for character colonnades of varying widths.,NA
pillar,1,149,149,FALSE,Use `fansi::substr_ctl()` in favor of `crayon::col_substr()`.,NA
pillar,1,154,154,FALSE,"Whole numbers are printed without a decimal dot again. Numbers that are the result of a whole number divided by a power of 10 (subject to a tolerance to account for floating-point imprecision) are shown without trailing decimal zeros, even if these zeros are significant",NA
pillar,1,155,155,FALSE,New `new_pillar_title()` and `new_pillar_type()` to support,NA
pillar,1,156,156,FALSE,New `format_type_sum()` generic that allows overriding the,NA
pillar,1,157,157,FALSE,The `digits.secs` option is respected when computing the width for,NA
pillar,1,158,158,FALSE,Turned off using subtle style for digits that are considered insignificant. Negative numbers are shown all red. Set the new option `pillar.subtle_num` to `TRUE` to turn it on again (default:,NA
pillar,1,161,161,FALSE,"Groups of three digits are now underlined, starting with the fourth before/after the decimal point. This gives a better idea of the",NA
pillar,1,163,163,FALSE,The decimal dot is now always printed for numbers of type `numeric`. Trailing zeros are not shown anymore if all displayed numbers are,NA
pillar,1,164,164,FALSE,Decimal values longer than 13 characters always print in scientific,NA
pillar,1,165,165,FALSE,"Numeric values with a `""class""` attribute (e.g., `Duration` from lubridate) are now formatted using `format()` if the",NA
pillar,1,166,166,FALSE,Very small numbers (like `1e-310`) are now printed correctly,NA
pillar,1,167,167,FALSE,Fix representation of right-hand side for,NA
pillar,1,168,168,FALSE,Fix computation of significant figures for numbers with absolute,NA
pillar,1,169,169,FALSE,"New styling helper `style_subtle_num()`, formatting depends on the",NA
pillar,1,170,170,FALSE,"`NA` values are now shown in plain red, without changing the",NA
pillar,1,171,171,FALSE,"New options to control the output, with defaults that match the current behavior unless stated otherwise:",NA
pillar,2,171,172,FALSE,"* `pillar.sigfig` to control the number of significant digits, for highlighting and truncation (#72),","New options to control the output, with defaults that match the current behavior unless stated otherwise:"
pillar,2,171,173,FALSE,"* `pillar.subtle` to specify if insignificant digits should be printed in gray (#72),","New options to control the output, with defaults that match the current behavior unless stated otherwise:"
pillar,2,171,174,FALSE,"* `pillar.neg` to specify if negative digits should be printed in red,","New options to control the output, with defaults that match the current behavior unless stated otherwise:"
pillar,2,171,175,FALSE,"* `pillar.bold` to specify if column headers should be printed in bold (default: `FALSE`, #76),","New options to control the output, with defaults that match the current behavior unless stated otherwise:"
pillar,2,171,176,FALSE,"* `pillar.min_title_chars` to specify the minimum number of characters to display for each column name (default: 15 characters, #75).","New options to control the output, with defaults that match the current behavior unless stated otherwise:"
pillar,1,177,177,FALSE,"Shortened abbreviations for types: complex: cplx -\> cpl, function:",NA
pillar,1,178,178,FALSE,Date columns now show sub-seconds if the `digits.secs` option is set,NA
purrr,1,1,1,FALSE,`cross()` and all its variants have been deprecated in favour of `tidyr::expand_grid()`. These functions were slow and buggy and we no longer think they are the right approach to solving this problem. See #768 for more information.,NA
purrr,1,2,2,FALSE,"`update_list()` (#858) and `rerun()` (#877), and the use of tidyselect with `map_at()` and friends (#874) have been deprecated. These functions use some form of non-standard evaluation which we now believe is a poor fit for purrr.",NA
purrr,1,3,3,FALSE,The `lift_*` family of functions has been superseded. We no longer believe these to be a good fit for purrr because they rely on a style of function manipulation that is very uncommon in R code (#871).,NA
purrr,1,4,4,FALSE,`*_raw()` have been deprecated because they are of limited use and you can now use `map_vec()` instead (#903).,NA
purrr,1,5,5,FALSE,"`prepend()`, `rdunif()`, `rbernoulli()`, `when()`, and `list_along()` have all been deprecated (#925). It's now clear that they don't align with the core purpose of purrr.",NA
purrr,1,6,6,FALSE,`splice()` is deprecated because we no longer believe that automatic splicing makes for good UI. Instead use `list2()` + `!!!` or `list_flatten()` (#869).,NA
purrr,1,7,7,FALSE,"`flatten()` and friends are superseded in favour of `list_flatten()`, `list_c()`, `list_cbind()`, and `list_rbind()`.",NA
purrr,1,8,8,FALSE,`*_dfc()` and `*_dfr()` have been superseded in favour of using the appropriate map function along with `list_rbind()` or `list_cbind()` (#912).,NA
purrr,1,9,9,FALSE,"`simplify()`, `simplify_all()`, and `as_vector()` have been deprecated in favour of `list_simplify()`. It provides a more consistent definition of simplification (#900).",NA
purrr,1,10,10,FALSE,`transpose()` has been deprecated in favour of `list_transpose()` (#875). It has built-in simplification.,NA
purrr,1,11,11,FALSE,"`as_function()`, `at_depth()`, and the `...f` argument to `partial()` are no longer supported. They have been defunct for quite some time.",NA
purrr,1,12,12,FALSE,"Soft deprecated functions: `%@%`, `reduce_right()`, `reduce2_right()`, `accumulate_right()` are now fully deprecated. Similarly, the `.lazy`, `.env`, and `.first` arguments to `partial()`, and the `.right` argument to `detect()` and `detect_index()` are fully deprecated. Removing elements with `NULL` in `list_modify()` and `list_merge()` is now fully deprecated.",NA
purrr,1,13,13,FALSE,`is_numeric()` and `is_scalar_numeric()` have been removed. They have been deprecated since purrr 0.2.3 (Sep 2017).,NA
purrr,1,14,14,FALSE,"`invoke_*()` is now deprecated. It was superseded in 0.3.0 (Jan 2019) and 3.5 years later, we have decided to deprecate it as part of the API refinement in the 1.0.0 release.",NA
purrr,1,15,15,FALSE,`map_call()` has been removed. It was made defunct in 0.3.0.,NA
purrr,1,16,16,FALSE,`*_at()` can now take a function (or formula) that's passed the vector of element names and returns the elements to select.,NA
purrr,1,17,17,FALSE,"New `map_vec()`, `map2_vec()`, and `pmap_vec()` work on all types of vectors, extending `map_lgl()`, `map_int()`, and friends so that you can easily work with dates, factors, date-times and more (#435).",NA
purrr,1,18,18,FALSE,New `keep_at()` and `discard_at()` that work like `keep()` and `discard()` but operation on element names rather than element contents (#817).,NA
purrr,1,19,19,FALSE,Some mapping functions have now a `.progress` argument to create a progress bar. See `?progress_bars` (#149).,NA
purrr,1,20,20,FALSE,purrr is now licensed as MIT (#805).,NA
purrr,1,21,21,FALSE,"`modify()`, `modify_if()`, `modify_at()`, and `modify2()` are no longer generics. We have discovered a simple implementation that no longer requires genericity and methods were only provided by a very small number of packages (#894).",NA
purrr,1,22,22,FALSE,"purrr now uses the base pipe (`|>`) and anonymous function short hand (`\(x)`), in all examples. This means that examples will no longer work in R 4.0 and earlier so in those versions of R, the examples are automatically converted to a regular section with a note that they might not work (#936).",NA
purrr,1,23,23,FALSE,"When map functions fail, they now report the element they failed at (#945).",NA
purrr,1,24,24,FALSE,New `modify_tree()` for recursively modifying nested data structures (#720).,NA
purrr,1,25,25,FALSE,"New `list_c()`, `list_rbind()`, and `list_cbind()` make it easy to `c()`, `rbind()`, or `cbind()` all of the elements in a list.",NA
purrr,1,26,26,FALSE,New `list_simplify()` reduces a list of length-1 vectors to a simpler atomic or S3 vector (#900).,NA
purrr,1,27,27,FALSE,New `list_transpose()` which automatically simplifies if possible (#875).,NA
purrr,1,28,28,FALSE,"`accumulate()` and `accumulate2()` now both simplify the output if possible using vctrs. New arguments `simplify` and `ptype` allow you to control the details of simplification (#774, #809).",NA
purrr,1,29,29,FALSE,"`_lgl()`, `_int()`, `_int()`, and `_dbl()` now use the same (strict) coercion methods as vctrs (#904). This means that:",NA
purrr,2,29,30,FALSE,"* `map_chr(TRUE, identity)`, `map_chr(0L, identity)`, and `map_chr(1L, identity)` are deprecated because we now believe that converting a logical/integer/double to a character vector should require an explicit coercion.","`_lgl()`, `_int()`, `_int()`, and `_dbl()` now use the same (strict) coercion methods as vctrs (#904). This means that:"
purrr,2,29,31,FALSE,"* `map_int(1.5, identity)` now fails because we believe that silently truncating doubles to integers is dangerous. But note that `map_int(1, identity)` still works since no numeric precision is lost.","`_lgl()`, `_int()`, `_int()`, and `_dbl()` now use the same (strict) coercion methods as vctrs (#904). This means that:"
purrr,2,29,32,FALSE,"* `map_int(c(TRUE, FALSE), identity)`, `map_dbl(c(TRUE, FALSE), identity)`, `map_lgl(c(1L, 0L), identity)` and `map_lgl(c(1, 0), identity)` now succeed because 1/TRUE and 0/FALSE should be interchangeable.","`_lgl()`, `_int()`, `_int()`, and `_dbl()` now use the same (strict) coercion methods as vctrs (#904). This means that:"
purrr,1,33,33,FALSE,"`map2()`, `modify2()`, and `pmap()` now use tidyverse recycling rules where vectors of length 1 are recycled to any size but all others must have the same length (#878).",NA
purrr,1,34,34,FALSE,`map2()` and `pmap()` now recycle names of their first input if needed (#783).,NA
purrr,1,35,35,FALSE,"`modify()`, `modify_if()`, and `modify_at()` have been reimplemented using vctrs principles. This shouldn't have an user facing impact, but it does make the implementation much simpler.",NA
purrr,1,36,36,FALSE,`vec_depth()` is now `pluck_depth()` and works with more types of input (#818).,NA
purrr,1,37,37,FALSE,`pluck()` now requires indices to be length 1 (#813). It also now reports the correct type if you supply an unexpected index.,NA
purrr,1,38,38,FALSE,"`pluck()` now accepts negative integers, indexing from the right (#603).",NA
purrr,1,39,39,FALSE,`pluck()` and `chuck()` now fail if you provide named inputs to ... (#788).,NA
purrr,1,40,40,FALSE,`pluck()` no longer replaces 0-length vectors with `default`; it now only applies absent and `NULL` components.,NA
purrr,1,41,41,FALSE,`pluck<-`/`assign_in()` can now modify non-existing locations (#704).,NA
purrr,1,42,42,FALSE,`pluck<-`/`assign_in()` now sets elements to `NULL` rather than removing them (#636). Now use the explicit `zap()` if you want to remove elements.,NA
purrr,1,43,43,FALSE,"`modify()`, `modify2()`, and `modify_if()` now correctly handle `NULL`s in replacement values (#655, #746, #753).",NA
purrr,1,44,44,FALSE,`list_modify()`'s interface has been standardised. Modifying with `NULL` now always creates a `NULL` in the output (#810),NA
purrr,1,45,45,FALSE,New `list_update()` which is similar to `list_modify()` but doesn't work recursively (#822).,NA
purrr,1,46,46,FALSE,`list_modify()` no longer recurses into data frames (and other objects built on top of lists that are fundamentally non-list like) (#810).,NA
purrr,1,47,47,FALSE,`modify()` no longer supports modifying calls or pairlists.,NA
purrr,1,48,48,FALSE,`modify_depth()` is no longer a generic. This makes it more consistent with `map_depth()`.,NA
purrr,1,49,49,FALSE,"`map_depth()` now uses `is.list()` to determine if there's more depth to recurse into, as opposed to `!is_atomic(.x)` (#920).",NA
purrr,1,50,50,FALSE,"`as_mapper()` is now around twice as fast when used with character, integer, or list (#820).",NA
purrr,1,51,51,FALSE,`possibly()` now defaults `otherwise` to NULL.,NA
purrr,1,52,52,FALSE,"`modify_if(.else)` is now actually evaluated for atomic vectors (@mgirlich, #701).",NA
purrr,1,53,53,FALSE,"`lmap()` now always returns a list, even if `.x` is a data frame. This makes it more consistent with other functions in the `map` family.",NA
purrr,1,54,54,FALSE,`lmap_if()` correctly handles `.else` functions (#847).,NA
purrr,1,55,55,FALSE,"`every()` now correctly propagates missing values using the same rules as `&&` (#751). Internally, it has become a wrapper around `&&`. This makes it consistent with `&&` and also with `some()` which has always been a wrapper around `||` with the same propagation rules.",NA
purrr,1,56,56,FALSE,"`every()` and `some()` now properly check the return value of their predicate function. It must now return a `TRUE`, `FALSE`, or `NA`.",NA
purrr,1,57,57,FALSE,Greatly improved performance of functions created with `partial()` (#715). Their invocation is now as fast as for functions creating manually.,NA
purrr,1,58,58,FALSE,`partial()` no longer inlines the function in the call stack. This fixes issues when `partial()` is used with `lm()` for instance (#707).,NA
purrr,1,59,59,FALSE,"Fixed issue in `list_modify()` that prevented lists from being removed with `zap()` (@adamroyjones, #777).",NA
purrr,1,60,60,FALSE,"Added documentation for exporting functions created with purrr adverb (@njtierney, #668). See `?faq-adverbs-export`.",NA
purrr,1,61,61,FALSE,"Added `none()`, which tests that a predicate is false for all elements (the opposite of `every()`) (@AliciaSchep, #735).",NA
purrr,1,62,62,FALSE,Maintenance release.,NA
purrr,1,63,63,FALSE,"The documentation of `map()` and its variants has been improved by @surdina as part of the Tidyverse Developer Day (@surdina, #671).",NA
purrr,1,64,64,FALSE,purrr now depends on R 3.2 or greater.,NA
purrr,1,66,66,FALSE,`reduce()` now forces arguments (#643).,NA
purrr,1,67,67,FALSE,Fixed an issue in `partial()` with generic functions (#647).,NA
purrr,1,68,68,FALSE,`negate()` now works with generic functions and functions with early returns.,NA
purrr,1,69,69,FALSE,"`compose()` now works with generic functions again (#629, #639). Its set of unit tests was expanded to cover many edge cases.",NA
purrr,1,70,70,FALSE,"`prepend()` now works with empty lists (@czeildi, #637)",NA
purrr,1,71,71,FALSE,"`modify()` and variants are now wrapping `[[<-` instead of `[<-`. This change increases the genericity of these functions but might cause different behaviour in some cases. For instance, the `[[<-` for data frames is stricter than the `[<-` method and might throw errors instead of warnings. This is the case when assigning a longer vector than the number of rows. `[<-` truncates the vector with a warning, `[[<-` fails with an error (as is appropriate).",NA
purrr,1,72,72,FALSE,`modify()` and variants now return the same type as the input when the input is an atomic vector.,NA
purrr,1,73,73,FALSE,"All functionals taking predicate functions (like `keep()`, `detect()`, `some()`) got stricter. Predicate functions must now return a single `TRUE` or `FALSE`. This change is meant to detect problems early with a more meaningful error message.",NA
purrr,1,74,74,FALSE,"New `chuck()` function. This is a strict variant of `pluck()` that throws errors when an element does not exist instead of returning `NULL` (@daniel-barnett, #482).",NA
purrr,1,75,75,FALSE,New `assign_in()` and `pluck<-` functions. They modify a data structure at an existing pluck location.,NA
purrr,1,76,76,FALSE,New `modify_in()` function to map a function at a pluck location.,NA
purrr,1,77,77,FALSE,`pluck()` now dispatches properly with S3 vectors. The vector class must implement a `length()` method for numeric indexing and a `names()` method for string indexing.,NA
purrr,1,78,78,FALSE,`pluck()` now supports primitive functions (#404).,NA
purrr,1,79,79,FALSE,New `.else` argument for `map_if()` and `modify_if()`. They take an alternative function that is mapped over elements of the input for which the predicate function returns `FALSE` (#324).,NA
purrr,1,80,80,FALSE,"`reduce()`, `reduce2()`, `accumulate()`, and `accumulate2()` now terminate early when the function returns a value wrapped with `done()` (#253). When an empty `done()` is returned, the value at the last iteration is returned instead.",NA
purrr,1,81,81,FALSE,"Functions taking predicates (`map_if()`, `keep()`, `some()`, `every()`, `keep()`, etc) now fail with an informative message when the return value is not `TRUE` or `FALSE` (#470). This is a breaking change for `every()` and `some()` which were documented to be more liberal in the values they accepted as logical (any vector was considered `TRUE` if not a single `FALSE` value, no matter its length). These functions signal soft-deprecation warnings instead of a hard failure. Edit (purr 0.4.0): `every()` and `some()` never issued deprecation warnings because of a technical issue. We didn't fix the warnings in the end, and using predicates returning `NA` is no longer considered deprecated. If you need to use `every()` and `some()` in contexts where `NA` propagation is unsafe, e.g. in `if ()` conditions, make sure to use safe predicate functions like `is_true()`.",NA
purrr,1,82,82,FALSE,"`modify()` and variants are now implemented using `length()`, `[[`, and `[[<-` methods. This implementation should be compatible with most vector classes.",NA
purrr,1,83,83,FALSE,New `modify2()` and `imodify()` functions. These work like `map()` and `imap()` but preserve the type of `.x` in the return value.,NA
purrr,1,84,84,FALSE,"`pmap()` and `pwalk()` now preserve class for inputs of `factor`, `Date`, `POSIXct` and other atomic S3 classes with an appropriate `[[` method (#358, @mikmart).",NA
purrr,1,85,85,FALSE,"`modify()`, `modify_if()` and `modify_at()` now preserve the class of atomic vectors instead of promoting them to lists. New S3 methods are provided for character, logical, double, and integer classes (@t-kalinowski, #417).",NA
purrr,1,86,86,FALSE,"By popular request, `at_depth()` has been brought back as `map_depth()`. Like `modify_depth()`, it applies a function at a specified level of a data structure. However, it transforms all traversed vectors up to `.depth` to bare lists (#381).",NA
purrr,1,87,87,FALSE,"`map_at()`, `modify_at()` and `lmap_at()` accept negative values for `.at`, ignoring elements at those positions.",NA
purrr,1,88,88,FALSE,`map()` and `modify()` now work with calls and pairlists (#412).,NA
purrr,1,89,89,FALSE,"`modify_depth()` now modifies atomic leaves as well. This makes `modify_depth(x, 1, fn)` equivalent to `modify(x, fn)` (#359).",NA
purrr,1,90,90,FALSE,New `accumulate2()` function which is to `accumulate()` what `reduce2()` is to `reduce()`.,NA
purrr,1,91,91,FALSE,"New `rate_backoff()` and `rate_delay()` functions to create rate objects. You can pass rates to `insistently()`, `slowly()`, or the lower level function `rate_sleep()`. This will cause a function to wait for a given amount of time with exponential backoff (increasingly larger waiting times) or for a constant delay.",NA
purrr,1,92,92,FALSE,"`insistently(f)` modifies a function, `f`, so that it is repeatedly called until it succeeds (@richierocks, @ijlyttle). `slowly()` modifies a function so that it waits for a given amount of time between calls.",NA
purrr,1,93,93,FALSE,"`partial()` now supports empty `... =` argument to specify the position of future arguments, relative to partialised ones. This syntax is borrowed from (and implemented with) `rlang::call_modify()`. To prevent partial matching of `...` on `...f`, the latter has been renamed to `.f`, which is more consistent with other purrr function signatures.",NA
purrr,1,94,94,FALSE,"`partial()` now supports quasiquotation. When you unquote an argument, it is evaluated only once at function creation time. This is more flexible than the `.lazy` argument since you can control the timing of evaluation for each argument. Consequently, `.lazy` is soft-deprecated (#457).",NA
purrr,1,95,95,FALSE,Fixed an infinite loop when partialised function is given the same name as the original function (#387).,NA
purrr,1,96,96,FALSE,`partial()` now calls `as_closure()` on primitive functions to ensure argument matching (#360).,NA
purrr,1,97,97,FALSE,The `.lazy` argument of `partial()` is soft-deprecated in favour of quasiquotation:,NA
purrr,1,97,98,TRUE,"```
# Before
partial(fn, u = runif(1), n = rnorm(1), .lazy = FALSE)

# After
partial(fn, u = !!runif(1), n = !!rnorm(1))  # All constant
partial(fn, u = !!runif(1), n = rnorm(1))    # First constant
```",NA
purrr,1,98,99,FALSE,The tibble package is now in Suggests rather than Imports. This brings the hard dependency of purrr to just rlang and magrittr.,NA
purrr,1,99,100,FALSE,`compose()` now returns an identity function when called without inputs.,NA
purrr,1,100,101,FALSE,"Functions created with `compose()` now have the same formal parameters as the first function to be called. They also feature a more informative print method that prints all composed functions in turn (@egnha, #366).",NA
purrr,1,101,102,FALSE,"New `.dir` argument in `compose()`. When set to `""forward""`, the functions are composed from left to right rather than right to left.",NA
purrr,1,102,103,FALSE,"`list_modify()` now supports the `zap()` sentinel (reexported from rlang) to remove elements from lists. Consequently, removing elements with the ambiguous sentinel `NULL` is soft-deprecated.",NA
purrr,1,103,104,FALSE,"The requirements of `list_modify()` and `list_merge()` have been relaxed. Previously it required both the modified lists and the inputs to be either named or unnamed. This restriction now only applies to inputs in `...`. When inputs are all named, they are matched to the list by name. When they are all unnamed, they are matched positionally. Otherwise, this is an error.",NA
purrr,1,104,105,FALSE,Fixed ordering of names returned by `accumulate_right()` output. They now correspond to the order of inputs.,NA
purrr,1,105,106,FALSE,Fixed names of `accumulate()` output when `.init` is supplied.,NA
purrr,1,106,107,FALSE,"`compose()` now supports composition with lambdas (@ColinFay, #556)",NA
purrr,1,107,108,FALSE,Fixed a `pmap()` crash with empty lists on the Win32 platform (#565).,NA
purrr,1,108,109,FALSE,"`modify_depth` now has `.ragged` argument evaluates correctly to `TRUE` by default when `.depth < 0` (@cderv, #530).",NA
purrr,1,109,110,FALSE,"`accumulate()` now inherits names from their first input (@AshesITR, #446).",NA
purrr,1,110,111,FALSE,"`attr_getter()` no longer uses partial matching. For example, if an `x` object has a `labels` attribute but no `label` attribute, `attr_getter(""label"")(x)` will no longer extract the `labels` attribute (#460, @huftis).",NA
purrr,1,111,112,FALSE,`flatten_dfr()` and `flatten_dfc()` now aborts if dplyr is not installed. (#454),NA
purrr,1,112,113,FALSE,`imap_dfr()` now works with `.id` argument is provided (#429),NA
purrr,1,113,114,FALSE,"`list_modify()`, `update_list()` and `list_merge()` now handle duplicate duplicate argument names correctly (#441, @mgirlich).",NA
purrr,1,114,115,FALSE,"`map_raw`, `imap_raw`, `flatten_raw`, `invoke_map_raw`, `map2_raw` and `pmap_raw` added to support raw vectors. (#455, @romainfrancois)",NA
purrr,1,115,116,FALSE,`flatten()` now supports raw and complex elements.,NA
purrr,1,116,117,FALSE,"`array_branch()` and `array_tree()` now retain the `dimnames()` of the input array (#584, @flying-sheep)",NA
purrr,1,117,118,FALSE,`pluck()` no longer flattens lists of arguments. You can still do it manually with `!!!`. This change is for consistency with other dots-collecting functions of the tidyverse.,NA
purrr,1,118,119,FALSE,"`map_at()`, `lmap_at()` and `modify_at()` now supports selection using `vars()` and `tidyselect` (@ColinFay, #608). Note that for now you need to import `vars()` from dplyr or call it qualified like `dplyr::vars()`. It will be reexported from rlang in a future release.",NA
purrr,1,119,120,FALSE,"`detect()` now has a .default argument to specify the value returned when nothing is detected (#622, @ColinFay).",NA
purrr,1,120,121,FALSE,`reduce_right()` is soft-deprecated and replaced by a new `.dir` argument of `reduce()`:,NA
purrr,1,120,122,TRUE,"```
# Before:
reduce_right(1:3, f)

# After:
reduce(1:3, f, .dir = ""backward"")
```",NA
purrr,1,120,122,FALSE,"Note that the details of the computation have changed. Whereas `reduce_right()` computed `f(f(3, 2), 1)`, it now computes `f(1, f(2, 3))`. This is the standard way of reducing from the right. To produce the exact same reduction as `reduce_right()`, simply reverse your vector and use a left reduction:",NA
purrr,1,120,123,TRUE,"```
# Before:
reduce_right(1:3, f)

# After:
reduce(rev(1:3), f)
```",NA
purrr,1,121,124,FALSE,`reduce2_right()` is soft-deprecated without replacement. It is not clear what algorithmic properties should a right reduction have in this case. Please reach out if you know about a use case for a right reduction with a ternary function.,NA
purrr,1,122,125,FALSE,"`accumulate_right()` is soft-deprecated and replaced by the new `.dir` argument of `accumulate()`. Note that the algorithm has slightly changed: the accumulated value is passed to the right rather than the left, which is consistent with a right reduction.",NA
purrr,1,122,126,TRUE,"```
# Before:
accumulate_right(1:3, f)

# After:
accumulate(1:3, f, .dir = ""backward"")
```",NA
purrr,1,123,127,FALSE,The `.right` argument of `detect()` and `detect_index()` is soft-deprecated and renamed to `.dir` for consistency with other functions and clarity of the interface.,NA
purrr,1,123,128,TRUE,"```
# Before
detect(x, f, .right = TRUE)

# After
detect(x, f, .dir = ""backward"")
```",NA
purrr,1,124,129,FALSE,The `.lazy` argument of `partial()` is soft-deprecated in favour of quasiquotation.,NA
purrr,1,125,130,FALSE,We had to rename `...f` to `.f` in `partial()` in order to support `... =` argument (which would otherwise partial-match on `...f`). This also makes `partial()` more consistent with other purrr function signatures.,NA
purrr,1,126,131,FALSE,"`invoke()` is retired in favour of the `exec()` function, reexported from rlang. `exec()` evaluates a function call built from its inputs and supports tidy dots:",NA
purrr,1,126,132,TRUE,"```
# Before:
invoke(mean, list(na.rm = TRUE), x = 1:10)

# After
exec(mean, 1:10, !!!list(na.rm = TRUE))
```",NA
purrr,1,126,132,FALSE,Note that retired functions are not removed from the package and will be maintained undefinitely.,NA
purrr,1,127,133,FALSE,"`invoke_map()` is retired without replacement because it is more complex to understand than the corresponding code using `map()`, `map2()` and `exec()`:",NA
purrr,1,127,134,TRUE,"```
# Before:
invoke_map(fns, list(args))
invoke_map(fns, list(args1, args2))

# After:
map(fns, exec, !!!args)
map2(fns, list(args1, args2), function(fn, args) exec(fn, !!!args))
```",NA
purrr,1,128,135,FALSE,"`%@%` is soft-deprecated, please use the operator exported in rlang instead. The latter features an interface more consistent with `@` as it uses NSE, supports S4 fields, and has an assignment variant.",NA
purrr,1,129,136,FALSE,Removing elements from lists using `NULL` in `list_modify()` is soft-deprecated. Please use the new `zap()` sentinel reexported from rlang instead:,NA
purrr,1,129,137,TRUE,"```
# Before:
list_modify(x, foo = NULL)

# After:
list_modify(x, foo = zap())
```",NA
purrr,1,129,137,FALSE,"This change is motivated by the ambiguity of `NULL` as a deletion sentinel because `NULL` is also a valid value in lists. In the future, `NULL` will set an element to `NULL` rather than removing the element.",NA
purrr,1,130,138,FALSE,"`rerun()` is now in the questioning stage because we are no longer convinced NSE functions are a good fit for purrr. Also, `rerun(n, x)` can just as easily be expressed as `map(1:n, ~ x)` (with the added benefit of being passed the current index as argument to the lambda).",NA
purrr,1,131,139,FALSE,`map_call()` is defunct.,NA
purrr,1,134,142,FALSE,"If `reduce()` fails with this message: `` Error: `.x` is empty, and no `.init` supplied ``, this is because `reduce()` now returns `.init` when `.x` is empty. Fix the problem by supplying an appropriate argument to `.init`, or by providing special behaviour when `.x` has length 0.",NA
purrr,1,135,143,FALSE,"The type predicates have been migrated to rlang. Consequently the `bare-type-predicates` documentation topic is no longer in purrr, which might cause a warning if you cross-reference it.",NA
purrr,1,136,144,FALSE,"`order_by()`, `sort_by()` and `split_by()` have been removed. `order_by()` conflicted with `dplyr::order_by()` and the complete family doesn't feel that useful. Use tibbles instead (#217).",NA
purrr,1,137,145,FALSE,`contains()` has been renamed to `has_element()` to avoid conflicts with dplyr (#217).,NA
purrr,1,138,148,FALSE,"`as_function()` is now `as_mapper()` because it is a tranformation that makes sense primarily for mapping functions, not in general (#298). `.null` has been renamed to `.default` to better reflect its intent (#298). `.default` is returned whenever an element is absent or empty (#231, #254). `as_mapper()` sanitises primitive functions by transforming them to closures with standardised argument names (using `rlang::as_closure()`). For instance `+` is transformed to `function(.x, .y) .x + .y`. This results in proper argument matching so that `map(1:10, partial(`-`, .x = 5))` produces `list(5 - 1, 5 - 2, ...)`.",NA
purrr,1,139,149,FALSE,"Recursive indexing can now extract objects out of environments (#213) and S4 objects (#200), as well as lists.",NA
purrr,1,140,150,FALSE,"`attr_getter()` makes it possible to extract from attributes like `map(list(iris, mtcars), attr_getter(""row.names""))`.",NA
purrr,1,141,151,FALSE,"The argument list for formula-functions has been tweaked so that you can refer to arguments by position with `..1`, `..2`, and so on. This makes it possible to use the formula shorthand for functions with more than two arguments (#289).",NA
purrr,1,142,152,FALSE,"`possibly()`, `safely()` and friends no longer capture interrupts: this means that you can now terminate a mapper using one of these with Escape or Ctrl + C (#314)",NA
purrr,1,143,153,FALSE,"All map functions now treat `NULL` the same way as an empty vector (#199), and return an empty vector if any input is an empty vector.",NA
purrr,1,144,154,FALSE,All `map()` functions now force their arguments in the same way that base R does for `lapply()` (#191). This makes `map()` etc easier to use when generating functions.,NA
purrr,1,145,155,FALSE,"A new family of ""indexed"" map functions, `imap()`, `imap_lgl()` etc, provide a short-hand for `map2(x, names(x))` or `map2(x, seq_along(x))` (#240).",NA
purrr,1,146,156,FALSE,The data frame suffix `_df` has been (soft) deprecated in favour of `_dfr` to more clearly indicate that it's a row-bind. All variants now also have a `_dfc` for column binding (#167). (These will not be terribly useful until `dplyr::bind_rows()`/`dplyr::bind_cols()` have better semantics for vectors.),NA
purrr,1,147,157,FALSE,`at_depth()` has been renamed to `modify_depth()`.,NA
purrr,1,148,158,FALSE,"`modify_depth()` gains new `.ragged` argument, and negative depths are now computed relative to the deepest component of the list (#236).",NA
purrr,1,149,159,FALSE,`auto_browse(f)` returns a new function that automatically calls `browser()` if `f` throws an error (#281).,NA
purrr,1,150,160,FALSE,`vec_depth()` computes the depth (i.e. the number of levels of indexing) or a vector (#243).,NA
purrr,1,151,161,FALSE,"`reduce2()` and `reduce2_right()` make it possible to reduce with a 3 argument function where the first argument is the accumulated value, the second argument is `.x`, and the third argument is `.y` (#163).",NA
purrr,1,152,162,FALSE,`list_modify()` extends `stats::modifyList()` to replace by position if the list is not named.(#201). `list_merge()` operates similarly to `list_modify()` but combines instead of replacing (#322).,NA
purrr,1,153,163,FALSE,The legacy function `update_list()` is basically a version of `list_modify` that evaluates formulas within the list. It is likely to be deprecated in the future in favour of a tidyeval interface such as a list method for `dplyr::mutate()`.,NA
purrr,1,154,164,FALSE,"Thanks to @dchiu911, the unit test coverage of purrr is now much greater.",NA
purrr,1,155,165,FALSE,All predicate functions are re-exported from rlang (#124).,NA
purrr,1,156,166,FALSE,`compact()` now works with standard mapper conventions (#282).,NA
purrr,1,157,167,FALSE,"`cross_n()` has been renamed to `cross()`. The `_n` suffix was removed for consistency with `pmap()` (originally called `map_n()` at the start of the project) and `transpose()` (originally called `zip_n()`). Similarly, `cross_d()` has been renamed to `cross_df()` for consistency with `map_df()`.",NA
purrr,1,158,168,FALSE,`every()` and `some()` now return `NA` if present in the input (#174).,NA
purrr,1,159,169,FALSE,`invoke()` uses a more robust approach to generate the argument list (#249) It no longer uses lazyeval to figure out which enviroment a character `f` comes from.,NA
purrr,1,160,170,FALSE,`is_numeric()` and `is_scalar_numeric()` are deprecated because they don't test for what you might expect at first sight.,NA
purrr,1,161,171,FALSE,`reduce()` now throws an error if `.x` is empty and `.init` is not supplied.,NA
purrr,1,162,172,FALSE,"Deprecated functions `flatmap()`, `map3()`, `map_n()`, `walk3()`, `walk_n()`, `zip2()`, `zip3()`, `zip_n()` have been removed.",NA
purrr,1,163,173,FALSE,`pmap()` coerces data frames to lists to avoid the expensive `[.data.frame` which provides security that is unneeded here (#220).,NA
purrr,1,164,174,FALSE,`rdunif()` checks its inputs for validity (#211).,NA
purrr,1,165,175,FALSE,"`set_names()` can now take a function to tranform the names programmatically (#276), and you can supply names in `...` to reduce typing even more more (#316). `set_names()` is now powered by `rlang::set_names()`.",NA
purrr,1,166,176,FALSE,`safely()` now actually uses the `quiet` argument (#296).,NA
purrr,1,167,177,FALSE,`transpose()` now matches by name if available (#164). You can override the default choice with the new `.names` argument.,NA
purrr,1,168,178,FALSE,The function argument of `detect()` and `detect_index()` have been renamed from `.p` to `.f`. This is because they have mapper semantics rather than predicate semantics.,NA
purrr,1,169,179,FALSE,"All data-frame based mappers have been removed in favour of new functions and idioms in the tidyverse. `dmap()`, `dmap_at()`, `dmap_if()`, `invoke_rows()`, `slice_rows()`, `map_rows()`, `by_slice()`, `by_row()`, and `unslice()` have been moved to purrrlyr. This is a bit of an aggresive change but it allows us to",NA
purrr,1,170,180,FALSE,Fix for dev tibble support.,NA
purrr,1,171,181,FALSE,`as_function()` now supports list arguments which allow recursive indexing using either names or positions. They now always stop when encountering the first NULL (#173).,NA
purrr,1,172,182,FALSE,`accumulate` and `reduce` correctly pass extra arguments to the worker function.,NA
purrr,1,173,183,FALSE,"`as_function()` gains a `.null` argument that for character and numeric values allows you to specify what to return for null/absent elements (#110). This can be used with any map function, e.g. `map_int(x, 1, .null = NA)`",NA
purrr,1,174,184,FALSE,`as_function()` is now generic.,NA
purrr,1,175,185,FALSE,New `is_function()` that returns `TRUE` only for regular functions.,NA
purrr,1,176,186,FALSE,Fix crash on GCC triggered by `invoke_rows()`.,NA
purrr,1,177,187,FALSE,There are two handy infix functions:,NA
purrr,2,177,188,FALSE,* `x %||% y` is shorthand for `if (is.null(x)) y else x` (#109).,There are two handy infix functions:
purrr,2,177,189,FALSE,"* `x %@% ""a""` is shorthand for `attr(x, ""a"", exact = TRUE)` (#69).",There are two handy infix functions:
purrr,1,180,190,FALSE,"`accumulate()` has been added to handle recursive folding. It is shortand for `Reduce(f, .x, accumulate = TRUE)` and follows a similar syntax to `reduce()` (#145). A right-hand version `accumulate_right()` was also added.",NA
purrr,1,181,191,FALSE,`map_df()` row-binds output together. It's the equivalent of `plyr::ldply()` (#127),NA
purrr,1,182,192,FALSE,"`flatten()` is now type-stable and always returns a list. To return a simpler vector, use `flatten_lgl()`, `flatten_int()`, `flatten_dbl()`, `flatten_chr()`, or `flatten_df()`.",NA
purrr,1,183,193,FALSE,"`invoke()` has been overhauled to be more useful: it now works similarly to `map_call()` when `.x` is NULL, and hence `map_call()` has been deprecated. `invoke_map()` is a vectorised complement to `invoke()` (#125), and comes with typed variants `invoke_map_lgl()`, `invoke_map_int()`, `invoke_map_dbl()`, `invoke_map_chr()`, and `invoke_map_df()`.",NA
purrr,1,184,194,FALSE,"`transpose()` replaces `zip2()`, `zip3()`, and `zip_n()` (#128). The name more clearly reflects the intent (transposing the first and second levels of list). It no longer has fields argument or the `.simplify` argument; instead use the new `simplify_all()` function.",NA
purrr,1,185,195,FALSE,"`safely()`, `quietly()`, and `possibly()` are experimental functions for working with functions with side-effects (e.g. printed output, messages, warnings, and errors) (#120). `safely()` is a version of `try()` that modifies a function (rather than an expression), and always returns a list with two components, `result` and `error`.",NA
purrr,1,186,196,FALSE,`list_along()` and `rep_along()` generalise the idea of `seq_along()`. (#122).,NA
purrr,1,187,197,FALSE,`is_null()` is the snake-case version of `is.null()`.,NA
purrr,1,188,198,FALSE,"`pmap()` (parallel map) replaces `map_n()` (#132), and has typed-variants suffixed `pmap_lgl()`, `pmap_int()`, `pmap_dbl()`, `pmap_chr()`, and `pmap_df()`.",NA
purrr,1,189,199,FALSE,"`set_names()` is a snake-case alternative to `setNames()` with stricter equality checking, and more convenient defaults for pipes: `x %>% set_names()` is equivalent to `setNames(x, x)` (#119).",NA
purrr,1,190,200,FALSE,"`map()` now always returns a list. Data frame support has been moved to `map_df()` and `dmap()`. The latter supports sliced data frames as a shortcut for the combination of `by_slice()` and `dmap()`: `x %>% by_slice(dmap, fun, .collate = ""rows"")`. The conditional variants `dmap_at()` and `dmap_if()` also support sliced data frames and will recycle scalar results to the slice size.",NA
purrr,1,191,201,FALSE,"`map_rows()` has been renamed to `invoke_rows()`. As other rows-based functionals, it collates results inside lists by default, but with column collation this function is equivalent to `plyr::mdply()`.",NA
purrr,1,192,202,FALSE,"The rows-based functionals gain a `.to` option to name the output column as well as a `.collate` argument. The latter allows to collate the output in lists (by default), on columns or on rows. This makes these functions more flexible and more predictable.",NA
purrr,1,193,203,FALSE,"`as_function()`, which converts formulas etc to functions, is now exported (#123).",NA
purrr,1,194,204,FALSE,`rerun()` is correctly scoped (#95),NA
purrr,1,195,205,FALSE,`update_list()` can now modify an element called `x` (#98).,NA
purrr,1,196,206,FALSE,"`map*()` now use custom C code, rather than relying on `lapply()`, `mapply()` etc. The performance characteristcs are very similar, but it allows us greater control over the output (#118).",NA
purrr,1,197,207,FALSE,"`map_lgl()` now has second argument `.f`, not `.p` (#134).",NA
purrr,1,198,208,FALSE,`flatmap()` -\> use `map()` followed by the appropriate `flatten()`.,NA
purrr,1,199,209,FALSE,`map_call()` -\> `invoke()`.,NA
purrr,1,200,210,FALSE,`map_n()` -\> `pmap()`; `walk_n()` -\> `pwalk()`.,NA
purrr,1,201,211,FALSE,"`map3(x, y, z)` -\> `map_n(list(x, y, z))`; `walk3(x, y, z) ->`pwalk(list(x, y, z))\`",NA
readr,1,1,1,FALSE,"`read_table()`, `read_log()`, and `read_delim_chunked()` (and friends) gain the `show_col_types` argument found elsewhere. All `read_*()` functions now respect the `show_col_types` argument or option, even when using the first edition parsing engine (#1331).",NA
readr,1,2,2,FALSE,`show_progress()` uses `rlang::is_interactive()` instead of `base::interactive()` (#1356).,NA
readr,1,3,3,FALSE,"`read_builtin()` does more argument checking, so that we catch obviously malformed input before passing along to `utils::data()` (#1361).",NA
readr,1,4,4,FALSE,`chickens.csv` and `whitespace-sample.txt` are new example datasets accessible via `readr_example()` (#1354).,NA
readr,1,5,5,FALSE,Jenny Bryan is now the maintainer.,NA
readr,1,6,6,FALSE,Fix buffer overflow when trying to parse an integer from a field that is over 64 characters long (#1326),NA
readr,1,7,7,FALSE,"All readr functions again read eagerly by default. Unfortunately many users experienced frustration from the drawbacks of lazy reading, in particular locking files on Windows, so it was decided to disable lazy reading default. However `options(readr.read_lazy = TRUE)` can be used to set the default to",NA
readr,1,8,8,FALSE,New `readr.read_lazy` global option to control if readr reads files,NA
readr,1,9,9,FALSE,"minor test tweak for compatibility with testthat 3.1.0 (#@lionel-, #1304)",NA
readr,1,10,10,FALSE,"`write_rds()` gains a `text=` argument, to control using a text based object representation, like the `ascii=` argument in `saveRDS()` (#1270)",NA
readr,1,11,11,FALSE,`options(readr.show_col_types = FALSE)` now works as intended (#1250),NA
readr,1,12,12,FALSE,`read_delim_chunked()` now again correctly respects the `chunk_size` parameter (#1248),NA
readr,1,13,13,FALSE,"`type_convert()` gains a `guess_integer` argument, passed to `guess_parser()` (@jmbarbone, #1264)",NA
readr,1,14,14,FALSE,"`read_tsv()` now correctly passes the `quote` and `na` arguments to `vroom::vroom()` (#1254, #1255)",NA
readr,1,15,15,FALSE,Avoid spurious byte compilation errors due to the programmatically generated `spec_*()` functions.,NA
readr,1,16,16,FALSE,"`with_edition(1, read_csv(""my_file.csv""))` will read `my_file.csv` with the first edition of readr.",NA
readr,1,17,17,FALSE,`readr::local_edition(1)` placed at the top of your function or script will use the first edition for the rest of the function or script.,NA
readr,1,18,22,FALSE,"`melt_csv()`, `melt_delim()`, `melt_tsv()` and `melt_fwf()` have been superseded by functions in the same name in the meltr package. The versions in readr have been deprecated. These functions rely on the first edition parsing code and would be challenging to update to the new parser. When the first edition parsing code is eventually removed from readr they will be removed.",NA
readr,1,19,23,FALSE,"`read_table2()` has been renamed to `read_table()`, as most users expect `read_table()` to work like `utils::read.table()`. If you want the previous strict behavior of the `read_table()` you can use `read_fwf()` with `fwf_empty()` directly (#717).",NA
readr,1,20,24,FALSE,"Normalizing newlines in files with just carriage returns `\r` is no longer supported. The last major OS to use only CR as the newline was 'classic' Mac OS, which had its final release in 2001.",NA
readr,1,21,25,FALSE,`read_*_chunked()` functions now include their specification as an attribute (#1143),NA
readr,1,22,26,FALSE,All `read_*()` functions gain a `col_select` argument to more easily choose which columns to select.,NA
readr,1,23,27,FALSE,All `read_*()` functions gain a `id` argument to optionally store the file paths when reading multiple files.,NA
readr,1,24,28,FALSE,All `read_*()` functions gain a `name_repair` argument to control how column names are repaired.,NA
readr,1,25,29,FALSE,All `read_*()` and `write_*()` functions gain a `num_threads` argument to control the number of processing threads they use (#1201),NA
readr,1,26,30,FALSE,"All `write_*()` and `format_*()` functions gain `quote` and `escape` arguments, to explicitly control how fields are quoted and how double quotes are escaped. (#653, #759, #844, #993, #1018, #1083)",NA
readr,1,27,31,FALSE,All `write_*()` functions gain a `progress` argument and display a progress bar when writing (#791).,NA
readr,1,28,32,FALSE,"write_excel_csv() now defaults to `quote = ""all""` (#759)",NA
readr,1,29,33,FALSE,"write_tsv() now defaults to `quote = ""none""` (#993)",NA
readr,1,30,34,FALSE,`read_table()` now handles skipped lines with unpaired quotes properly (#1180),NA
readr,1,31,35,FALSE,"The BH package is no longer a dependency. The boost C++ headers in BH have thousands of files, so can take a long time to extract and compiling them takes a great deal of memory, which made readr difficult to compile on systems with limited memory (#1147).",NA
readr,1,32,36,FALSE,"readr now uses the tzdb package when parsing date-times (@DavisVaughan, r-lib/vroom#273)",NA
readr,1,33,37,FALSE,Chunked readers now support files with more than `INT_MAX` (\~ 2 Billion) number of lines (#1177),NA
readr,1,34,38,FALSE,Memory no longer inadvertently leaks when reading memory from R connections (#1161),NA
readr,1,35,39,FALSE,Invalid date formats no longer can potentially crash R (#1151),NA
readr,1,36,40,FALSE,`col_factor()` now throws a more informative error message if given non-character levels (#1140),NA
readr,1,37,41,FALSE,`problems()` now takes `.Last.value` as its default argument. This lets you run `problems()` without an argument to see the problems in the previously read dataset.,NA
readr,1,38,42,FALSE,"`read_delim()` fails when sample of parsing problems contains non-ASCII characters (@hidekoji, #1136)",NA
readr,1,39,43,FALSE,`read_log()` gains a `trim_ws` argument (#738),NA
readr,1,40,44,FALSE,"`read_rds()` and `write_rds()` gain a `refhook` argument, to pass functions that handle references objects (#1206)",NA
readr,1,41,45,FALSE,`read_rds()` can now read .Rds files from URLs (#1186),NA
readr,1,42,46,FALSE,"`read_*()` functions gain a `show_col_types` argument, if set to `FALSE` this turns off showing the column types unconditionally.",NA
readr,1,43,47,FALSE,`type_convert()` now throws a warning if the input has no character columns (#1020),NA
readr,1,44,48,FALSE,`write_csv()` now errors if given a matrix column (#1171),NA
readr,1,45,49,FALSE,`write_csv()` now again is able to write data with duplicated column names (#1169),NA
readr,1,46,50,FALSE,`write_file()` now forces its argument before opening the output file (#1158),NA
readr,1,47,51,FALSE,"`write_*()` functions first argument is now `file` instead of `path`, for consistency with the `read_*()` functions. `path` has been deprecated and will be removed in a future version of readr (#1110, @brianrice2)",NA
readr,1,48,52,FALSE,"`write_*()` functions now output any NaN values in the same way as NA values, controlled by the `na=` argument. (#1082).",NA
readr,1,49,53,FALSE,It is now possible to generate a column specification from any tibble (or data.frame) with `as.col_spec()` and convert any column specification to a short representation with `as.character()`,NA
readr,1,49,54,TRUE,"```
s <- as.col_spec(iris)
s
#> cols(
#>   Sepal.Length = col_double(),
#>   Sepal.Width = col_double(),
#>   Petal.Length = col_double(),
#>   Petal.Width = col_double(),
#>   Species = col_factor(levels = c(""setosa"", ""versicolor"", ""virginica""), ordered = FALSE, include_na = FALSE)
#> )
as.character(s)
#> [1] ""ddddf""
```",NA
readr,1,50,55,FALSE,The cli package is now used for all messages.,NA
readr,1,51,56,FALSE,The runtime performance for tables with an extreme number of columns is greatly improved (#825),NA
readr,1,52,57,FALSE,Compressed files are now detected by magic numbers rather than by the file extension (#1125),NA
readr,1,53,58,FALSE,A memory leak when reading files is now fixed (#1092),NA
readr,1,54,59,FALSE,`write_*()` functions gain a `eol =` argument to control the end of line character used (#857). This allows writing of CSV files with Windows newlines (CRLF) if desired.,NA
readr,1,55,60,FALSE,The Rcpp dependency has been removed in favor of cpp11.,NA
readr,1,56,61,FALSE,The build system has been greatly simplified so should work on more systems.,NA
readr,1,57,62,FALSE,"The full problem field is now displayed in the problems tibble, as intended (#444).",NA
readr,1,58,63,FALSE,"New `%h` placeholder for parsing unrestricted hours (\<0 and \>23) to support parsing durations (#549, @krlmlr).",NA
readr,1,59,64,FALSE,`as.character.col_spec()` now handles logical columns as well (#1127),NA
readr,1,60,65,FALSE,`fwf_positions(end)` no longer has a default argument and must be specified (#996),NA
readr,1,61,66,FALSE,`guess_parser()` gains a `na` argument and removes NA values before guessing (#1041).,NA
readr,1,62,67,FALSE,`parse_guess()` now passes the `na` argument to `guess_parser()`,NA
readr,1,63,68,FALSE,"`read_*` functions now close properly all connections, including on errors like HTTP errors when reading from a url (@cderv, #1050).",NA
readr,1,64,69,FALSE,`read_delimited()` no longer mistakenly stats literal filenames (#1063),NA
readr,1,65,70,FALSE,`read_lines()` now ignores quotations when skipping lines (#991).,NA
readr,1,66,71,FALSE,`read_lines(skip_empty_rows = TRUE)` no longer crashes if a file ends with an empty line (#968),NA
readr,1,67,72,FALSE,"`write_*()` functions now invisibly return the input data frame unchanged, rather than a version with factors and dates converted to strings. (@jesse-ross, #975).",NA
readr,1,68,73,FALSE,`write_csv2()` now formats decimal numbers more consistently with `utils::write.csv2()` (#1087),NA
readr,1,69,74,FALSE,"`write_csv2()` and `format_csv2()` no longer pad number columns with whitespaces (@keesdeschepper, #1046).",NA
readr,1,70,75,FALSE,`write_excel_csv()` no longer outputs a byte order mark when appending to a file (#1075).,NA
readr,1,71,76,FALSE,"Uses of `tibble::data_frame` updated to `tibble::tibble` ([tidyverse/dplyr#4069](https://github.com/tidyverse/dplyr/issues/4069), @thays42, #1124, @brianrice2)",NA
readr,1,72,77,FALSE,"`read_delimited()` now returns an empty `tibble::data_frame()` rather than signaling an error when given a connection with an empty file (@pralitp, #963).",NA
readr,1,73,78,FALSE,"More helpful error when trying to write out data frames with list columns (@ellessenne, #938)",NA
readr,1,74,79,FALSE,"`type_convert()` removes a 'spec' attribute, because the current columns likely have modified data types. The 'spec' attribute is set by functions like `read_delim()` (@jimhester, @wibeasley, #1032).",NA
readr,1,75,80,FALSE,"`write_rds()` now can specify the Rds version to use. The default value is 2 as it's compatible to R versions prior to 3.5.0 (@shrektan, #1001).",NA
readr,1,76,81,FALSE,"Fixes for issues related to variable initialization in C++ code (@michaelquinn32, ##1133).",NA
readr,1,77,82,FALSE,Column specifications are now coloured when printed. This makes it easy to see at a glance when a column is input as a different type then the rest. Colouring can be disabled by setting `options(crayon.enabled = FALSE)`.,NA
readr,1,78,83,FALSE,"`as.col_spec()` can now use named character vectors, which makes `read_csv(""file.csv"", col_types = c(xyz = ""c""))` equivalent to `read_csv(""file.csv"", col_types = cols(xyz = col_character())`",NA
readr,1,79,84,FALSE,"Fix skipping when single quotes are embedded in double quoted strings, and single quotes in skipped or commented lines (#944, #945).",NA
readr,1,80,85,FALSE,Fix for compilation using custom architectures on macOS (#919),NA
readr,1,81,86,FALSE,Fix for valgrind errors (#941),NA
readr,1,82,87,FALSE,`hms` objects with NA values are now written without whitespace,NA
readr,1,83,88,FALSE,"`read_*()` functions now return `spec_tbl_df` objects, which differ from regular `tbl_df` objects only in that the `spec` attribute is removed (and they are demoted to regular `tbl_df` objects) as soon",NA
readr,1,87,93,FALSE,"`melt_*()` functions added for reading ragged data (#760,",NA
readr,1,88,94,FALSE,`AccumulateCallback` R6 class added to provide an example of,NA
readr,1,89,95,FALSE,"`read_fwf()` can now accept overlapping field specifications (#692,",NA
readr,1,90,96,FALSE,`type_convert()` now allows character column specifications and also,NA
readr,1,91,97,FALSE,The `parse_*()` functions and `read_fwf()` gain a `trim_ws` argument to control whether the fields should be trimmed before parsing,NA
readr,1,92,98,FALSE,`parse_number()` now parses numbers in scientific notation using `e`,NA
readr,1,93,99,FALSE,Add `write_excel_csv2()` function to allow writing csv files with comma as a decimal separator and semicolon as a column separator,NA
readr,1,94,100,FALSE,`read_*()` files now support reading from the clipboard by using,NA
readr,1,95,101,FALSE,"`write_file()` gains a `sep` argument, to specify the line separator",NA
readr,1,96,102,FALSE,Allow files to be read via FTP over SSH by recognising `sftp` as a,NA
readr,1,97,103,FALSE,"`parse_date*() accepts`%a\` for local day of week (#763,",NA
readr,1,99,105,FALSE,`write_csv2()` added to complement `write_excel_csv2()` and allow,NA
readr,1,101,107,FALSE,`write*()` functions gain a `quote_escape` argument to control how,NA
readr,1,102,108,FALSE,`read*()` functions now have a more informative error when trying to,NA
readr,1,103,109,FALSE,`spec_table2()` function added to correspond to `read_table2()`,NA
readr,1,104,110,FALSE,"`parse_factor()` now has `levels = NULL` by default (#862,",NA
readr,1,105,111,FALSE,"`""f""` can now be used as a shortcode for `col_factor()` in `cols()` and the `col_types` argument to `read_delim()` and friends (#810,",NA
readr,1,106,112,FALSE,Functions now read connections to a temporary file rather than to an,NA
readr,1,107,113,FALSE,`standardise_path()` now uses a case-insensitive comparison for the,NA
readr,1,108,114,FALSE,`parse_guess()` now guesses logical types when given (lowercase),NA
readr,1,109,115,FALSE,`read_*()` now do not print a progress bar when running inside a,NA
readr,1,111,117,FALSE,"`parse_factor()` now handles the case of empty strings separately,",NA
readr,1,112,118,FALSE,`read_delim()` now correctly reads quoted headers with embedded,NA
readr,1,113,119,FALSE,`fwf_positions()` now always returns `col_names` as a character,NA
readr,1,114,120,FALSE,`format_*()` now explicitly marks it's output encoding as UTF-8,NA
readr,1,115,121,FALSE,`read_delim()` now ignores whitespace between the delimiter and,NA
readr,1,116,122,FALSE,`read_table2()` now properly ignores blank lines at the end of a,NA
readr,1,117,123,FALSE,"`read_delim()`, `read_table()` and `read_table()` now skip blank",NA
readr,1,118,124,FALSE,`guess_parser()` now guesses a logical type for columns which are all missing. This is useful when binding multiple files together,NA
readr,1,119,125,FALSE,Column guessing will now never guess an integer type. This avoids issues where double columns are incorrectly guessed as integers if,NA
readr,1,120,126,FALSE,"`read_*()` now converts string `file`s to UTF-8 before parsing, which is convenient for non-UTF-8 platforms in most cases (#730,",NA
readr,1,121,127,FALSE,`write_csv()` writes integers up to 10\^15 without scientific,NA
readr,1,122,128,FALSE,"`read_*()` no longer throws a ""length of NULL cannot be changed""",NA
readr,1,123,129,FALSE,`read_*()` now handles non-ASCII paths properly with R \>=3.5.0 on,NA
readr,1,124,130,FALSE,`read*()`'s `trim_ws` parameter now trims both spaces and tabs,NA
readr,1,126,132,FALSE,"Fixed undefined behavior in localtime.c when using `locale(tz = """")` after loading a timezone due to incomplete reinitialization of the",NA
readr,1,127,133,FALSE,"`parse_factor()` gains a `include_na` argument, to include `NA` in",NA
readr,1,128,134,FALSE,"`parse_factor()` will now can accept `levels = NULL`, which allows one to generate factor levels based on the data (like",NA
readr,1,129,135,FALSE,`parse_numeric()` now returns the full string if it contains no,NA
readr,1,131,137,FALSE,`problems()` now returns the file path in additional to the location,NA
readr,1,132,138,FALSE,`read_csv2()` gives a message if it updates the default locale,NA
readr,1,133,139,FALSE,`read_delim()` now signals an error if given an empty delimiter,NA
readr,1,134,140,FALSE,`write_*()` functions witting whole number doubles are no longer,NA
readr,1,135,141,FALSE,`fwf_cols()` allows for specifying the `col_positions` argument of `read_fwf()` with named arguments of either column positions or,NA
readr,1,136,142,FALSE,`fwf_empty()` gains an `n` argument to control how many lines are,NA
readr,1,137,143,FALSE,`read_fwf()` gives error message if specifications have overlapping,NA
readr,1,139,145,FALSE,`read_table()` can now handle files with many lines of leading,NA
readr,1,140,146,FALSE,"`read_table2()` which allows any number of whitespace characters as delimiters, a more exact replacement for `utils::read.table()`",NA
readr,1,141,147,FALSE,"`write_*()` functions now support writing to binary connections. In addition output filenames with `.gz`, `.bz2` or `.xz` will automatically open the appropriate connection and to write the",NA
readr,1,143,149,FALSE,"`col_euro_double()`, `parse_euro_double()`, `col_numeric()`, and",NA
readr,1,144,150,FALSE,"`guess_encoding()` returns a tibble, and works better with lists of",NA
readr,1,145,151,FALSE,`ListCallback` R6 Class to provide a more flexible return type for,NA
readr,1,147,153,FALSE,"`read_csv`, `read_csv2`, and `read_tsv` gain a `quote` argument,",NA
readr,1,148,154,FALSE,`parse_factor()` now converts data to UTF-8 based on the supplied,NA
readr,1,149,155,FALSE,`read_*()` functions with the `guess_max` argument now throw errors,NA
readr,1,150,156,FALSE,`read_*_chunked()` functions now properly end the stream if `FALSE`,NA
readr,1,151,157,FALSE,`read_delim()` and `read_fwf()` when columns are skipped using,NA
readr,1,153,159,FALSE,`read_table()` does not print `spec` when `col_types` is not `NULL`,NA
readr,1,154,160,FALSE,`guess_encoding()` now returns a tibble for all ASCII input as well,NA
readr,1,155,164,FALSE,New example `extdata/challenge.csv` which is carefully created to cause problems with the default column type guessing heuristics.,NA
readr,1,156,165,FALSE,"Blank lines and lines with only comments are now skipped automatically without warning (#381, #321).",NA
readr,1,157,166,FALSE,"Single '-' or '.' are now parsed as characters, not numbers (#297).",NA
readr,1,158,167,FALSE,"Numbers followed by a single trailing character are parsed as character, not numbers (#316).",NA
readr,1,159,168,FALSE,We now guess at times using the `time_format` specified in the `locale()`.,NA
readr,1,160,169,FALSE,"If `col_types` is too long, it is subsetted correctly (#372, @jennybc).",NA
readr,1,161,170,FALSE,"If `col_names` is too short, the added names are numbered correctly (#374, @jennybc).",NA
readr,1,162,171,FALSE,"Missing column name names are now given a default name (`X2`, `X7` etc) (#318). Duplicated column names are now deduplicated. Both changes generate a warning; to suppress it supply an explicit `col_names` (setting `skip = 1` if there's an existing ill-formed header).",NA
readr,1,163,172,FALSE,`col_types()` accepts a named list as input (#401).,NA
readr,1,164,173,FALSE,`%I` for 12 hour time format (#340).,NA
readr,1,165,174,FALSE,"`%AD` and `%AT` are ""automatic"" date and time parsers. They are both slightly less flexible than previous defaults. The automatic date parser requires a four digit year, and only accepts `-` and `/` as separators (#442). The flexible time parser now requires colons between hours and minutes and optional seconds (#424).",NA
readr,1,166,175,FALSE,`parse_time()` returns `hms` objects rather than a custom `time` class (#409). It now correctly parses missing values (#398).,NA
readr,1,167,176,FALSE,`parse_date()` returns a numeric vector (instead of an integer vector) (#357).,NA
readr,1,168,177,FALSE,"`parse_date()`, `parse_time()` and `parse_datetime()` gain an `na` argument to match all other parsers (#413).",NA
readr,1,169,178,FALSE,"If the format argument is omitted `parse_date()` or `parse_time()`, date and time formats specified in the locale will be used. These now default to `%AD` and `%AT` respectively.",NA
readr,1,170,179,FALSE,"You can now parse partial dates with `parse_date()` and `parse_datetime()`, e.g. `parse_date(""2001"", ""%Y"")` returns `2001-01-01`.",NA
readr,1,171,180,FALSE,`read_file_raw()` reads a complete file into a single raw vector (#451).,NA
readr,1,172,181,FALSE,`read_*()` functions gain a `quoted_na` argument to control whether missing values within quotes are treated as missing values or as strings (#295).,NA
readr,1,173,182,FALSE,"`write_excel_csv()` can be used to write a csv file with a UTF-8 BOM at the start, which forces Excel to read it as UTF-8 encoded (#375).",NA
readr,1,174,183,FALSE,`write_lines()` writes a character vector to a file (#302).,NA
readr,1,175,184,FALSE,`write_file()` to write a single character or raw vector to a file (#474).,NA
readr,1,176,185,FALSE,Experimental support for chunked reading a writing (`read_*_chunked()`) functions. The API is unstable and subject to change in the future (#427).,NA
readr,1,177,186,FALSE,"Printing double values now uses an [implementation](https://github.com/juj/MathGeoLib/blob/master/src/Math/grisu3.c) of the [grisu3 algorithm](http://www.cs.tufts.edu/~nr/cs257/archive/florian-loitsch/printf.pdf) which speeds up writing of large numeric data frames by \~10X. (#432) '.0' is appended to whole number doubles, to ensure they will be read as doubles as well. (#483)",NA
readr,1,178,187,FALSE,"readr imports tibble so that you get consistent `tbl_df` behaviour (#317, #385).",NA
readr,1,179,188,FALSE,New example `extdata/challenge.csv` which is carefully created to cause problems with the default column type guessing heuristics.,NA
readr,1,180,189,FALSE,`default_locale()` now sets the default locale in `readr.default_locale` rather than regenerating it for each call. (#416).,NA
readr,1,181,190,FALSE,`locale()` now automatically sets decimal mark if you set the grouping mark. It throws an error if you accidentally set decimal and grouping marks to the same character (#450).,NA
readr,1,182,191,FALSE,"All `read_*()` can read into long vectors, substantially increasing the number of rows you can read (#309).",NA
readr,1,183,192,FALSE,"All `read_*()` functions return empty objects rather than signaling an error when run on an empty file (#356, #441).",NA
readr,1,184,193,FALSE,"`read_delim()` gains a `trim_ws` argument (#312, noamross)",NA
readr,1,185,194,FALSE,`read_fwf()` received a number of improvements:,NA
readr,2,185,195,FALSE,"* `read_fwf()` now can now reliably read only a partial set of columns (#322, #353, #469)",`read_fwf()` received a number of improvements:
readr,2,185,196,FALSE,"* `fwf_widths()` accepts negative column widths for compatibility with the `widths` argument in `read.fwf()` (#380, @leeper).",`read_fwf()` received a number of improvements:
readr,2,185,197,FALSE,"* You can now read fixed width files with ragged final columns, by setting the final end position in `fwf_positions()` or final width in `fwf_widths()` to `NA` (#353, @ghaarsma). `fwf_empty()` does this automatically.",`read_fwf()` received a number of improvements:
readr,2,185,198,FALSE,* `read_fwf()` and `fwf_empty()` can now skip commented lines by setting a `comment` argument (#334).,`read_fwf()` received a number of improvements:
readr,1,190,199,FALSE,`read_lines()` ignores embedded null's in strings (#338) and gains a `na` argument (#479).,NA
readr,1,191,200,FALSE,`readr_example()` makes it easy to access example files bundled with readr.,NA
readr,1,192,201,FALSE,`type_convert()` now accepts only `NULL` or a `cols` specification for `col_types` (#369).,NA
readr,1,193,202,FALSE,"`write_delim()` and `write_csv()` now invisibly return the input data frame (as documented, #363).",NA
readr,1,194,203,FALSE,Doubles are parsed with `boost::spirit::qi::long_double` to work around a bug in the spirit library when parsing large numbers (#412).,NA
readr,1,195,204,FALSE,Fix bug when detecting column types for single row files without headers (#333).,NA
readr,1,196,205,FALSE,Fix bug when checking empty values for missingness (caused valgrind,NA
readr,1,198,207,FALSE,"`read_csv()`, `read_tsv()`, `read_fwf()`, `read_table()`, `read_lines()`, `read_file()`, `type_convert()`, `parse_vector()` all gain a `locale` argument.",NA
readr,1,199,208,FALSE,`locale()` controls all the input settings that vary from place-to-place.,NA
readr,1,200,209,FALSE,`col_euro_double()` and `parse_euro_double()` have been deprecated. Use the `decimal_mark` parameter to `locale()` instead.,NA
readr,1,201,210,FALSE,"The default encoding is now UTF-8. To load files that are not in UTF-8, set the `encoding` parameter of the `locale()` (#40). New `guess_encoding()` function uses stringi to help you figure out the encoding of a file.",NA
readr,1,202,211,FALSE,"`parse_datetime()` and `parse_date()` with `%B` and `%b` use the month names (full and abbreviate) defined in the locale (#242). They also inherit the tz from the locale, rather than using an explicit `tz` parameter.",NA
readr,1,203,212,FALSE,`cols()` lets you pick the default column type for columns not otherwise explicitly named (#148). You can refer to parsers either with their full name (e.g. `col_character()`) or their one letter abbreviation (e.g. `c`).,NA
readr,1,204,213,FALSE,`cols_only()` allows you to load only named columns. You can also choose to override the default column type in `cols()` (#72).,NA
readr,1,205,214,FALSE,"`read_fwf()` is now much more careful with new lines. If a line is too short, you'll get a warning instead of a silent mistake (#166, #254). Additionally, the last column can now be ragged: the width of the last field is silently extended until it hits the next line break (#146). This appears to be a common feature of ""fixed"" width files in the wild.",NA
readr,1,206,215,FALSE,"In `read_csv()`, `read_tsv()`, `read_delim()` etc:",NA
readr,2,206,216,FALSE,* `comment` argument allows you to ignore comments (#68).,"In `read_csv()`, `read_tsv()`, `read_delim()` etc:"
readr,2,206,217,FALSE,* `trim_ws` argument controls whether leading and trailing whitespace is removed. It defaults to `TRUE` (#137).,"In `read_csv()`, `read_tsv()`, `read_delim()` etc:"
readr,2,206,218,FALSE,"* Specifying the wrong number of column names, or having rows with an unexpected number of columns, generates a warning, rather than an error (#189).","In `read_csv()`, `read_tsv()`, `read_delim()` etc:"
readr,2,206,219,FALSE,"* Multiple NA values can be specified by passing a character vector to `na` (#125). The default has been changed to `na = c("""", ""NA"")`. Specifying `na = """"` now works as expected with character columns (#114).","In `read_csv()`, `read_tsv()`, `read_delim()` etc:"
readr,1,211,220,FALSE,`parse_character()` gains better support for embedded nulls: any characters after the first null are dropped with a warning (#202).,NA
readr,1,212,221,FALSE,`parse_integer()` and `parse_double()` no longer silently ignore trailing letters after the number (#221).,NA
readr,1,213,222,FALSE,"New `parse_time()` and `col_time()` allows you to parse times (hours, minutes, seconds) into number of seconds since midnight. If the format is omitted, it uses a flexible parser that looks for hours, then optional colon, then minutes, then optional colon, then optional seconds, then optional am/pm (#249).",NA
readr,1,214,223,FALSE,`parse_date()` and `parse_datetime()`:,NA
readr,2,214,224,FALSE,"* `parse_datetime()` no longer incorrectly reads partial dates (e.g. 19, 1900, 1900-01) (#136). These triggered common false positives and after re-reading the ISO8601 spec, I believe they actually refer to periods of time, and should not be translated in to a specific instant (#228).",`parse_date()` and `parse_datetime()`:
readr,2,214,225,FALSE,"* Compound formats ""%D"", ""%F"", ""%R"", ""%X"", ""%T"", ""%x"" are now parsed correctly, instead of using the ISO8601 parser (#178, @kmillar).",`parse_date()` and `parse_datetime()`:
readr,2,214,226,FALSE,"* ""%."" now requires a non-digit. New ""%+"" skips one or more non-digits.",`parse_date()` and `parse_datetime()`:
readr,2,214,227,FALSE,* You can now use `%p` to refer to AM/PM (and am/pm) (#126).,`parse_date()` and `parse_datetime()`:
readr,2,214,228,FALSE,* `%b` and `%B` formats (month and abbreviated month name) ignore case when matching (#219).,`parse_date()` and `parse_datetime()`:
readr,2,214,229,FALSE,"* Local (non-UTC) times with and without daylight savings are now parsed correctly (#120, @andres-s).",`parse_date()` and `parse_datetime()`:
readr,1,221,230,FALSE,`parse_number()` is a somewhat flexible numeric parser designed to read currencies and percentages. It only reads the first number from a string (using the grouping mark defined by the locale).,NA
readr,1,222,231,FALSE,"`parse_numeric()` has been deprecated because the name is confusing - it's a flexible number parser, not a parser of ""numerics"", as R collectively calls doubles and integers. Use `parse_number()` instead.",NA
readr,1,223,232,FALSE,New `parse_guess()` and `col_guess()` to explicitly guess column type.,NA
readr,1,224,233,FALSE,Bumped up row inspection for column typing guessing from 100 to 1000.,NA
readr,1,225,234,FALSE,"The heuristics for guessing `col_integer()` and `col_double()` are stricter. Numbers with leading zeros now default to being parsed as text, rather than as integers/doubles (#266).",NA
readr,1,226,235,FALSE,A column is guessed as `col_number()` only if it parses as a regular number when you ignoring the grouping marks.,NA
readr,1,227,236,FALSE,"Now use R's platform independent `iconv` wrapper, thanks to BDR (#149).",NA
readr,1,228,237,FALSE,"Pathological zero row inputs (due to empty input, `skip` or `n_max`) now return zero row data frames (#119).",NA
readr,1,229,238,FALSE,"When guessing field types, and there's no information to go on, use character instead of logical (#124, #128).",NA
readr,1,230,239,FALSE,Concise `col_types` specification now understands `?` (guess) and `-` (skip) (#188).,NA
readr,1,231,240,FALSE,"`count_fields()` starts counting from 1, not 0 (#200).",NA
readr,1,232,241,FALSE,`format_csv()` and `format_delim()` make it easy to render a csv or delimited file into a string.,NA
readr,1,233,242,FALSE,"`fwf_empty()` now works correctly when `col_names` supplied (#186, #222).",NA
readr,1,234,243,FALSE,`parse_*()` gains a `na` argument that allows you to specify which values should be converted to missing.,NA
readr,1,235,244,FALSE,"`problems()` now reports column names rather than column numbers (#143). Whenever there is a problem, the first five problems are printing out in a warning message, so you can more easily see what's wrong.",NA
readr,1,236,245,FALSE,"`read_*()` throws a warning instead of an error is `col_types` specifies a non-existent column (#145, @alyst).",NA
readr,1,237,246,FALSE,`read_*()` can read from a remote gz compressed file (#163).,NA
readr,1,238,247,FALSE,`read_delim()` defaults to `escape_backslash = FALSE` and `escape_double = TRUE` for consistency. `n_max` also affects the number of rows read to guess the column types (#224).,NA
readr,1,239,248,FALSE,"`read_lines()` gains a progress bar. It now also correctly checks for interrupts every 500,000 lines so you can interrupt long running jobs. It also correctly estimates the number of lines in the file, considerably speeding up the reading of large files (60s -\> 15s for a 1.5 Gb file).",NA
readr,1,240,249,FALSE,"`read_lines_raw()` allows you to read a file into a list of raw vectors, one element for each line.",NA
readr,1,241,250,FALSE,"`type_convert()` gains `NA` and `trim_ws` arguments, and removes missing values before determining column types.",NA
readr,1,242,251,FALSE,"`write_csv()`, `write_delim()`, and `write_rds()` all invisibly return their input so you can use them in a pipe (#290).",NA
readr,1,243,252,FALSE,`write_delim()` generalises `write_csv()` to write any delimited format (#135). `write_tsv()` is a helpful wrapper for tab separated files.,NA
readr,2,243,253,FALSE,"* Quotes are only used when they're needed (#116): when the string contains a quote, the delimiter, a new line or NA.",`write_delim()` generalises `write_csv()` to write any delimited format (#135). `write_tsv()` is a helpful wrapper for tab separated files.
readr,2,243,254,FALSE,* Double vectors are saved using same amount of precision as `as.character()` (#117).,`write_delim()` generalises `write_csv()` to write any delimited format (#135). `write_tsv()` is a helpful wrapper for tab separated files.
readr,2,243,255,FALSE,* New `na` argument that specifies how missing values should be written (#187),`write_delim()` generalises `write_csv()` to write any delimited format (#135). `write_tsv()` is a helpful wrapper for tab separated files.
readr,2,243,256,FALSE,* POSIXt vectors are saved in a ISO8601 compatible format (#134).,`write_delim()` generalises `write_csv()` to write any delimited format (#135). `write_tsv()` is a helpful wrapper for tab separated files.
readr,2,243,257,FALSE,"* No longer fails silently if it can't open the target for writing (#193, #172).",`write_delim()` generalises `write_csv()` to write any delimited format (#135). `write_tsv()` is a helpful wrapper for tab separated files.
readr,1,249,258,FALSE,"`write_rds()` and `read_rds()` wrap around `readRDS()` and `saveRDS()`, defaulting to no compression (#140, @nicolasCoutin).",NA
readxl,1,3,3,FALSE,Refactoring to reduce duplication between the `.xls` and `.xlsx`,NA
readxl,1,4,4,FALSE,"""Date or Not Date"": The classification of number formats as being datetime-ish is more sophisticated and should no longer be so easily fooled by, e.g., colours or currencies. This affects cell and column type guessing, hopefully for the better (#388, #559, @nacnudus, @reviewher).",NA
readxl,1,5,5,FALSE,"Cell location is determined more robustly in `.xlsx` files, guarding against the idiosyncratic way in which certain 3rd party tools include (or, rather, do not include) cell location in individual cell nodes (#648, #671).",NA
readxl,1,6,6,FALSE,"Warning messages for impossible dates are more specific. Unsupported dates prior to 1900 have their own message now, instead of being lumped in with dates on the non-existent day of February 29, 1900 (#551, #554, @cderv).",NA
readxl,1,7,7,FALSE,readxl is now licensed as MIT (#632).,NA
readxl,1,8,8,FALSE,"readxl now states its support for R \>= 3.4 explicitly. Why 3.4? Because the [tidyverse policy](https://www.tidyverse.org/blog/2019/04/r-version-support/) is to support the current version, the devel version, and four previous versions of R. It was necessary to introduce a minimum R version, in order to state a minimum version for a package listed in `LinkingTo`.",NA
readxl,1,9,9,FALSE,readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:,NA
readxl,2,9,10,FALSE,* [v1.6.2](https://github.com/libxls/libxls/releases/tag/v1.6.2),readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:
readxl,2,9,11,FALSE,* [v1.6.1](https://github.com/libxls/libxls/releases/tag/v1.6.1),readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:
readxl,2,9,12,FALSE,* [v1.6.0](https://github.com/libxls/libxls/releases/tag/v1.6.0),readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:
readxl,2,9,13,FALSE,* [v1.5.3](https://github.com/libxls/libxls/releases/tag/v1.5.3),readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:
readxl,2,9,14,FALSE,* [v1.5.2](https://github.com/libxls/libxls/releases/tag/v1.5.2),readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:
readxl,2,9,15,FALSE,* [v1.5.1](https://github.com/libxls/libxls/releases/tag/v1.5.1),readxl embeds libxls v1.6.2 (the previous release embedded v1.5.0). The libxls project is hosted at <https://github.com/libxls/libxls> and you can learn more about the cumulative changes in its release notes:
readxl,1,16,16,FALSE,"readxl has switched from Rcpp to cpp11 and now requires C++11 (#659, @sbearrows).",NA
readxl,1,17,17,FALSE,"The minimum version of tibble has been bumped to 2.0.1 (released 2019-01-12), completing the transition to an approach to column name repair used across the tidyverse.",NA
readxl,1,20,20,FALSE,[Column Names](https://readxl.tidyverse.org/articles/articles/column-names.html),NA
readxl,1,21,21,FALSE,"readxl delegates name repair to tibble, therefore the installed",NA
readxl,1,22,22,FALSE,"If tibble \>= v2.0.0, the full power of `.name_repair` is available, defaulting to `.name_repair = ""unique""`. Otherwise, the legacy function `tibble::repair_names(prefix = ""X"", sep = ""__"")` is used, replicating the behaviour of readxl v1.1.0.",NA
readxl,2,22,23,FALSE,* Consider a spreadsheet with three columns: one unnamed and two named `x`.,"If tibble \>= v2.0.0, the full power of `.name_repair` is available, defaulting to `.name_repair = ""unique""`. Otherwise, the legacy function `tibble::repair_names(prefix = ""X"", sep = ""__"")` is used, replicating the behaviour of readxl v1.1.0."
readxl,2,22,24,FALSE,"* Content of cells in Excel: `""""`, `x`, `x`","If tibble \>= v2.0.0, the full power of `.name_repair` is available, defaulting to `.name_repair = ""unique""`. Otherwise, the legacy function `tibble::repair_names(prefix = ""X"", sep = ""__"")` is used, replicating the behaviour of readxl v1.1.0."
readxl,2,22,25,FALSE,"* New style column names: `..1`, `x..2`, `x..3`","If tibble \>= v2.0.0, the full power of `.name_repair` is available, defaulting to `.name_repair = ""unique""`. Otherwise, the legacy function `tibble::repair_names(prefix = ""X"", sep = ""__"")` is used, replicating the behaviour of readxl v1.1.0."
readxl,2,22,26,FALSE,"* Legacy column names: `X__1`, `x`, `x__1`","If tibble \>= v2.0.0, the full power of `.name_repair` is available, defaulting to `.name_repair = ""unique""`. Otherwise, the legacy function `tibble::repair_names(prefix = ""X"", sep = ""__"")` is used, replicating the behaviour of readxl v1.1.0."
readxl,1,27,27,FALSE,"Once per session, readxl emits a message stating that it works best with tibble \>= v2.0.0. It is anticipated that this will become a",NA
readxl,1,28,28,FALSE,"`read_excel()` and friends gain a `progress` argument that controls a progress spinner (#243, #538).",NA
readxl,1,29,29,FALSE,`read_xls()` and `read_xlsx()` pass the `trim_ws` argument along (#514).,NA
readxl,1,30,30,FALSE,"readxl has a [new article](https://readxl.tidyverse.org/articles/articles/multiple-header-rows.html) on reading Excel files with multiple header rows (#486, #492 @apreshill).",NA
readxl,1,31,31,FALSE,"xlsx files that do not have a ""styles"" part can now be read (#505, #506 @jt6)",NA
readxl,1,32,32,FALSE,"All paths are passed through `normalizePath()` (#498, #499, new behaviour for xlsx but not xls) and `enc2native()` (#370).",NA
readxl,1,33,33,FALSE,"`read_excel()` and `excel_sheets()` associate a larger set of file extensions with xlsx and are better able to guess the format of a file with a nonstandard or missing extension. This is about deciding whether to treat a file as xls or xlsx. (#342, #411, #457)",NA
readxl,2,33,34,FALSE,* `excel_format()` is the newly-exported format-guessing function.,"`read_excel()` and `excel_sheets()` associate a larger set of file extensions with xlsx and are better able to guess the format of a file with a nonstandard or missing extension. This is about deciding whether to treat a file as xls or xlsx. (#342, #411, #457)"
readxl,2,33,35,FALSE,"* `format_from_ext()` is a low-level helper, also exported, that only consults file extension. In addition to the obvious interpretation of `.xls` and `.xlsx`, the extensions `.xlsm`, `.xltx`, and `.xltm` are now associated with xlsx.","`read_excel()` and `excel_sheets()` associate a larger set of file extensions with xlsx and are better able to guess the format of a file with a nonstandard or missing extension. This is about deciding whether to treat a file as xls or xlsx. (#342, #411, #457)"
readxl,2,33,36,FALSE,"* `format_from_signature()` is a low-level helper, also exported, that consults the file's signature (a.k.a. magic number). It's handy for files that lack an extension.","`read_excel()` and `excel_sheets()` associate a larger set of file extensions with xlsx and are better able to guess the format of a file with a nonstandard or missing extension. This is about deciding whether to treat a file as xls or xlsx. (#342, #411, #457)"
readxl,1,37,37,FALSE,"Embedded libxls has been updated to address security vulnerabilitities identified in late 2017 (#441, #442).",NA
readxl,2,37,38,FALSE,"* [CVE-2017-12110](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0462), [CVE-2017-2896](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0403), and [CVE-2017-2897](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0404) were demonstrated to affect readxl v1.0.0. These have been addressed in libxls and the embedded version of libxls incorporates those fixes.","Embedded libxls has been updated to address security vulnerabilitities identified in late 2017 (#441, #442)."
readxl,2,37,39,FALSE,"* Although [CVE-2017-12111](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0463) and [CVE-2017-2919](https://talosintelligence.com/vulnerability_reports/TALOS-2017-0426) mention readxl, the notices clarify that these CVEs do not actually affect readxl. Both have been fixed in libxls for quite a while: CVE-2017-12111 since 2014 and CVE-2017-2919 since 2012.","Embedded libxls has been updated to address security vulnerabilitities identified in late 2017 (#441, #442)."
readxl,1,40,40,FALSE,"xlsx structured as a ""minimal conformant SpreadsheetML package"" can be read. Most obvious feature of such sheets is the lack of an `xl/` directory in the unzipped form. (xlsx, #435, #437)",NA
readxl,1,41,41,FALSE,"Reading xls sheet with exactly 65,536 rows no longer enters an infinite loop. (xls, #373, #416, #432 @vkapartzianis)",NA
readxl,1,42,42,FALSE,"Doubles, including datetimes, coerced to character from xls now have much higher precision, comparable to the xlsx behaviour. (xls, #430, #431)",NA
readxl,1,43,43,FALSE,"Integer-y numbers larger than 2\^31 are coerced properly to string (xls, #346)",NA
readxl,1,44,44,FALSE,"Shared strings are only compared to NA strings after lookup, never on the basis of their index. (xlsx, #401)",NA
readxl,1,45,45,FALSE,Better checks and messaging around nonexistent files. (#392),NA
readxl,1,46,46,FALSE,Add `$(C_VISIBILITY)` to compiler flags to hide internal symbols from the dll. (#385 @jeroen),NA
readxl,1,47,47,FALSE,"Numeric data in a logical column now coerces properly to logical. (xlsx, #385 @nacnudus)",NA
readxl,1,48,48,FALSE,"`range` is a new argument for reading a rectangular range, possibly open. (#314, #8)",NA
readxl,1,49,49,FALSE,"`n_max` is a new argument that limits the number of data rows read. (#306, #281)",NA
readxl,1,50,50,FALSE,"Empty cells, rows, columns (xlsx #248 and #240, xls #271): Cells with no content are no longer loaded, even if they appear in the file. Affects cells that have no data but that carry explicit formatting, detectable in Excel as seemingly empty cells with a format other than ""General"". Such cells may still exist in the returned tibble, with value `NA`, depending on the sheet geometry.",NA
readxl,2,50,51,FALSE,"* Eliminates a source of trailing rows (#203) and columns (#236, #162, #146) consisting entirely of `NA`.","Empty cells, rows, columns (xlsx #248 and #240, xls #271): Cells with no content are no longer loaded, even if they appear in the file. Affects cells that have no data but that carry explicit formatting, detectable in Excel as seemingly empty cells with a format other than ""General"". Such cells may still exist in the returned tibble, with value `NA`, depending on the sheet geometry."
readxl,2,50,52,FALSE,"* Eliminates a subtle source of disagreement between user-provided column names and guessed column types (#169, #81).","Empty cells, rows, columns (xlsx #248 and #240, xls #271): Cells with no content are no longer loaded, even if they appear in the file. Affects cells that have no data but that carry explicit formatting, detectable in Excel as seemingly empty cells with a format other than ""General"". Such cells may still exist in the returned tibble, with value `NA`, depending on the sheet geometry."
readxl,2,50,53,FALSE,"* Embedded empty columns are no longer automatically dropped, regardless of whether there is a column name. (#157, #261)","Empty cells, rows, columns (xlsx #248 and #240, xls #271): Cells with no content are no longer loaded, even if they appear in the file. Affects cells that have no data but that carry explicit formatting, detectable in Excel as seemingly empty cells with a format other than ""General"". Such cells may still exist in the returned tibble, with value `NA`, depending on the sheet geometry."
readxl,2,50,54,FALSE,"* Worksheets that are completely empty or that contain only column names no longer error, but return a tibble with zero rows. (#222, #144, #65)","Empty cells, rows, columns (xlsx #248 and #240, xls #271): Cells with no content are no longer loaded, even if they appear in the file. Affects cells that have no data but that carry explicit formatting, detectable in Excel as seemingly empty cells with a format other than ""General"". Such cells may still exist in the returned tibble, with value `NA`, depending on the sheet geometry."
readxl,2,50,55,FALSE,"* Improved handling of leading and embedded blank rows and explicit row skipping. (#224, #194, #178, #156, #101)","Empty cells, rows, columns (xlsx #248 and #240, xls #271): Cells with no content are no longer loaded, even if they appear in the file. Affects cells that have no data but that carry explicit formatting, detectable in Excel as seemingly empty cells with a format other than ""General"". Such cells may still exist in the returned tibble, with value `NA`, depending on the sheet geometry."
readxl,1,56,56,FALSE,"User-supplied `col_names` are processed relative to user-supplied `col_types`, if given. Specifically, `col_names` is considered valid if it has the same length as `col_types`, before *or after* removing skipped columns. (#81, #261)",NA
readxl,1,57,57,FALSE,"`""list""` is a new accepted value for `col_types`. Loads data as a list of length-1 vectors, that are typed using the logic from `col_types = NULL`, but on a cell-by-cell basis (#262 @gergness).",NA
readxl,1,58,58,FALSE,"`""logical""` is a new accepted value for `col_types`. When `col_types = NULL`, it is the guessed type for cells Excel advertises as Boolean. When a column has no data, it is now filled with logical `NA`. (#277, #270)",NA
readxl,1,59,59,FALSE,"`""guess""` is a new accepted value for `col_types`. Allows the user to specify some column types, while allowing others to be guessed (#286)",NA
readxl,1,60,60,FALSE,"A user-specified `col_types` of length one will be replicated to have length equal to the number of columns. (#127, #114, #261)",NA
readxl,1,61,61,FALSE,"`""blank""` has been deprecated in favor of the more descriptive and readr-compatible `""skip""`, which is now the preferred way to request that a column be skipped. (#260, #193, #261)",NA
readxl,1,62,62,FALSE,"`guess_max` is a new argument that lets user adjust the number of rows used to guess column types. (#223, #257 @tklebel and @jennybc)",NA
readxl,1,63,63,FALSE,"`trim_ws` is a new argument to remove leading and trailing whitespace. It defaults to `TRUE`. (#326, #211)",NA
readxl,1,64,64,FALSE,"`na` can now hold multiple NA values, e.g., `read_excel(""missing-values.xls"", na = c(""NA"", ""1""))`. (#13, #56, @jmarshallnz)",NA
readxl,1,65,65,FALSE,Coercions and cell data:,NA
readxl,2,65,66,FALSE,"* Numeric data that appears in a date column is coerced to a date. Throws a warning. (#277, #266)",Coercions and cell data:
readxl,2,65,67,FALSE,"* Dates that appear in a numeric column are converted to `NA` instead of their integer representation. Throws warning. (#277, #263)",Coercions and cell data:
readxl,2,65,68,FALSE,"* ""Number stored as text"": when a text cell is found in a numeric column, `read_excel()` attempts to coerce the string to numeric and falls back to `NA` if unsuccessful. Throws warning. (#277, #217, #106)",Coercions and cell data:
readxl,2,65,69,FALSE,"* Cells in error are treated as blank and are imported as `NA` (instead of the string `""error""`). (#277, #62)",Coercions and cell data:
readxl,2,65,70,FALSE,"* BoolErr cells are now handled in xls. Suppresses message `""Unknown type: 517""`. (#274, #259)",Coercions and cell data:
readxl,2,65,71,FALSE,* Dates that arise from a formula are treated as dates (vs. numeric) in xls. (#277),Coercions and cell data:
readxl,2,65,72,FALSE,"* Dates in .xlsx files saved with LibreOffice are now recognized as such. (#134, @zeehio)",Coercions and cell data:
readxl,1,73,73,FALSE,"Namespace prefixes are now stripped from element names and attributes when parsing XML from xlsx. Workaround for the creative approach taken in some other s/w, coupled with rapidxml's lack of namespace support. (#295, #268, #202, #80)",NA
readxl,1,74,74,FALSE,"Excel mixes 0- and 1-indexing in reported row and column dimensions for xls and libxls expects that. Other s/w may index from 0 for both, preventing libxls from reading the last column. Patched to restore access to those cells. (#273, #180, #152, #99)",NA
readxl,1,75,75,FALSE,"More robust logic for sheet lookup in xlsx. Improves compatibility with xlsx written by a variety of tools and/or xlsx containing chartsheets. (#233, #104, #200, #168, #116, @jimhester and @jennybc)",NA
readxl,1,76,76,FALSE,"The `numFmtId` attribute is no longer accessed when it does not exist (xlsx written by <https://www.epplussoftware.com>). (#191, #229)",NA
readxl,1,77,77,FALSE,"Location is inferred for cells that do not declare their location (xlsx written by JMP). (#240, #163, #102)",NA
readxl,1,78,78,FALSE,"`read_xls()` and `read_xlsx()` are now exposed, such that files without an `.xls` or `.xlsx` extension can be read. (#85, @jirkalewandowski)",NA
readxl,1,79,79,FALSE,"The [Lotus 1-2-3 leap year bug](https://docs.microsoft.com/en-US/office/troubleshoot/excel/wrongly-assumes-1900-is-leap-year) is now accounted for, i.e. date-times prior to March 1, 1900 import correctly. Date-times on the non-existent leap day February 29, 1900 import as NA and throw a warning. (#264, #148, #292)",NA
readxl,1,80,80,FALSE,"The tibble package is now imported (#175, @krlmlr) and `tibble::repair_names()` is used to prevent empty, `NA`, or duplicated column names. (#216, #208, #199 #182, #53, #247).",NA
readxl,1,81,81,FALSE,"Default column names for xlsx now start with X\_\_1 instead of X\_\_0. (#98, @zeehio, @krlmlr)",NA
readxl,1,82,82,FALSE,"Fix compilation warnings/failures (FreeBSD 10.3 #221, gcc 4.9.3 #124) and/or problems reading xls (CentOS 6.6 #189). (#244, #245, #246 @jeroen)",NA
readxl,1,83,83,FALSE,"Unwanted printed output (e.g., `DEFINEDNAME: 21 00 00 ...`) is suppressed when reading xls that contains a defined range. (#82, #188, @PedramNavid)",NA
readxl,1,84,84,FALSE,Add support for correctly reading strings in .xlsx files containing,NA
reprex,1,1,1,FALSE,"The ad placed by `reprex(advertise = TRUE)` has been tweaked for `venue = ""gh""` (and, therefore, for its aliases `""so""` and `""ds""`) and `venue = ""slack""` (#395).",NA
reprex,1,2,2,FALSE,"reprex takes advantage of rlang 1.0.0's improved [support for backtraces in knitted documents](https://rlang.r-lib.org/reference/rlang_backtrace_on_error.html#errors-in-rmarkdown) and sets the option `rlang_backtrace_on_error_report = ""full""` (#377).",NA
reprex,1,3,3,FALSE,"`reprex_rtf()` (a shortcut for `reprex(venue = ""rtf"")`) now works on Windows, even if one of the (possibly temporary) filepaths contains a space, e.g. because the username contains a space (#409, @cderv).",NA
reprex,1,4,4,FALSE,"The RStudio addin no longer displays a warning about condition length when selecting 'current file' as the reprex source (#391, @bisaloo).",NA
reprex,1,5,5,FALSE,Internal matters:,NA
reprex,2,5,6,FALSE,"* Help files below `man/` have been re-generated, so that they give rise to valid HTML5. (This is the impetus for this release, to keep the package safely on CRAN.)",Internal matters:
reprex,2,5,7,FALSE,"* reprex's condition signalling has been updated to use the current approaches provided by the cli, rlang, and lifecycle packages.",Internal matters:
reprex,1,8,8,FALSE,"When `reprex()` is called without `expr` or `input`, in a context where the user's clipboard can't be reached from R, the default is now to consult the current selection for reprex source. Previously this was only available via the `reprex_selection()` addin. Note that this ""current selection"" default behaviour propagates to convenience wrappers around `reprex()`, such as `reprex_locale()` and venue-specific functions like `reprex_r()`, and to the",NA
reprex,1,9,9,FALSE,"In this context, the file containing the (un)rendered reprex is",NA
reprex,1,10,10,FALSE,"To reprex in the current working directory,\ Previously: `reprex(outfile = NA)`\ Now: `reprex(wd = ""."")`\ More generally, usage looks like",NA
reprex,1,11,11,FALSE,"If you really care about reprex filename (and location), write your source to `path/to/stuff.R` and call `reprex(input = ""path/to/stuff.R"")`. When `input` is a filepath, that filepath determines the working directory and how reprex files",NA
reprex,1,12,12,FALSE,We explicitly make sure that the working directory of the `callr::r()` call is the same as the effective working directory of,NA
reprex,1,15,15,FALSE,rstudioapi moves from Suggests to Imports. Related to improving the experience when reprex cannot access the user's clipboard.,NA
reprex,1,16,16,FALSE,mockr is new in Suggests; it's used in the tests.,NA
reprex,1,17,17,FALSE,"We bumped the documented minimum version of Pandoc, because we use the `gfm` markdown variant to get GitHub-Flavored Markdown. The `gfm` variant was introduced in Pandoc 2.0 (released 2017-10-29).",NA
reprex,1,18,18,FALSE,"`reprex_VENUE(...)` is a new way to call `reprex(..., venue = ""VENUE"")`. For example, `reprex_r()` is equivalent to `reprex(venue = ""r"")`. This makes non-default venues easier to access via auto-completion (#256).",NA
reprex,1,19,19,FALSE,"`""slack""` is a new venue that tweaks the default Markdown output for pasting into Slack messages. It removes the `r` language identifier from the opening code fence, simplifies image links and, by default, suppresses the ad. Note that `venue = ""slack""` or `reprex_slack()` work best for people who opt-out of the WYSIWYG message editor: in *Preferences \> Advanced*, select ""Format messages with markup"".",NA
reprex,1,20,20,FALSE,"`venue = ""so""` (SO = Stack Overflow) has converged with default `venue = ""gh""` (GitHub). As of January 2019, SO [supports CommonMark fenced code blocks](https://meta.stackexchange.com/questions/125148/implement-style-fenced-markdown-code-blocks/322000#322000). The only remaining difference is that Stack Overflow does not support the collapsible details tag that we use on GitHub to reduce the clutter from, e.g., session info (#231).",NA
reprex,1,21,21,FALSE,"`""rtf""` (Rich Text Format) is a new experimental `venue` for pasting into applications like PowerPoint and Keynote. It is experimental because it requires a working installation of the highlight command line tool, which is left as a somewhat fiddly exercise for the user (#331). `venue = ""rtf""` is documented in its [own article](https://reprex.tidyverse.org/articles/articles/rtf.html).",NA
reprex,1,22,22,FALSE,"`reprex.current_venue` is a new read-only option that is set during `reprex_render()`. Other packages can use it to generate `reprex()`-compatible, `venue`-aware output, such as an renv lockfile.",NA
reprex,1,23,23,FALSE,`reprex()` has been internally refactored to make better use of the official machinery for extending rmarkdown:,NA
reprex,2,23,24,FALSE,* `reprex_document()` is a new R Markdown output format.,`reprex()` has been internally refactored to make better use of the official machinery for extending rmarkdown:
reprex,2,23,25,FALSE,* `reprex_render()` is a newly exported function.,`reprex()` has been internally refactored to make better use of the official machinery for extending rmarkdown:
reprex,2,23,26,FALSE,"* A `reprex_document()` is designed to be rendered with `reprex_render()`. `reprex_render()` is designed to act on a `reprex_document()`. This is (still) the heart of what the `reprex()` function does, in addition to various interface and workflow niceties.",`reprex()` has been internally refactored to make better use of the official machinery for extending rmarkdown:
reprex,2,23,27,FALSE,"* Two R Markdown templates ship with the package, which an RStudio user can access via *File \> New File \> R Markdown ... \> From Template*. One is minimal; the other uses lots of reprex features. Both include `knit: reprex::reprex_render` in the YAML, which causes the RStudio ""Knit"" button to use `reprex_render()`.",`reprex()` has been internally refactored to make better use of the official machinery for extending rmarkdown:
reprex,1,28,28,FALSE,"`prex()`, `prex_VENUE()`, and `prex_render()` are new **unexported** functions that, like `reprex()`, render a small bit of code, but with much less **re**producibility! The code is evaluated in the global workspace of the current process, with the current working directory. This pragmatic hack is useful when preparing a series of related snippets, e.g., for a Keynote or PowerPoint presentation, and there's not enough space to make each one self-contained.",NA
reprex,1,29,29,FALSE,"UTF-8 encoding: Following the lead of knitr, reprex makes explicit use of UTF-8 internally (#237 @krlmlr, #261).",NA
reprex,1,30,30,FALSE,"When the reprex causes R to crash, `reprex(std_out_err = TRUE)` is able to provide more information about the crash, in some cases (#312).",NA
reprex,1,31,31,FALSE,"The `tidyverse_quiet` argument and `reprex.tidyverse_quiet` option also control startup messages from the [tidymodels](https://www.tidymodels.org) meta-package (#326, @juliasilge).",NA
reprex,1,32,32,FALSE,`reprex_locale()` is a new thin wrapper around `reprex()` that renders in a temporarily-altered locale (#250).,NA
reprex,1,33,33,FALSE,"The `si` argument of `reprex()` is now `session_info`. Being explicit seems more important than saving characters, given auto-completion.",NA
reprex,1,34,34,FALSE,"The `show` argument of `reprex()` is now `html_preview`, for the sake of consistency with other R Markdown output formats.",NA
reprex,1,35,35,FALSE,"New article on techniques for making package startup quieter (#187, @marionlouveaux).",NA
reprex,1,36,36,FALSE,"sessioninfo is new in Suggests, replacing devtools.",NA
reprex,1,37,37,FALSE,"glue is new in Imports, replacing whisker.",NA
reprex,1,38,38,FALSE,"knitr moves from Suggests to Imports (although it was already a hard dependency via rmarkdown), so we can require v1.23 or higher, which represents a major switch to UTF-8.",NA
reprex,1,39,39,FALSE,cli is new in Imports.,NA
reprex,1,40,40,FALSE,"reprex now relies on testthat \>= 3.0.0 and, specifically, uses third edition features.",NA
reprex,1,41,41,FALSE,"The `crayon.enabled` option is explicitly set to `FALSE` when rendering the reprex (#238, #239).",NA
reprex,1,42,42,FALSE,"Expression input is once again captured via `substitute()` (as opposed to `rlang::enexpr()`), which is more favorable for reprexes involving tidy eval (#241).",NA
reprex,1,43,43,FALSE,"New venue ""html"" to render HTML fragments, useful for pasting in sites without markdown but that allow HTML (#236 @cwickham).",NA
reprex,1,44,44,FALSE,The YAML of reprex's template has been updated in light of the stricter YAML parser used in Pandoc \>= 2.2.2.,NA
reprex,1,45,45,FALSE,`rlang::set_attrs()` has been soft-deprecated and is no longer used internally.,NA
reprex,1,46,46,FALSE,"The reprex ad is formatted as superscript for `venue = ""gh""` and `venue = ""so""`, i.e. it is more subtle (#201).",NA
reprex,1,47,47,FALSE,"New experimental venue ""rtf"" produces syntax highlighted snippets suitable for pasting into presentation software such as Keynote or PowerPoint. This venue is discussed in [an article](https://reprex.tidyverse.org/articles/articles/rtf.html) (#26).",NA
reprex,1,48,48,FALSE,Arguments `opts_chunk` and `opts_knit` have been removed from `reprex()`. The same effect has always been achievable via roxygen comments in the reprex code and the examples have always demonstrated this. Overriding knitr options doesn't seem to come up often enough in real-world `reprex()` usage to justify these arguments.,NA
reprex,1,49,49,FALSE,Internal file system operations use the [fs](https://fs.r-lib.org) package. This should not make any user-facing changes in reprex and we definitely want to know if it does.,NA
reprex,1,50,50,FALSE,"`advertise`: toggles inclusion of a footer that describes when and how the reprex was created, e.g., ""Created on 2017-11-16 by the",NA
reprex,1,51,51,FALSE,"`style`: requests code restyling via the newly-Suggested styler package. styler can cope with tidyeval syntactical sugar, e.g. `df %>% group_by(!! group_var)`. Defaults to `FALSE` (#108,",NA
reprex,1,52,52,FALSE,"`tidyverse_quiet`: affords control of the startup message of the tidyverse meta-package. Defaults to `TRUE`, i.e. suppresses the",NA
reprex,1,53,53,FALSE,`std_out_err`: appends output sent to stdout and stderr by the reprex rendering process. This can be necessary to reveal output if the reprex spawns child processes or has `system()` calls. Defaults,NA
reprex,1,54,54,FALSE,`render`: determines if the reprex is actually rendered or just returns after producing the templated `.R` file. For internal,NA
reprex,1,55,55,FALSE,"Line wrapping is preserved from source via a Pandoc option (#145 @jimhester, #175).",NA
reprex,1,56,56,FALSE,"`venue = ""gh""` now targets CommonMark as the standard for GitHub Flavored Markdown (#77).",NA
reprex,1,57,57,FALSE,"`venue = ""so""` has appropriate whitespace at the start.",NA
reprex,1,58,58,FALSE,"`venue = ""ds""` is a new value, corresponding to <https://www.discourse.org>, which is the platform behind [community.rstudio.com](https://community.rstudio.com). This is currently just an alias for the default `""gh""` GitHub venue, because the formatting appears to be compatible. Adding the `""ds""` value so Discourse can be documented and to guard against the possibility that some formatting is actually unique.",NA
reprex,1,59,59,FALSE,"The `keep.source` option is set to `TRUE` when rendering the reprex, so reprexes involving srcrefs should work (#152).",NA
reprex,1,60,60,FALSE,"The ""undo"" functions (`reprex_invert()`, `reprex_clean()`, `reprex_rescue()`) handle `input` and `outfile` like `reprex()` does. The `outfile` argument is new (#129, #68).",NA
reprex,1,61,61,FALSE,"The default value for knitr's `upload.fun` is now set according to the venue. It is `knitr::imgur_upload()` for all venues except `""r""`, where it is `identity` (#125).",NA
reprex,1,62,62,FALSE,"The HTML preview should appear in the RStudio Viewer more consistently, especially on Windows (#75 @yutannihilation).",NA
reprex,1,63,63,FALSE,More rigorous use of UTF-8 encoding (#76 @yutannihilation).,NA
reprex,1,64,64,FALSE,"Expression input handling has been refactored. As a result, formatR is no longer Suggested. Trailing comments -- inline and on their own line -- are also now retained (#89, #91, #114, @jennybc and @jimhester).",NA
reprex,1,65,65,FALSE,"Custom prompts are now escaped when used in regexes (#98, #99 @jimhester). Embedded newlines are now escaped.",NA
reprex,1,67,67,FALSE,"`outfile = NA` causes outfiles to be left in working directory. Filenames will be based on the `input` file, if there was one.",NA
reprex,1,68,68,FALSE,`reprex()` strips any leading prompts from input code.,NA
reprex,1,69,69,FALSE,"Added functions `reprex_clean()`, `reprex_invert()`, and `reprex_rescue()` in order to go backwards, i.e. recover source from a wild-caught reprex.",NA
reprex,1,70,70,FALSE,"`venue = ""R""` (or `""r""`) can be used to get an R script back, augmented with commented output.",NA
reprex,1,71,71,FALSE,`comment` argument added to specify prefix for commented output.,NA
reprex,1,72,72,FALSE,"Added an RStudio addin, accessed via ""Render reprex"".",NA
reprex,1,73,73,FALSE,"`input` argument to `reprex()` and friends handles code as string, character vector, or file path.",NA
reprex,1,74,74,FALSE,"The reprex is rendered via `callr::r_safe()` and is thus run in a clean, separate R process, eliminating any leakage of objects or loaded packages to/from the calling session.",NA
reprex,1,75,75,FALSE,"`reprex()` gains optional arguments `opts_chunk` and `opts_knit`, taking named list as input, in order to supplement or override default knitr chunk and package options, respectively. (#33)",NA
reprex,2,75,76,FALSE,"* This made the explicit `upload.fun` argument unnecessary, so it's gone. The `upload.fun` option defaults to `knitr::imgur_upload`, which means figures produced by the reprex will be uploaded to [imgur.com](https://imgur.com/) and the associated image syntax will be put into the Markdown, e.g. `![](https://i.imgur.com/QPU5Cg9.png)`. (#15 @paternogbc)","`reprex()` gains optional arguments `opts_chunk` and `opts_knit`, taking named list as input, in order to supplement or override default knitr chunk and package options, respectively. (#33)"
reprex,1,77,77,FALSE,Order of `reprex()` arguments has changed.,NA
reprex,1,78,78,FALSE,"`reprex()` gains the `si` argument to request that `devtools::session_info()` or `sessionInfo()` be appended to reprex code (#6 @dgrtwo). When `si = TRUE` and `venue = ""gh""` (the default), session info is wrapped in a collapsible details tag. See [an example](https://github.com/tidyverse/reprex/issues/55) (#55).",NA
reprex,1,79,79,FALSE,"Reprex code can be provided as an R expression. (#6 @dgrtwo, #35)",NA
reprex,1,80,80,FALSE,"`reprex()` uses clipboard functionality from [`clipr`](https://CRAN.R-project.org/package=clipr) and thus should work on Windows and suitably prepared Unix-like systems, in addition to Mac OS. (#16 @mdlincoln)",NA
rlang,1,1,1,FALSE,`as_closure(seq.int)` now works (#1468).,NA
rlang,1,2,2,FALSE,rlang no longer stores errors and backtraces in a `org:r-lib` environment on the search path.,NA
rlang,1,3,3,FALSE,The low-level function `error_call()` is now exported (#1474).,NA
rlang,1,4,4,FALSE,Fixed an issue that caused a failure about a missing `is_character` function when rlang is installed alongside an old version of vctrs (#1482).,NA
rlang,1,5,5,FALSE,Fixed an issue that caused multiline calls in backtraces.,NA
rlang,1,6,6,FALSE,The C API function `r_lgl_which()` now propagates the names of the input (#1471).,NA
rlang,1,7,7,FALSE,"The `pkg_version_info()` function now allows `==` for package version comparison (#1469, @kryekuzhinieri).",NA
rlang,1,8,8,FALSE,Fixed backtrace display with calls containing long lists of arguments (#1456).,NA
rlang,1,9,9,FALSE,New `r_obj_type_friendly()` function in the C library (#1463). It interfaces with `obj_type_friendly()` from `compat-obj-type.R` via a C callable.,NA
rlang,1,10,10,FALSE,`is_installed()` no longer throws an error with irregular package names.,NA
rlang,1,11,11,FALSE,`is_installed()` and `check_installed()` now properly detect that the base package is installed on older versions of R (#1434).,NA
rlang,1,12,12,FALSE,Child errors may now have empty messages to enable this pattern:,NA
rlang,1,12,13,TRUE,"```
Error in `my_function()`:
Caused by error in `their_function()`:
! Message.
```",NA
rlang,1,13,14,FALSE,The `rlib_bytes` class now uses prettyunits to format bytes. The bytes are now represented with decimal prefixes instead of binary prefixes.,NA
rlang,1,14,15,FALSE,"Supplying a frame environment to the `call` argument of `abort()` now causes the corresponding function call in the backtrace to be highlighted. In addition, if you store the argument name of a failing input in the `arg` error field, the argument is also highlighted in the backtrace. Instead of:",NA
rlang,1,14,16,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", call = call)
```",NA
rlang,1,14,16,FALSE,You can now write this to benefit from arg highlighting:,NA
rlang,1,14,17,TRUE,"```
cli::cli_abort(""{.arg {arg}} must be a foobar."", arg = arg, call = call)
```",NA
rlang,1,15,18,FALSE,"`abort(message = )` can now be a function. In this case, it is stored in the `header` field and acts as a `cnd_header()` method invoked when the message is displayed.",NA
rlang,1,16,19,FALSE,New `obj_type_oo()` function in `compat-obj-type.R` (#1426).,NA
rlang,1,17,20,FALSE,`friendly_type_of()` from `compat-obj-type.R` (formerly `compat-friendly-type.R`) is now `obj_type_friendly()`.,NA
rlang,1,18,21,FALSE,"`options(backtrace_on_error = ""collapse"")` and `print(trace, simplify = ""collapse"")` are deprecated. They fall back to `""none""` with a warning.",NA
rlang,1,19,22,FALSE,`call_match()` now better handles `...` when `dots_expand = FALSE`.,NA
rlang,1,20,23,FALSE,`list2(!!!x)` is now faster when `x` is a list. It is now returned as is instead of being duplicated into a new list.,NA
rlang,1,21,24,FALSE,`abort()` gains a `.trace_bottom` argument to disambiguate from other `.frame`. This allows `cli::cli_abort()` to wrap `abort()` in such a way that `.internal` mentions the correct package to report the error in (#1386).,NA
rlang,1,22,25,FALSE,The `transpose()` compat is now more consistent with purrr when inner names are not congruent (#1346).,NA
rlang,1,23,26,FALSE,New `reset_warning_verbosity()` and `reset_message_verbosity()` functions. These reset the verbosity of messages signalled with `warn()` and `inform()` with the `.frequency` argument. This is useful for testing verbosity in your package (#1414).,NA
rlang,1,24,27,FALSE,`check_dots_empty()` now allows trailing missing arguments (#1390).,NA
rlang,1,25,28,FALSE,Calls to local functions that are not accessible through `::` or `:::` are now marked with `(local)` in backtraces (#1399).,NA
rlang,1,26,29,FALSE,Error messages now mention indexed calls like `foo$bar()`.,NA
rlang,1,27,30,FALSE,"New `env_coalesce()` function to copy bindings from one environment to another. Unlike approaches based on looping with `[[<-`, `env_coalesce()` preserves active and lazy bindings.",NA
rlang,1,28,31,FALSE,Chaining errors at top-level (directly in the console instead of in a function) no longer fails (#1405).,NA
rlang,1,29,32,FALSE,Warning style is propagated across parent errors in chained error messages (#1387).,NA
rlang,1,30,33,FALSE,"`check_installed()` now works within catch-all `tryCatch(error = )` expressions (#1402, tidyverse/ggplot2#4845).",NA
rlang,1,31,34,FALSE,`arg_match()` and `arg_match0()` now mention the correct call in case of type error (#1388).,NA
rlang,1,32,35,FALSE,`abort()` and `inform()` now print messages to `stdout` in RStudio panes (#1393).,NA
rlang,1,33,36,FALSE,`is_installed()` now detects unsealed namespaces (#1378). This fixes inconsistent behaviour when run within user onLoad hooks.,NA
rlang,1,34,37,FALSE,Source references in backtraces and `last_error()`/`last_trace()` instructions are now clickable in IDEs that support links (#1396).,NA
rlang,1,35,38,FALSE,`compat-cli.R` now supports `style_hyperlink()`.,NA
rlang,1,36,39,FALSE,"`abort(.homonyms = ""error"")` now throws the expected error (#1394).",NA
rlang,1,37,40,FALSE,`env_binding_are_active()` no longer accidentally triggers active bindings (#1376).,NA
rlang,1,38,41,FALSE,Fixed bug in `quo_squash()` with nested quosures containing the missing argument.,NA
rlang,1,39,42,FALSE,Backtraces of parent errors are now reused on rethrow. This avoids capturing the same backtrace twice and solves consistency problems by making sure both errors in a chain have the same backtrace.,NA
rlang,1,40,43,FALSE,Fixed backtrace oversimplification when `cnd` is a base error in `abort(parent = cnd)`.,NA
rlang,1,41,44,FALSE,Internal errors thrown with `abort(.internal = TRUE)` now mention the name of the package the error should be reported to.,NA
rlang,1,42,45,FALSE,Backtraces are now separated from error messages with a `---` ruler line (#1368).,NA
rlang,1,43,46,FALSE,"The internal bullet formatting routine now ignores unknown names (#1364). This makes it consistent with the cli package, increases resilience against hard-to-detect errors, and increases forward compatibility.",NA
rlang,1,44,47,FALSE,"`abort()` and friends no longer calls non-existent functions (e.g. `cli::format_error()` or `cli::format_warning`) when the installed version of cli is too old (#1367, tidyverse/dplyr#6189).",NA
rlang,1,45,48,FALSE,Fixed an OOB subsetting error in `abort()`.,NA
rlang,1,46,49,FALSE,"New `rlang_call_format_srcrefs` global option (#1349). Similar to `rlang_trace_format_srcrefs`, this option allows turning off the display of srcrefs in error calls. This can be useful for reproducibility but note that srcrefs are already disabled within testthat by default.",NA
rlang,1,47,50,FALSE,`abort(parent = NA)` is now supported to indicate an unchained rethrow. This helps `abort()` detect the condition handling context to create simpler backtraces where this context is hidden by default.,NA
rlang,1,48,51,FALSE,"When `parent` is supplied, `abort()` now loops over callers to detect the condition handler frame. This makes it easier to wrap or extract condition handlers in functions without supplying `.frame`.",NA
rlang,1,49,52,FALSE,"When `parent` is supplied and `call` points to the condition setup frame (e.g. `withCallingHandlers()` or `try_fetch()`), `call` is replaced with the caller of that setup frame. This provides a more helpful default call.",NA
rlang,1,50,53,FALSE,`is_call()` is now implemented in C for performance.,NA
rlang,1,51,54,FALSE,Fixed performance regression in `trace_back()`.,NA
rlang,1,52,55,FALSE,"Fixed a partial matching issue with `header`, `body`, and `footer` condition fields.",NA
rlang,1,53,56,FALSE,`eval_tidy()` calls are no longer mentioned in error messages.,NA
rlang,1,54,57,FALSE,`abort()` now displays errors as fully bulleted lists. Error headers are displayed with a `!` prefix. See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise the display of error messages.,NA
rlang,1,55,58,FALSE,"`abort()` now displays a full chain of messages when errors are chained with the `parent` argument. Following this change, you should update dplyr to version 1.0.8 to get proper error messages.",NA
rlang,1,56,59,FALSE,"`abort()` now displays function calls in which a message originated by default. We have refrained from showing these calls until now to avoid confusing messages when an error is thrown from a helper function that isn't relevant to users. To help with these cases, `abort()` now takes a `call` argument that you can set to `caller_env()` or `parent.frame()` when used in a helper function. The function call corresponding to this environment is retrieved and stored in the condition.",NA
rlang,1,57,60,FALSE,"cli formatting is now supported. Use `cli::cli_abort()` to get advanced formatting of error messages, including indented bulleted lists. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html>.",NA
rlang,1,58,61,FALSE,New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.,NA
rlang,2,58,62,FALSE,"* Compared to `tryCatch()`, `try_fetch()` preserves the call stack. This allows full backtrace capture and allows `recover()` to reach the error site.",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rlang,2,58,63,FALSE,"* Compared to `withCallingHandler()`, `try_fetch()` is able to handle stack overflow errors (this requires R 4.2, unreleased at the time of writing).",New `try_fetch()` function for error handling. We recommend to use it for chaining errors. It mostly works like `tryCatch()` with a few important differences.
rlang,1,61,64,FALSE,"The tidy eval documentation has been fully rewritten to reflect current practices. Access it through the ""Tidy evaluation"" and ""Metaprogramming"" menus on <https://rlang.r-lib.org>.",NA
rlang,1,62,65,FALSE,The `.data` object exported by rlang now fails when subsetted instead of returning `NULL`. This new error helps you detect when `.data` is used in the wrong context. We've noticed several packages failing after this change because they were using `.data` outside of a data-masking context. For instance the `by` argument of `dplyr::join()` is not data-masked. Previously `dplyr::join(by = .data$foo)` would silently be interpreted as `dplyr::join(by = NULL)`. This is now an error. Another issue is using `.data` inside `ggplot2::labs(...)`. This is not allowed since `labs()` isn't data-masked.,NA
rlang,1,63,66,FALSE,"`call_name()` now returns `NULL` instead of `""::""` for calls of the form `foo::bar`. We've noticed some packages do not check for `NULL` results from `call_name()`. Note that many complex calls such as `foo()()`, `foo$bar()` don't have a ""name"" and cause a `NULL` result. This is why you should always check for `NULL` results when using `call_name()`. We've added the function `is_call_simple()` to make it easier to work safely with `call_name()`. The invariant is that `call_name()` always returns a string when `is_call_simple()` returns `TRUE`. Conversely it always returns `NULL` when `is_call_simple()` retuns `FALSE`.",NA
rlang,1,64,67,FALSE,"`is_expression()` now returns `FALSE` for manually constructed expressions that can't be created by the parser. It used to return `TRUE` for any calls, including those that contain injected objects. Consider using `is_call()` or just remove the expression check. In many cases it is fine letting all objects go through when an expression is expected. For instance you can inject objects directly inside dplyr arguments:",NA
rlang,1,64,68,TRUE,"```
x <- seq_len(nrow(data))
dplyr::mutate(data, col = !!x)
```",NA
rlang,1,65,69,FALSE,"If a string is supplied to `as_function()` instead of an object (function or formula), the function is looked up in the global environment instead of the calling environment. In general, passing a function name as a string is brittle. It is easy to forget to pass the user environment to `as_function()` and sometimes there is no obvious user environment. The support for strings should be considered a convenience for end users only, not for programmers. Since environment forwarding is easy to mess up, and since the feature is aimed towards end users, `as_function()` now defaults to the global environment. Supply an environment explicitly if that is not correct in your case.",NA
rlang,1,66,70,FALSE,"`with_handlers()`, `call_fn()`, and `friendly_type()` are deprecated.",NA
rlang,1,67,71,FALSE,"The `action` argument of `check_dots_used()`, `check_dots_unnamed()`, and `check_dots_empty()` is deprecated in favour of the new `error` argument which takes an error handler.",NA
rlang,1,68,72,FALSE,Many functions deprecated deprecated in rlang 0.2.0 and 0.3.0 have been removed from the package.,NA
rlang,1,69,73,FALSE,New `englue()` operator to allow string-embracing outside of dynamic dots (#1172).,NA
rlang,1,70,74,FALSE,New `data_sym()` and `data_syms()` functions to create calls of the form `.data$foo`.,NA
rlang,1,71,75,FALSE,"`.data` now fails early when it is subsetted outside of a data mask context. This provides a more informative error message (#804, #1133).",NA
rlang,1,72,76,FALSE,"`as_label()` now better handles calls to infix operators (#956, r-lib/testthat#1432). This change improves auto-labelled expressions in data-masking functions like `tibble()`, `mutate()`, etc.",NA
rlang,1,73,77,FALSE,"The `{{` operator is now detected more strictly (#1087). If additional arguments are supplied through `{`, it is no longer interpreted as an injection operator.",NA
rlang,1,74,78,FALSE,"The `.ignore_empty` argument of `enexprs()` and `enquos()` no longer treats named arguments supplied through `...` as empty, consistently with `exprs()` and `quos()` (#1229).",NA
rlang,1,75,79,FALSE,Fixed a hang when a quosure inheriting from a data mask is evaluated in the mask again.,NA
rlang,1,76,80,FALSE,"Fixed performance issue when splicing classes that explicitly inherit from list with `!!!` (#1140, r-lib/vctrs#1170).",NA
rlang,1,77,81,FALSE,Attributes of quosure lists are no longer modified by side effect (#1142).,NA
rlang,1,78,82,FALSE,"`enquo()`, `enquos()` and variants now support numbered dots like `..1` (#1137).",NA
rlang,1,79,83,FALSE,Fixed a bug in the AST rotation algorithm that caused the `!!` operator to unexpectedly mutate injected objects (#1103).,NA
rlang,1,80,84,FALSE,Fixed AST rotation issue with `!!` involving binary operators (#1125).,NA
rlang,1,81,85,FALSE,`try_fetch()` is a flexible alternative to both `tryCatch()` and `withCallingHandlers()` (#503). It is also more efficient than `tryCatch()` and creates leaner backtraces.,NA
rlang,1,82,86,FALSE,New `cnd_inherits()` function to detect a class in a chain of errors (#1293).,NA
rlang,1,83,87,FALSE,"New `global_entrace()` function, a user-friendly helper for configuring errors in your RProfile. Call it to enrich all base errors and warnings with an rlang backtrace. This enables `last_error()`, `last_warnings()`, `last_messages()`, and `backtrace_on_error` support for all conditions.",NA
rlang,1,84,88,FALSE,New `global_handle()` function to install a default configuration of error handlers. This currently calls `global_entrace()` and `global_prompt_install()`. Expect more to come.,NA
rlang,1,85,89,FALSE,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:",NA
rlang,2,85,90,FALSE,"* The `call` field of error messages is now displayed, as is the default in `base::stop()`. The call is only displayed if it is a simple expression (e.g. no inlined function) and the arguments are not displayed to avoid distracting from the error message. The message is formatted with the tidyverse style (`code` formatting by the cli package if available).","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rlang,2,85,91,FALSE,* The source location is displayed (as in `base::stop()`) if `call` carries a source reference. Source locations are not displayed when testthat is running to avoid brittle snapshots.,"The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rlang,2,85,92,FALSE,"* Error headers are always displayed on their own line, with a `""!""` bullet prefix.","The ""Error:"" part of error messages is now printed by rlang instead of R. This introduces several cosmetic and informative changes in errors thrown by `abort()`:"
rlang,1,88,92,FALSE,See <https://rlang.r-lib.org/reference/topic-condition-customisation.html> to customise this new display.,NA
rlang,1,89,93,FALSE,"The display of chained errors created with the `parent` argument of `abort()` has been improved. Chains of errors are now displayed at throw time with the error prefix ""Caused by error:"".",NA
rlang,1,90,94,FALSE,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:,NA
rlang,2,90,95,FALSE,* Display calls if present.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rlang,2,90,96,FALSE,* Chained errors are displayed more clearly.,The `print()` method of rlang errors (commonly invoked with `last_error()`) has been improved:
rlang,1,93,97,FALSE,`inform()` and `warn()` messages can now be silenced with the global options `rlib_message_verbosity` and `rlib_warning_verbosity`.,NA
rlang,1,94,98,FALSE,"`abort()` now outputs error messages to `stdout` in interactive sessions, following the same approach as `inform()`.",NA
rlang,1,95,99,FALSE,"Errors, warnings, and messages generated from rlang are now formatted with cli. This means in practice that long lines are width-wrapped to the terminal size and user themes are applied. This is currently only the case for rlang messages. This special formatting is not applied when `abort()`, `warn()`, and `inform()` are called from another namespace than rlang. See <https://rlang.r-lib.org/reference/topic-condition-formatting.html> if you'd like to use cli to format condition messages in your package.",NA
rlang,1,96,100,FALSE,`format_error_bullets()` (used as a fallback instead of cli) now treats:,NA
rlang,2,96,101,FALSE,* Unnamed elements as unindented line breaks (#1130),`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,102,FALSE,"* Elements named `""v""` as green ticks (@rossellhayes)",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,103,FALSE,"* Elements named `"" ""` as indented line breaks",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,104,FALSE,"* Elements named `""*""` as normal bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,2,96,105,FALSE,"* Elements named `""!""` as warning bullets",`format_error_bullets()` (used as a fallback instead of cli) now treats:
rlang,1,101,105,FALSE,"For convenience, a fully unnamed vector is interpreted as a vector of `""*""` bullets.",NA
rlang,1,102,106,FALSE,"`abort()` gains a `.internal` argument. When set to `TRUE`, a footer bullet is added to `message` to let the user know that the error is internal and that they should report it to the package authors.",NA
rlang,1,103,107,FALSE,"`abort()`, `warn()`, and `inform()` gain a `body` argument to supply additional bullets in the error message.",NA
rlang,1,104,108,FALSE,"rlang conditions now have `as.character()` methods. Use this generic on conditions to generate a whole error message, including the `Error:` prefix. These methods are implemented as wrappers around `cnd_message()`.",NA
rlang,1,105,109,FALSE,`header` and `footer` methods can now be stored as closures in condition fields of the same name.,NA
rlang,1,106,110,FALSE,"`cnd_message()` gains a `prefix` argument to print the message with a full prefix, including `call` field if present and parent messages if the condition is chained.",NA
rlang,1,107,111,FALSE,`cnd_message()` gains an `inherit` argument to control whether to print the messages of parent errors.,NA
rlang,1,108,112,FALSE,Condition constructors now check for duplicate field names (#1268).,NA
rlang,1,109,113,FALSE,"`cnd_footer()` now returns the `footer` field by default, if any.",NA
rlang,1,110,114,FALSE,"`warn()` and `inform()` now signal conditions of classes `""rlang_warning""` and `""rlang_message""` respectively.",NA
rlang,1,111,115,FALSE,The `body` field of error conditions can now be a character vector.,NA
rlang,1,112,116,FALSE,"The error returned by `last_error()` is now stored on the search path as the `.Last.error` binding of the `""org:r-lib""` environment. This is consistent with how the processx package records error conditions. Printing the `.Last.error` object is now equivalent to running `last_error()`.",NA
rlang,1,113,117,FALSE,"Added `is_error()`, `is_warning()`, and `is_message()` predicates (#1220).",NA
rlang,1,114,118,FALSE,`interrupt()` no longer fails when interrupts are suspended (#1224).,NA
rlang,1,115,119,FALSE,"`warn()` now temporarily sets the `warning.length` global option to the maximum value (8170). The default limit (1000 characters) is especially easy to hit when the message contains a lot of ANSI escapes, as created by the crayon or cli packages (#1211).",NA
rlang,1,116,120,FALSE,`entrace()` and `global_entrace()` now log warnings and messages with backtraces attached. Run `last_warnings()` or `last_messages()` to inspect the warnings or messages emitted during the last command.,NA
rlang,1,117,121,FALSE,Internal errors now include a winch backtrace if installed. The user is invited to install it if not installed.,NA
rlang,1,118,122,FALSE,"Display of rlang backtraces for expected errors in dynamic reports (chunks where `error = TRUE` in knitted documents and RStudio notebooks) is now controlled by the `rlang_backtrace_on_error_report` option. By default, this is set to `""none""`. The display of backtraces for *unexpected* errors (in chunks where `error` is unset or set to `FALSE`) is still controlled by `rlang_backtrace_on_error`.",NA
rlang,1,119,123,FALSE,The `last_error()` reminder is no longer displayed in RStudio notebooks.,NA
rlang,1,120,124,FALSE,"A `knitr::sew()` method is registered for `rlang_error`. This makes it possible to consult `last_error()` (the call must occur in a different chunk than the error) and to set `rlang_backtrace_on_error_report` global options in knitr to display a backtrace for expected errors. If you show rlang backtraces in a knitted document, also set this in a hidden chunk to trim the knitr context from the backtraces:",NA
rlang,1,120,125,TRUE,"```
options(
  rlang_trace_top_env = environment()
)
```",NA
rlang,1,120,125,FALSE,This change replaces an ad hoc mechanism that caused bugs in corner cases (#1205).,NA
rlang,1,121,126,FALSE,"The `rlang_trace_top_env` global option for `trace_back()` now detects when backtraces are created within knitr. If the option is not set, its default value becomes `knitr::knit_global()` when knitr is in progress (as determined from `knitr.in.progress` global option). This prevents the knitr evaluation context from appearing in the backtraces (#932).",NA
rlang,1,122,127,FALSE,Namespace changes are now emboldened in backtraces (#946).,NA
rlang,1,123,128,FALSE,Functions defined in the global environments or in local execution environments are now displayed with a space separator in backtraces instead of `::` and `:::`. This avoids making it seem like these frame calls are valid R code ready to be typed in (#902).,NA
rlang,1,124,129,FALSE,"Backtraces no longer contain inlined objects to avoid performance issues in edge cases (#1069, r-lib/testthat#1223).",NA
rlang,1,125,130,FALSE,External backtraces in error chains are now separately displayed (#1098).,NA
rlang,1,126,131,FALSE,Trace capture now better handles wrappers of calling handler in case of rethrown chained errors.,NA
rlang,1,127,132,FALSE,Backtraces now print dangling srcrefs (#1206). Paths are shortened to show only three components (two levels of folder and the file).,NA
rlang,1,128,133,FALSE,The root symbol in backtraces is now slightly different so that it can't be confused with a prompt character (#1207).,NA
rlang,1,129,134,FALSE,`arg_match()` gains a `multiple` argument for cases where zero or several matches are allowed (#1281).,NA
rlang,1,130,135,FALSE,New function `check_required()` to check that an argument is supplied. It produces a more friendly error message than `force()` (#1118).,NA
rlang,1,131,136,FALSE,"`check_dots_empty()`, `check_dots_used()`, and `check_dots_unnamed()` have been moved from ellipsis to rlang. The ellipsis package is deprecated and will eventually be archived. We have added `check_dots_empty0()`. It has a different UI but is almost as efficient as checking for `missing(...)`. Use this in very low level functions where a couple microseconds make a difference.",NA
rlang,1,132,137,FALSE,The `arg_nm` argument of `arg_match0()` must now be a string or symbol.,NA
rlang,1,133,138,FALSE,`arg_match()` now mentions the supplied argument (#1113).,NA
rlang,1,134,139,FALSE,`is_installed()` and `check_installed()` gain a `version` argument (#1165).,NA
rlang,1,135,140,FALSE,`check_installed()` now consults the `rlib_restart_package_not_found` global option to determine whether to prompt users to install packages. This also disables the restart mechanism (see below).,NA
rlang,1,136,141,FALSE,`check_installed()` now signals errors of class `rlib_error_package_not_found` with a `rlib_restart_package_not_found` restart. This allows calling handlers to install the required packages and restart the check (#1150).,NA
rlang,1,137,142,FALSE,"`is_installed()` and `check_installed()` now support DESCRIPTION-style version requirements like `""rlang (>= 1.0)""`. They also gain `version` and `compare` arguments to supply requirements programmatically.",NA
rlang,1,138,143,FALSE,`check_installed()` gains an `action` argument that is called when the user chooses to install and update missing and outdated packages.,NA
rlang,1,139,144,FALSE,New `check_exclusive()` function to check that only one argument of a set is supplied (#1261).,NA
rlang,1,140,145,FALSE,`on_load()` and `run_on_load()` lets you run `.onLoad()` expressions from any file of your package. `on_package_load()` runs expressions when another package is loaded. (#1284),NA
rlang,1,141,146,FALSE,The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:,NA
rlang,2,141,147,FALSE,"* If `is_call_simple(x)` is `TRUE`, `call_name()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rlang,2,141,148,FALSE,"* If `is_call_simple(x, ns = TRUE)` is `TRUE`, `call_ns()` always returns a string.",The new predicate `is_call_simple()` indicates whether a call has a name and/or a namespace. It provides two invariants:
rlang,1,144,149,FALSE,`call_name()` and `call_ns()` now return `NULL` with calls of the form `foo::bar` (#670).,NA
rlang,1,145,150,FALSE,"New `current_call()`, `caller_call()`, and `frame_call()` accessors. New `frame_fn()` accessor.",NA
rlang,1,146,151,FALSE,`env_has()` and the corresponding C-level function no longer force active bindings (#1292).,NA
rlang,1,147,152,FALSE,New `names2<-` replacement function that never adds missing values when names don't have names (#1301).,NA
rlang,1,148,153,FALSE,`zap_srcref()` now preserves attributes of closures.,NA
rlang,1,149,154,FALSE,"Objects headers (as printed by `last_error()`, `env_print()`, ...) are now formatted using the `cls` class of the cli package.",NA
rlang,1,150,155,FALSE,`as_function()` gains `arg` and `call` arguments to provide contextual information about erroring inputs.,NA
rlang,1,151,156,FALSE,`is_expression()` now returns `FALSE` for manually constructed expressions that cannot be created by the R parser.,NA
rlang,1,152,157,FALSE,"New C callable `rlang_env_unbind()`. This is a wrapper around `R_removeVarFromFrame()` on R \>= 4.0.0. On older R this wraps the R function `base::rm()`. Unlike `rm()`, this function does not warn (nor throw) when a binding does not exist.",NA
rlang,1,153,158,FALSE,`friendly_type_of()` now supports missing arguments.,NA
rlang,1,154,159,FALSE,"`env_clone()` now properly clones active bindings and avoids forcing promises (#1228). On R \< 4.0, promises are still forced.",NA
rlang,1,155,160,FALSE,Fixed an `s3_register()` issue when the registering package is a dependency of the package that exports the generic (#1225).,NA
rlang,1,156,161,FALSE,Added `compat-vctrs.R` file for robust manipulation of data frames in zero-deps packages.,NA
rlang,1,157,162,FALSE,Added `compat-cli.R` file to format message elements consistently with cli in zero-deps packages.,NA
rlang,1,158,163,FALSE,`compat-purrr.R` now longer includes `pluck*` helpers; these used a defintion of pluck that predated purrr (#1159). `*_cpl()` has also been removed. The `map*` wrappers now call `as_function()` so that you can pass short anonymous functions that use `~` (#1157).,NA
rlang,1,159,164,FALSE,`exprs_auto_name()` gains a `repair_auto` argument to make automatic names unique (#1116).,NA
rlang,1,160,165,FALSE,"The `.named` argument of `dots_list()` can now be set to `NULL` to give the result default names. With this option, fully unnamed inputs produce a fully unnamed result with `NULL` names instead of a character vector of minimal `""""` names (#390).",NA
rlang,1,161,166,FALSE,`is_named2()` is a variant of `is_named()` that always returns `TRUE` for empty vectors (#191). It tests for the property that each element of a vector is named rather than the presence of a `names` attribute.,NA
rlang,1,162,167,FALSE,New `rlib_bytes` class imported from the bench package (#1117). It prints and parses human-friendly sizes.,NA
rlang,1,163,168,FALSE,"The `env` argument of `as_function()` now defaults to the global environment. Its previous default was the caller of `as_function()`, which was rarely the correct environment to look in. Since it's hard to remember to pass the user environment and it's sometimes tricky to keep track of it, it's best to consider string lookup as a convenience for end users, not for developers (#1170).",NA
rlang,1,164,169,FALSE,`s3_register()` no longer fails when generic does not exist. This prevents failures when users don't have all the last versions of packages (#1112).,NA
rlang,1,165,170,FALSE,Formulas are now deparsed according to the tidyverse style guide (`~symbol` without space and `~ expression()` with a space).,NA
rlang,1,166,171,FALSE,"New `hash_file()`, complementing `hash()`, to generate 128-bit hashes for the data within a file without loading it into R (#1134).",NA
rlang,1,167,172,FALSE,New `env_cache()` function to retrieve a value or create it with a default if it doesn't exist yet (#1081).,NA
rlang,1,168,173,FALSE,`env_get()` and `env_get_list()` gain a `last` argument. Lookup stops in that environment. This can be useful in conjunction with `base::topenv()`.,NA
rlang,1,169,174,FALSE,New `call_match()` function. It is like `match.call()` but also supports matching missing arguments to their defaults in the function definition (#875). `call_standardise()` is deprecated in favour of `call_match()`.,NA
rlang,1,170,175,FALSE,"`expr_deparse()` now properly escapes `\` characters in symbols, argument names, and vector names (#1160).",NA
rlang,1,171,176,FALSE,`friendly_type_of()` (from `compat-friendly-type.R`) now supports matrices and arrays (#141).,NA
rlang,1,172,177,FALSE,Updated `env_print()` to use `format_error_bullets()` and consistent tidyverse style (#1154).,NA
rlang,1,173,178,FALSE,"`set_names()` now recycles names of size 1 to the size of the input, following the tidyverse recycling rules.",NA
rlang,1,174,179,FALSE,`is_bare_formula()` now handles the `scoped` argument consistently. The default has been changed to `TRUE` for compatibility with the historical default behaviour (#1115).,NA
rlang,1,175,180,FALSE,"The ""definition"" API (`dots_definitions()` etc.) has been archived.",NA
rlang,1,176,181,FALSE,New `is_complex()` predicates to complete the family (#1127).,NA
rlang,1,177,182,FALSE,The C function `r_obj_address()` now properly prefixes addresses with the hexadecimal prefix `0x` on Windows (#1135).,NA
rlang,1,178,183,FALSE,`obj_address()` is now exported.,NA
rlang,1,179,184,FALSE,`%<~%` now actually works.,NA
rlang,1,180,185,FALSE,`XXH3_64bits()` from the XXHash library is now exposed as C callable under the name `rlang_xxh3_64bits()`.,NA
rlang,1,182,187,FALSE,Fix for CRAN checks.,NA
rlang,1,183,188,FALSE,Fixed a gcc11 warning related to `hash()` (#1088).,NA
rlang,1,184,189,FALSE,"New `hash()` function to generate 128-bit hashes for arbitrary R objects using the xxHash library. The implementation is modeled after [xxhashlite](https://github.com/coolbutuseless/xxhashlite), created by @coolbutuseless.",NA
rlang,1,185,190,FALSE,"New `check_installed()` function. Unlike `is_installed()`, it asks the user whether to install missing packages. If the user accepts, the packages are installed with `pak::pkg_install()` if available, or `utils::install.packages()` otherwise. If the session is non interactive or if the user chooses not to install the packages, the current evaluation is aborted (#1075).",NA
rlang,1,186,191,FALSE,rlang is now licensed as MIT (#1063).,NA
rlang,1,187,192,FALSE,"Fixed an issue causing extra empty lines in `inform()` messages with `.frequency` (#1076, @schloerke).",NA
rlang,1,188,193,FALSE,"`expr_deparse()` now correctly wraps code using `::` and `:::` (#1072, @krlmlr).",NA
rlang,1,190,195,FALSE,"`inject()` evaluates its argument with `!!`, `!!!`, and `{{` support.",NA
rlang,1,191,196,FALSE,New `enquo0()` and `enquos0()` operators for defusing function arguments without automatic injection (unquotation).,NA
rlang,1,192,197,FALSE,"`format_error_bullets()` is no longer experimental. The `message` arguments of `abort()`, `warn()`, and `inform()` are automatically passed to that function to make it easy to create messages with regular, info, and error bullets. See `?format_error_bullets` for more information.",NA
rlang,1,193,198,FALSE,New `zap_srcref()` function to recursively remove source references from functions and calls.,NA
rlang,1,194,199,FALSE,A new compat file for the zeallot operator `%<-%` is now available in the rlang repository.,NA
rlang,1,195,200,FALSE,New `%<~%` operator to define a variable lazily.,NA
rlang,1,196,201,FALSE,New `env_browse()` and `env_is_browsed()` functions. `env_browse()` is equivalent to evaluating `browser()` within an environment. It sets the environment to be persistently browsable (or unsets it if `value = FALSE` is supplied).,NA
rlang,1,197,202,FALSE,Functions created from quosures with `as_function()` now print in a more user friendly way.,NA
rlang,1,198,203,FALSE,New `rlang_print_backtrace` C callable for debugging from C interpreters (#1059).,NA
rlang,1,199,204,FALSE,The `.data` pronoun no longer skips functions (#1061). This solves a dplyr issue involving rowwise data frames and list-columns of functions (tidyverse/dplyr#5608).,NA
rlang,1,200,205,FALSE,`as_data_mask()` now intialises environments of the correct size to improve efficiency (#1048).,NA
rlang,1,201,206,FALSE,"`eval_bare()`, `eval_tidy()` (#961), and `with_handlers()` (#518) now propagate visibility.",NA
rlang,1,202,207,FALSE,`cnd_signal()` now ignores `NULL` inputs.,NA
rlang,1,203,208,FALSE,Fixed bug that prevented splicing a named empty vector with the `!!!` operator (#1045).,NA
rlang,1,204,209,FALSE,"The exit status of is now preserved in non-interactive sessions when `entrace()` is used as an `options(error = )` handler (#1052, rstudio/bookdown#920).",NA
rlang,1,205,210,FALSE,`next` and `break` are now properly deparsed as nullary operators.,NA
rlang,1,206,211,FALSE,Backtraces now include native stacks (e.g. from C code) when the [winch](https://r-prof.github.io/winch/) package is installed and `rlang_trace_use_winch` is set to `TRUE` (@krlmlr).,NA
rlang,1,207,212,FALSE,Compatibility with upcoming testthat 3 and magrittr 2 releases.,NA
rlang,1,208,213,FALSE,"`get_env()` now returns the proper environment with primitive functions, i.e. the base namespace rather than the base environment (r-lib/downlit#32).",NA
rlang,1,209,214,FALSE,`entrace()` no longer handles non-rlang errors that carry a backtrace. This improves compatibility with packages like callr.,NA
rlang,1,210,215,FALSE,Backtraces of unhandled errors are now displayed without truncation in non-interactive sessions (#856).,NA
rlang,1,211,216,FALSE,"`is_interactive()` no longer consults ""rstudio.notebook.executing"" option (#1031).",NA
rlang,1,212,217,FALSE,`cnd_muffle()` now returns `FALSE` instead of failing if the condition is not mufflable (#1022).,NA
rlang,1,213,218,FALSE,`warn()` and `inform()` gain a `.frequency` argument to control how frequently the warning or message should be displayed.,NA
rlang,1,214,219,FALSE,"New `raw_deparse_str()` function for converting a raw vector into a string of hexadecimal characters (@krlmlr, #978).",NA
rlang,1,215,220,FALSE,"The backtraces of chained errors are no longer decomposed by error context. Instead, the error messages are displayed as a tree to reflect the error ancestry, and the deepest backtrace in the ancestry is displayed. This change simplifies the display (#851) and makes it possible to rethow errors from a calling handler rather than an exiting handler, which we now think is more appropriate because it allows users to `recover()` into the error.",NA
rlang,1,216,221,FALSE,"`env_bind()`, `env_bind_active()`, `env_bind_lazy()`, `env_get()`, and `env_get_list()` have been rewritten in C.",NA
rlang,1,217,222,FALSE,`env_poke()` now supports `zap()` sentinels for removing bindings (#1012) and has better support for characters that are not representable in the local encoding.,NA
rlang,1,218,223,FALSE,`env_poke()` has been rewritten in C for performance.,NA
rlang,1,219,224,FALSE,The unicode translation warnings that appeared on Windows with R 4.0 are now fixed.,NA
rlang,1,220,225,FALSE,`env_unbind(inherit = TRUE)` now only removes a binding from the first parent environment that has a binding. It used to remove the bindings from the whole ancestry. The new behaviour doesn't guarantee that a scope doesn't have a binding but it is safer.,NA
rlang,1,221,226,FALSE,`env_has()` is now rewritten in C for performance.,NA
rlang,1,222,227,FALSE,`dots_list()` gains a `.named` argument for auto-naming dots (#957).,NA
rlang,1,223,228,FALSE,It is now possible to subset the `.data` pronoun with quosured symbols or strings (#807).,NA
rlang,1,224,229,FALSE,"Expressions like `quote(list(""a b"" = 1))` are now properly deparsed by `expr_deparse()` (#950).",NA
rlang,1,225,230,FALSE,"`parse_exprs()` now preserves names (#808). When a single string produces multiple expressions, the names may be useful to figure out what input produced which expression.",NA
rlang,1,226,231,FALSE,`parse_exprs()` now supports empty expressions (#954).,NA
rlang,1,227,232,FALSE,`list2(!!!x)` no longer evaluates `x` multiple times (#981).,NA
rlang,1,228,233,FALSE,"`is_installed()` now properly handles a `pkg` argument of length \> 1. Before this it silently tested the first element of `pkg` only and thus always returned `TRUE` if the first package was installed regardless of the actual length of `pkg`. (#991, @salim-b)",NA
rlang,1,229,234,FALSE,"`arg_match0()` is a faster version of `arg_match()` for use when performance is at a premium (#997, @krlmlr).",NA
rlang,1,230,235,FALSE,"`!!!` now uses a combination of `length()`, `names()`, and `[[` to splice S3 and S4 objects. This produces more consistent behaviour than `as.list()` on a wider variety of vector classes (#945,",NA
rlang,1,231,236,FALSE,"`set_names()`, `is_formula()`, and `names2()` are now implemented in C for efficiency.",NA
rlang,1,232,237,FALSE,The `.data` pronoun now accepts symbol subscripts (#836).,NA
rlang,1,233,238,FALSE,"Quosure lists now explicitly inherit from `""list""`. This makes them compatible with the vctrs package (#928).",NA
rlang,1,234,239,FALSE,"All rlang options are now documented in a centralised place, see `?rlang::faq-options` (#899, @smingerson).",NA
rlang,1,235,240,FALSE,Fixed crash when `env_bindings_are_lazy()` gets improper arguments (#923).,NA
rlang,1,236,241,FALSE,"`arg_match()` now detects and suggests possible typos in provided arguments (@jonkeane, #798).",NA
rlang,1,237,242,FALSE,"`arg_match()` now gives an error if argument is of length greater than 1 and doesn't exactly match the values input, similar to base `match.arg` (#914, @AliciaSchep)",NA
rlang,1,239,244,FALSE,"You can now use glue syntax to unquote on the LHS of `:=`. This syntax is automatically available in all functions taking dots with `list2()` and `enquos()`, and thus most of the tidyverse. Note that if you use the glue syntax in an R package, you need to import glue. A single pair of braces triggers normal glue interpolation:",NA
rlang,1,239,245,TRUE,"```
df <- data.frame(x = 1:3)

suffix <- ""foo""
df %>% dplyr::mutate(""var_{suffix}"" := x * 2)
#>   x var_foo
#> 1 1       2
#> 2 2       4
#> 3 3       6
```",NA
rlang,1,239,245,FALSE,"Using a pair of double braces is for labelling a function argument. Technically, this is shortcut for `""{as_label(enquo(arg))}""`. The syntax is similar to the curly-curly syntax for interpolating function arguments:",NA
rlang,1,239,246,TRUE,"```
my_wrapper <- function(data, var, suffix = ""foo"") {
  data %>% dplyr::mutate(""{{ var }}_{suffix}"" := {{ var }} * 2)
}
df %>% my_wrapper(x)
#>   x x_foo
#> 1 1     2
#> 2 2     4
#> 3 3     6

df %>% my_wrapper(sqrt(x))
#>   x sqrt(x)_foo
#> 1 1    2.000000
#> 2 2    2.828427
#> 3 3    3.464102
```",NA
rlang,1,240,247,FALSE,Fixed a bug in magrittr backtraces that caused duplicate calls to appear in the trace.,NA
rlang,1,241,248,FALSE,Fixed a bug in magrittr backtraces that caused wrong call indices.,NA
rlang,1,242,249,FALSE,Empty backtraces are no longer shown when `rlang_backtrace_on_error` is set.,NA
rlang,1,243,250,FALSE,The tidy eval `.env` pronoun is now exported for documentation purposes.,NA
rlang,1,244,251,FALSE,`warn()` and `abort()` now check that either `class` or `message` was supplied. `inform()` allows sending empty message as it is occasionally useful for building user output incrementally.,NA
rlang,1,245,252,FALSE,"`flatten()` fails with a proper error when input can't be flattened (#868, #885).",NA
rlang,1,246,253,FALSE,`inform()` now consistently appends a final newline to the message (#880).,NA
rlang,1,247,254,FALSE,`cnd_body.default()` is now properly registered.,NA
rlang,1,248,255,FALSE,`cnd_signal()` now uses the same approach as `abort()` to save unhandled errors to `last_error()`.,NA
rlang,1,249,256,FALSE,Parsable constants like `NaN` and `NA_integer_` are now deparsed by `expr_deparse()` in their parsable form (#890).,NA
rlang,1,250,257,FALSE,Infix operators now stick to their LHS when deparsed by `expr_deparse()` (#890).,NA
rlang,1,251,258,FALSE,"New `cnd_header()`, `cnd_body()` and `cnd_footer()` generics. These are automatically called by `conditionMessage.rlang_error()`, the default method for all rlang errors. Concretely, this is a way of breaking up lazy generation of error messages with `conditionMessage()` into three independent parts. This provides a lot of flexibility for hierarchies of error classes, for instance you could inherit the body of an error message from a parent class while overriding the header and footer.",NA
rlang,1,252,259,FALSE,The reminder to call `last_error()` is now less confusing thanks to a suggestion by @markhwhiteii.,NA
rlang,1,253,260,FALSE,"The functions prefixed in `scoped_` have been renamed to use the more conventional `local_` prefix. For instance, `scoped_bindings()` is now `local_bindings()`. The `scoped_` functions will be deprecated in the next significant version of rlang (0.5.0).",NA
rlang,1,254,261,FALSE,"The `.subclass` argument of `abort()`, `warn()` and `inform()` has been renamed to `class`. This is for consistency with our conventions for class constructors documented in https://adv-r.hadley.nz/s3.html#s3-subclassing.",NA
rlang,1,255,262,FALSE,"`inform()` now prints messages to the standard output by default in interactive sessions. This makes them appear more like normal output in IDEs such as RStudio. In non-interactive sessions, messages are still printed to standard error to make it easy to redirect messages when running R scripts (#852).",NA
rlang,1,256,263,FALSE,Fixed an error in `trace_back()` when the call stack contains a quosured symbol.,NA
rlang,1,257,264,FALSE,Backtrace is now displayed in full when an error occurs in non-interactive sessions. Previously the backtraces of parent errors were left out.,NA
rlang,1,258,265,FALSE,"New experimental framework for creating bulleted error messages. See `?cnd_message` for the motivation and an overwiew of the tools we have created to support this approach. In particular, `abort()` now takes character vectors to assemble a bullet list. Elements named `x` are prefixed with a red cross, elements named `i` are prefixed with a blue info symbol, and unnamed elements are prefixed with a bullet.",NA
rlang,1,259,266,FALSE,Capture of backtrace in the context of rethrowing an error from an exiting handler has been improved. The `tryCatch()` context no longer leaks in the high-level backtrace.,NA
rlang,1,260,267,FALSE,"Printing an error no longer recommends calling `last_trace()`, unless called from `last_error()`.",NA
rlang,1,261,268,FALSE,"`env_clone()` no longer recreates active bindings and is now just an alias for `env2list(as.list(env))`. Unlike `as.list()` which returns the active binding function on R \< 4.0, the value of active bindings is consistently used in all versions.",NA
rlang,1,262,269,FALSE,"The display of rlang errors derived from parent errors has been improved. The simplified backtrace (as printed by `rlang::last_error()`) no longer includes the parent errors. On the other hand, the full backtrace (as printed by `rlang::last_trace()`) now includes the backtraces of the parent errors.",NA
rlang,1,263,270,FALSE,"`cnd_signal()` has improved support for rlang errors created with `error_cnd()`. It now records a backtrace if there isn't one already, and saves the error so it can be inspected with `rlang::last_error()`.",NA
rlang,1,264,271,FALSE,"rlang errors are no longer formatted and saved through `conditionMessage()`. This makes it easier to use a `conditionMessage()` method in subclasses created with `abort()`, which is useful to delay expensive generation of error messages until display time.",NA
rlang,1,265,272,FALSE,`abort()` can now be called without error message. This is useful when `conditionMessage()` is used to generate the message at print-time.,NA
rlang,1,266,273,FALSE,Fixed an infinite loop in `eval_tidy()`. It occurred when evaluating a quosure that inherits from the mask itself.,NA
rlang,1,267,274,FALSE,`env_bind()`'s performance has been significantly improved by fixing a bug that caused values to be repeatedly looked up by name.,NA
rlang,1,268,275,FALSE,`cnd_muffle()` now checks that a restart exists before invoking it. The restart might not exist if the condition is signalled with a different function (such as `stop(warning_cnd)`).,NA
rlang,1,269,276,FALSE,`trace_length()` returns the number of frames in a backtrace.,NA
rlang,1,270,277,FALSE,Added internal utility `cnd_entrace()` to add a backtrace to a condition.,NA
rlang,1,271,278,FALSE,`rlang::last_error()` backtraces are no longer displayed in red.,NA
rlang,1,272,279,FALSE,"`x %|% y` now also works when `y` is of same length as `x` (@rcannood, #806).",NA
rlang,1,273,280,FALSE,"Empty named lists are now deparsed more explicitly as `""<named list>""`.",NA
rlang,1,274,281,FALSE,Fixed `chr()` bug causing it to return invisibly.,NA
rlang,1,275,286,FALSE,"New `pairlist2()` function with splicing support. It preserves missing arguments, which makes it useful for lists of formal parameters for functions.",NA
rlang,1,276,287,FALSE,"`is_bool()` is a scalar type predicate that checks whether its input is a single `TRUE` or `FALSE`. Like `is_string()`, it returns `FALSE` when the input is missing. This is useful for type-checking function arguments (#695).",NA
rlang,1,277,288,FALSE,"`is_string()` gains a `string` argument. `is_string(x, ""foo"")` is a shortcut for `is_character(x) && length(x) == 1 && identical(x, ""foo"")`.",NA
rlang,1,278,289,FALSE,Lists of quosures now have pillar methods for display in tibbles.,NA
rlang,1,279,290,FALSE,`set_names()` now names unnamed input vectors before applying a function. The following expressions are now equivalent:,NA
rlang,1,279,291,TRUE,"```
letters %>% set_names() %>% set_names(toupper)

letters %>% set_names(toupper)
```",NA
rlang,1,280,292,FALSE,"You can now pass a character vector as message argument for `abort()`, `warn()`, `inform()`, and `signal()`. The vector is collapsed to a single string with a `""\n""` newline separating each element of the input vector (#744).",NA
rlang,1,281,293,FALSE,`maybe_missing()` gains a `default` argument.,NA
rlang,1,282,294,FALSE,"New functions for weak references: `new_weakref()`, `weakref_key()`, `weakref_value()`, and `is_weakref()` (@wch, #787).",NA
rlang,1,283,295,FALSE,"The performance of `exec()` has been improved. It is now on the same order of performance as `do.call()`, though slightly slower.",NA
rlang,1,284,296,FALSE,`call2()` now uses the new `pairlist2()` function internally. This considerably improves its performance. This also means it now preserves empty arguments:,NA
rlang,1,284,297,TRUE,"```
call2(""fn"", 1, , foo = )
#> fn(1, , foo = )
```",NA
rlang,1,285,298,FALSE,"`with_handlers()` now installs calling handlers first on the stack, no matter their location in the argument list. This way they always take precedence over exiting handlers, which ensures their side effects (such as logging) take place (#718).",NA
rlang,1,286,299,FALSE,"In rlang backtraces, the `global::` prefix is now only added when the function directly inherits from the global environment. Functions inheriting indirectly no longer have a namespace qualifier (#733).",NA
rlang,1,287,300,FALSE,`options(error = rlang::entrace)` now has better support for errors thrown from C (#779). It also saves structured errors in the `error` field of `rlang::last_error()`.,NA
rlang,1,288,301,FALSE,`ns_env()` and `ns_env_name()` (experimental functions) now support functions and environments consisently. They also require an argument from now on.,NA
rlang,1,289,302,FALSE,"`is_interactive()` is aware of the `TESTTHAT` environment variable and returns `FALSE` when it is `""true""` (@jennybc, #738).",NA
rlang,1,290,303,FALSE,"`fn_fmls()` and variants no longer coerce their input to a closure. Instead, they throw an error.",NA
rlang,1,291,304,FALSE,Fixed an issue in knitr that caused backtraces to print even when `error = TRUE`.,NA
rlang,1,292,305,FALSE,"The return object from `as_function()` now inherits from `""function""` (@richierocks, #735).",NA
rlang,1,293,306,FALSE,`modify()` and `prepend()` (two experimental functions marked as in the questioning stage since rlang 0.3.0) are now deprecated. Vector functions are now out of scope for rlang. They might be revived in the vctrs or funs packages.,NA
rlang,1,294,307,FALSE,`exiting()` is soft-deprecated because `with_handlers()` treats handlers as exiting by default.,NA
rlang,1,295,308,FALSE,The vector constructors like `lgl()` or `new_logical()` are now in the questioning stage. They are likely to be moved to the vctrs package at some point. Same for the missing values shortcuts like `na_lgl`.,NA
rlang,1,296,309,FALSE,"`as_logical()`, `as_integer()`, etc have been soft-deprecated in favour of `vctrs::vec_cast()`.",NA
rlang,1,297,310,FALSE,"`type_of()`, `switch_type()`, `coerce_type()`, and friends are soft-deprecated.",NA
rlang,1,298,311,FALSE,The encoding and locale API was summarily archived. This API didn't bring any value and wasn't used on CRAN.,NA
rlang,1,299,312,FALSE,"`lang_type_of()`, `switch_lang()`, and `coerce_lang()` were archived. These functions were not used on CRAN or internally.",NA
rlang,1,300,313,FALSE,Subsetting quosures with `[` or `[[` is soft-deprecated.,NA
rlang,1,301,314,FALSE,"All functions that were soft-deprecated, deprecated, or defunct in previous releases have been bumped to the next lifecycle stage.",NA
rlang,1,302,315,FALSE,Fixed protection issue reported by rchk.,NA
rlang,1,303,316,FALSE,The experimental option `rlang__backtrace_on_error` is no longer experimental and has been renamed to `rlang_backtrace_on_error`.,NA
rlang,1,304,317,FALSE,"New ""none"" option for `rlang_backtrace_on_error`.",NA
rlang,1,305,318,FALSE,Unary operators applied to quosures now give better error messages.,NA
rlang,1,306,319,FALSE,"Fixed issue with backtraces of warnings promoted to error, and entraced via `withCallingHandlers()`. The issue didn't affect entracing via top level `options(error = rlang::entrace)` handling.",NA
rlang,1,307,320,FALSE,"New `entrace()` condition handler. Add this to your RProfile to enable rlang backtraces for all errors, including warnings promoted to errors:",NA
rlang,1,307,321,TRUE,"```
if (requireNamespace(""rlang"", quietly = TRUE)) {
  options(error = rlang::entrace)
}
```",NA
rlang,1,307,321,FALSE,This handler also works as a calling handler:,NA
rlang,1,307,322,TRUE,"```
with_handlers(
  error = calling(entrace),
  foo(bar)
)
```",NA
rlang,1,307,322,FALSE,However it's often more practical to use `with_abort()` in that case:,NA
rlang,1,307,323,TRUE,"```
with_abort(foo(bar))
```",NA
rlang,1,308,324,FALSE,`with_abort()` gains a `classes` argument to promote any kind of condition to an rlang error.,NA
rlang,1,309,325,FALSE,New `last_trace()` shortcut to print the backtrace stored in the `last_error()`.,NA
rlang,1,310,326,FALSE,Backtrace objects now print in full by default.,NA
rlang,1,311,327,FALSE,Calls in backtraces are now numbered according to their position in the call tree. The numbering is non-contiguous for simplified backtraces because of omitted call frames.,NA
rlang,1,312,328,FALSE,`catch_cnd()` gains a `classes` argument to specify which classes of condition to catch. It returns `NULL` if the expected condition could not be caught (#696).,NA
rlang,1,313,329,FALSE,"Display an object in a concise way, for example to labellise axes in a graphical plot.",NA
rlang,1,314,330,FALSE,"Give default names to columns in a data frame. In this case, labelling is the first step before name repair.",NA
rlang,1,315,331,FALSE,New `is_interactive()` function. It serves the same purpose as `base::interactive()` but also checks if knitr is in progress and provides an escape hatch. Use `with_interactive()` and `scoped_interactive()` to override the return value of `is_interactive()`. This is useful in unit tests or to manually turn on interactive features in RMarkdown outputs,NA
rlang,1,316,332,FALSE,`calling()` now boxes its argument.,NA
rlang,1,317,333,FALSE,"New `done()` function to box a value. Done boxes are sentinels to indicate early termination of a loop or computation. For instance, it will be used in the purrr package to allow users to shortcircuit a reduction or accumulation.",NA
rlang,1,318,334,FALSE,`new_box()` now accepts additional attributes passed to `structure()`.,NA
rlang,1,319,335,FALSE,Fixed a quotation bug with binary operators of zero or one argument such as `` `/`(1) `` (#652). They are now deparsed and printed properly as well.,NA
rlang,1,320,336,FALSE,New `call_ns()` function to retrieve the namespace of a call. Returns `NULL` if the call is not namespaced.,NA
rlang,1,321,337,FALSE,Top-level S3 objects are now deparsed properly.,NA
rlang,1,322,338,FALSE,Empty `{` blocks are now deparsed on the same line.,NA
rlang,1,323,339,FALSE,Fixed a deparsing issue with symbols containing non-ASCII characters (#691).,NA
rlang,1,324,340,FALSE,"`expr_print()` now handles `[` and `[[` operators correctly, and deparses non-syntactic symbols with backticks.",NA
rlang,1,325,341,FALSE,"`call_modify()` now respects ordering of unnamed inputs. Before this fix, it would move all unnamed inputs after named ones.",NA
rlang,1,326,342,FALSE,`as_closure()` wrappers now call primitives with positional arguments to avoid edge case issues of argument matching.,NA
rlang,1,327,343,FALSE,`as_closure()` wrappers now dispatch properly on methods defined in the global environment (tidyverse/purrr#459).,NA
rlang,1,328,344,FALSE,`as_closure()` now supports both base-style (`e1` and `e2`) and purrr-style (`.x` and `.y`) arguments with binary primitives.,NA
rlang,1,329,345,FALSE,"`exec()` takes `.fn` as first argument instead of `f`, for consistency with other rlang functions.",NA
rlang,1,330,346,FALSE,Fixed infinite loop with quosures created inside a data mask.,NA
rlang,1,331,347,FALSE,Base errors set as `parent` of rlang errors are now printed correctly.,NA
rlang,1,332,348,FALSE,`quo_text()` now deparses non-syntactic symbols with backticks:,NA
rlang,1,332,349,TRUE,"```
quo_text(sym(""foo+""))
#> [1] ""`foo+`""
```",NA
rlang,1,332,349,FALSE,"This caused a number of issues in reverse dependencies as `quo_text()` tends to be used for converting symbols to strings. `quo_text()` and `quo_name()` should not be used for this purpose because they are general purpose deparsers. These functions should generally only be used for printing outputs or creating default labels. If you need to convert symbols to strings, please use `as_string()` rather than `quo_text()`. We have extended the documentation of `?quo_text` and `?quo_name` to make these points clearer.",NA
rlang,1,333,350,FALSE,"`exprs()` no longer flattens quosures. `exprs(!!!quos(x, y))` is now equivalent to `quos(x, y)`.",NA
rlang,1,334,351,FALSE,The sentinel for removing arguments in `call_modify()` has been changed from `NULL` to `zap()`. This breaking change is motivated by the ambiguity of `NULL` with valid argument values.,NA
rlang,1,334,352,TRUE,"```
call_modify(call, arg = NULL)  # Add `arg = NULL` to the call
call_modify(call, arg = zap()) # Remove the `arg` argument from the call
```",NA
rlang,1,335,353,FALSE,The `%@%` operator now quotes its input and supports S4 objects. This makes it directly equivalent to `@` except that it extracts attributes for non-S4 objects (#207).,NA
rlang,1,336,354,FALSE,Taking the `env_parent()` of the empty environment is now an error.,NA
rlang,1,337,355,FALSE,"`abort()` now records backtraces automatically in the error object. Errors thrown with `abort()` invite users to call `rlang::last_error()` to see a backtrace and help identifying where and why the error occurred. The backtraces created by rlang (you can create one manually with `trace_back()`) are printed in a simplified form by default that removes implementation details from the backtrace. To see the full backtrace, call `summary(rlang::last_error())`. `abort()` also gains a `parent` argument. This is meant for situations where you're calling a low level API (to download a file, parse a JSON file, etc) and would like to intercept errors with `base::tryCatch()` or `rlang::with_handlers()` and rethrow them with a high-level message. Call `abort()` with the intercepted error as the `parent` argument. When the user prints `rlang::last_error()`, the backtrace will be shown in two sections corresponding to the high-level and low-level contexts. In order to get segmented backtraces, the low-level error has to be thrown with `abort()`. When that's not the case, you can call the low-level function within `with_abort()` to automatically promote all errors to rlang errors.",NA
rlang,1,338,356,FALSE,The tidy eval changes are mostly for developers of data masking APIs. The main user-facing change is that `.data[[` is now an unquote operator so that `var` in `.data[[var]]` is never masked by data frame columns and always picked from the environment. This makes the pronoun safe for programming in functions.,NA
rlang,1,339,357,FALSE,"The `!!!` operator now supports all classed objects like factors. It calls `as.list()` on S3 objects and `as(x, ""list"")` on S4 objects.",NA
rlang,1,340,358,FALSE,"`dots_list()` gains several arguments to control how dots are collected. You can control the selection of arguments with the same name with `.homonyms` (keep first, last, all, or abort). You can also elect to preserve empty arguments with `.preserve_empty`.",NA
rlang,1,341,359,FALSE,"New `trace_back()` captures a backtrace. Compared to the base R traceback, it contains additional structure about the relationship between frames. It comes with tools for automatically restricting to frames after a certain environment on the stack, and to simplify when printing. These backtraces are now recorded in errors thrown by `abort()` (see below).",NA
rlang,1,342,360,FALSE,`abort()` gains a `parent` argument to specify a parent error. This is meant for situations where a low-level error is expected (e.g. download or parsing failed) and you'd like to throw an error with higher level information. Specifying the low-level error as parent makes it possible to partition the backtraces based on ancestry.,NA
rlang,1,343,361,FALSE,Errors thrown with `abort()` now embed a backtrace in the condition object. It is no longer necessary to record a trace with a calling handler for such errors.,NA
rlang,1,344,362,FALSE,`with_abort()` runs expressions in a context where all errors are promoted to rlang errors and gain a backtrace.,NA
rlang,1,345,363,FALSE,Unhandled errors thrown by `abort()` are now automatically saved and can be retrieved with `rlang::last_error()`. The error prints with a simplified backtrace. Call `summary(last_error())` to see the full backtrace.,NA
rlang,1,346,364,FALSE,New experimental option `rlang__backtrace_on_error` to display backtraces alongside error messages. See `?rlang::abort` for supported options.,NA
rlang,1,347,365,FALSE,"The new `signal()` function completes the `abort()`, `warn()` and `inform()` family. It creates and signals a bare condition.",NA
rlang,1,348,366,FALSE,New `interrupt()` function to simulate an user interrupt from R code.,NA
rlang,1,349,367,FALSE,"`cnd_signal()` now dispatches messages, warnings, errors and interrupts to the relevant signalling functions (`message()`, `warning()`, `stop()` and the C function `Rf_onintr()`). This makes it a good choice to resignal a captured condition.",NA
rlang,1,350,368,FALSE,"New `cnd_type()` helper to determine the type of a condition (`""condition""`, `""message""`, `""warning""`, `""error""` or `""interrupt""`).",NA
rlang,1,351,369,FALSE,"`abort()`, `warn()` and `inform()` now accepts metadata with `...`. The data are stored in the condition and can be examined by user handlers. Consequently all arguments have been renamed and prefixed with a dot (to limit naming conflicts between arguments and metadata names).",NA
rlang,1,352,370,FALSE,`with_handlers()` treats bare functions as exiting handlers (equivalent to handlers supplied to `tryCatch()`). It also supports the formula shortcut for lambda functions (as in purrr).,NA
rlang,1,353,371,FALSE,`with_handlers()` now produces a cleaner stack trace.,NA
rlang,1,354,372,FALSE,"The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:",NA
rlang,2,354,373,FALSE,"* Lists, pairlists, and atomic vectors. If they have a class, they are converted with `base::as.list()` to allow S3 dispatch. Following this change, objects like factors can now be spliced without data loss.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rlang,2,354,374,FALSE,"* S4 objects. These are converted with `as(obj, ""list"")` before splicing.","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rlang,2,354,375,FALSE,"* Quoted blocks of expressions, i.e. `{ }` calls","The input types of `!!!` have been standardised. `!!!` is generally defined on vectors: it takes a vector (typically, a list) and unquotes each element as a separate argument. The standardisation makes `!!!` behave the same in functions taking dots with `list2()` and in quoting functions. `!!!` accepts these types:"
rlang,1,357,375,FALSE,`!!!` disallows:,NA
rlang,2,357,376,FALSE,"* Any other objects like functions or environments, but also language objects like formula, symbols, or quosures.",`!!!` disallows:
rlang,1,358,376,FALSE,Quoting functions used to automatically wrap language objects in lists to make them spliceable. This behaviour is now soft-deprecated and it is no longer valid to write `!!!enquo(x)`. Please unquote scalar objects with `!!` instead.,NA
rlang,1,359,377,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.homonyms` argument to control how to treat arguments with the same name. The default is to keep them. Set it to `""first""` or `""last""` to keep only the first or last occurrences. Set it to `""error""` to raise an informative error about the arguments with duplicated names.",NA
rlang,1,360,378,FALSE,"`enexprs()` and `enquos()` now support `.ignore_empty = ""all""` with named arguments as well (#414).",NA
rlang,1,361,379,FALSE,"`dots_list()` gains a `.preserve_empty` argument. When `TRUE`, empty arguments are stored as missing arguments (see `?missing_arg`).",NA
rlang,1,362,380,FALSE,"`dots_list()`, `enexprs()` and `enquos()` gain a `.check_assign` argument. When `TRUE`, a warning is issued when a `<-` call is detected in `...`. No warning is issued if the assignment is wrapped in brackets like `{ a <- 1 }`. The warning lets users know about a possible typo in their code (assigning instead of matching a function parameter) and requires them to be explicit that they really want to assign to a variable by wrapping in parentheses.",NA
rlang,1,363,381,FALSE,"`lapply(list(quote(foo)), list2)` no longer evaluates `foo` (#580).",NA
rlang,1,364,382,FALSE,You can now unquote quosured symbols as LHS of `:=`. The symbol is automatically unwrapped from the quosure.,NA
rlang,1,365,383,FALSE,"Quosure methods have been defined for common operations like `==`. These methods fail with an informative error message suggesting to unquote the quosure (#478, #tidyverse/dplyr#3476).",NA
rlang,1,366,384,FALSE,"`as_data_pronoun()` now accepts data masks. If the mask has multiple environments, all of these are looked up when subsetting the pronoun. Function objects stored in the mask are bypassed.",NA
rlang,1,367,385,FALSE,"It is now possible to unquote strings in function position. This is consistent with how the R parser coerces strings to symbols. These two expressions are now equivalent: `expr(""foo""())` and `expr((!!""foo"")())`.",NA
rlang,1,368,386,FALSE,Quosures converted to functions with `as_function()` now support nested quosures.,NA
rlang,1,369,387,FALSE,"`expr_deparse()` (used to print quosures at the console) now escapes special characters. For instance, newlines now print as `""\n""` (#484). This ensures that the roundtrip `parse_expr(expr_deparse(x))` is not lossy.",NA
rlang,1,370,388,FALSE,`new_data_mask()` now throws an error when `bottom` is not a child of `top` (#551).,NA
rlang,1,371,389,FALSE,Formulas are now evaluated in the correct environment within `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rlang,1,372,390,FALSE,New functions `new_quosures()` and `as_quosures()` to create or coerce to a list of quosures. This is a small S3 class that ensures two invariants on subsetting and concatenation: that each element is a quosure and that the list is always named even if only with a vector of empty strings.,NA
rlang,1,373,391,FALSE,"`env()` now treats a single unnamed argument as the parent of the new environment. Consequently, `child_env()` is now superfluous and is now in questioning life cycle.",NA
rlang,1,374,392,FALSE,New `current_env()` and `current_fn()` functions to retrieve the current environment or the function being evaluated. They are equivalent to `base::environment()` and `base::sys.function()` called without argument.,NA
rlang,1,375,393,FALSE,`env_get()` and `env_get_list()` gain a `default` argument to provide a default value for non-existing bindings.,NA
rlang,1,376,394,FALSE,`env_poke()` now returns the old value invisibly rather than the input environment.,NA
rlang,1,377,395,FALSE,"The new function `env_name()` returns the name of an environment. It always adds the ""namespace:"" prefix to namespace names. It returns ""global"" instead of "".GlobalEnv"" or ""R_GlobalEnv"", ""empty"" instead of ""R_EmptyEnv"". The companion `env_label()` is like `env_name()` but returns the memory address for anonymous environments.",NA
rlang,1,378,396,FALSE,`env_parents()` now returns a named list. The names are taken with `env_name()`.,NA
rlang,1,379,397,FALSE,`env_parents()` and `env_tail()` now stop at the global environment by default. This can be changed with the `last` argument. The empty environment is always a stopping condition so you can take the parents or the tail of an environment on the search path without changing the default.,NA
rlang,1,380,398,FALSE,New predicates `env_binding_are_active()` and `env_binding_are_lazy()` detect the kind of bindings in an environment.,NA
rlang,1,381,399,FALSE,`env_binding_lock()` and `env_binding_unlock()` allows to lock and unlock multiple bindings. The predicate `env_binding_are_locked()` tests if bindings are locked.,NA
rlang,1,382,400,FALSE,`env_lock()` and `env_is_locked()` lock an environment or test if an environment is locked.,NA
rlang,1,383,401,FALSE,`env_print()` pretty-prints environments. It shows the contents (up to 20 elements) and the properties of the environment.,NA
rlang,1,384,402,FALSE,`is_scoped()` has been soft-deprecated and renamed to `is_attached()`. It now supports environments in addition to search names.,NA
rlang,1,385,403,FALSE,`env_bind_lazy()` and `env_bind_active()` now support quosures.,NA
rlang,1,386,404,FALSE,`env_bind_exprs()` and `env_bind_fns()` are soft-deprecated and renamed to `env_bind_lazy()` and `env_bind_active()` for clarity and consistency.,NA
rlang,1,387,405,FALSE,"`env_bind()`, `env_bind_exprs()`, and `env_bind_fns()` now return the list of old binding values (or missing arguments when there is no old value). This makes it easy to restore the original environment state:",NA
rlang,1,387,406,TRUE,"```
old <- env_bind(env, foo = ""foo"", bar = ""bar"")
env_bind(env, !!!old)
```",NA
rlang,1,388,407,FALSE,"`env_bind()` now supports binding missing arguments and removing bindings with zap sentinels. `env_bind(env, foo = )` binds a missing argument and `env_bind(env, foo = zap())` removes the `foo` binding.",NA
rlang,1,389,408,FALSE,The `inherit` argument of `env_get()` and `env_get_list()` has changed position. It now comes after `default`.,NA
rlang,1,390,409,FALSE,`scoped_bindings()` and `with_bindings()` can now be called without bindings.,NA
rlang,1,391,410,FALSE,`env_clone()` now recreates active bindings correctly.,NA
rlang,1,392,411,FALSE,`env_get()` now evaluates promises and active bindings since these are internal objects which should not be exposed at the R level (#554),NA
rlang,1,393,412,FALSE,"`env_print()` calls `get_env()` on its argument, making it easier to see the environment of closures and quosures (#567).",NA
rlang,1,394,413,FALSE,`env_get()` now supports retrieving missing arguments when `inherit` is `FALSE`.,NA
rlang,1,395,414,FALSE,"`is_call()` now accepts multiple namespaces. For instance `is_call(x, ""list"", ns = c("""", ""base""))` will match if `x` is `list()` or if it's `base::list()`:",NA
rlang,1,396,415,FALSE,"`call_modify()` has better support for `...` and now treats it like a named argument. `call_modify(call, ... = )` adds `...` to the call and `call_modify(call, ... = NULL)` removes it.",NA
rlang,1,397,416,FALSE,`call_modify()` now preserves empty arguments. It is no longer necessary to use `missing_arg()` to add a missing argument to a call. This is possible thanks to the new `.preserve_empty` option of `dots_list()`.,NA
rlang,1,398,417,FALSE,`call_modify()` now supports removing unexisting arguments (#393) and passing multiple arguments with the same name (#398). The new `.homonyms` argument controls how to treat these arguments.,NA
rlang,1,399,418,FALSE,`call_standardise()` now handles primitive functions like `~` properly (#473).,NA
rlang,1,400,419,FALSE,"`call_print_type()` indicates how a call is deparsed and printed at the console by R: prefix, infix, and special form.",NA
rlang,1,401,420,FALSE,The `call_` functions such as `call_modify()` now correctly check that their input is the right type (#187).,NA
rlang,1,402,421,FALSE,New function `zap()` returns a sentinel that instructs functions like `env_bind()` or `call_modify()` that objects are to be removed.,NA
rlang,1,403,422,FALSE,New function `rep_named()` repeats value along a character vector of names.,NA
rlang,1,404,423,FALSE,New function `exec()` is a simpler replacement to `invoke()` (#536). `invoke()` has been soft-deprecated.,NA
rlang,1,405,424,FALSE,Lambda functions created from formulas with `as_function()` are now classed. Use `is_lambda()` to check a function was created with the formula shorthand.,NA
rlang,1,406,425,FALSE,`is_integerish()` now supports large double values (#578).,NA
rlang,1,407,426,FALSE,`are_na()` now requires atomic vectors (#558).,NA
rlang,1,408,427,FALSE,The operator `%@%` has now a replacement version to update attributes of an object (#207).,NA
rlang,1,409,428,FALSE,"`fn_body()` always returns a `{` block, even if the function has a single expression. For instance `fn_body(function(x) do())` returns `quote({ do() })`.",NA
rlang,1,410,429,FALSE,`is_string()` now returns `FALSE` for `NA_character_`.,NA
rlang,1,411,430,FALSE,The vector predicates have been rewritten in C for performance.,NA
rlang,1,412,431,FALSE,The `finite` argument of `is_integerish()` is now `NULL` by default. Missing values are now considered as non-finite for consistency with `base::is.finite()`.,NA
rlang,1,413,432,FALSE,`is_bare_integerish()` and `is_scalar_integerish()` gain a `finite` argument for consistency with `is_integerish()`.,NA
rlang,1,414,433,FALSE,`flatten_if()` and `squash_if()` now handle primitive functions like `base::is.list()` as predicates.,NA
rlang,1,415,434,FALSE,`is_symbol()` now accepts a character vector of names to mach the symbol against.,NA
rlang,1,416,435,FALSE,"`parse_exprs()` and `parse_quos()` now support character vectors. Note that the output may be longer than the input as each string may yield multiple expressions (such as `""foo; bar""`).",NA
rlang,1,417,436,FALSE,`parse_quos()` now adds the `quosures` class to its output.,NA
rlang,1,420,439,FALSE,"`.data[[foo]]` is now an unquote operator. This guarantees that `foo` is evaluated in the context rather than the data mask and makes it easier to treat `.data[[""bar""]]` the same way as a symbol. For instance, this will help ensuring that `group_by(df, .data[[""name""]])` and `group_by(df, name)` produce the same column name.",NA
rlang,1,421,440,FALSE,"Automatic naming of expressions now uses a new deparser (still unexported) instead of `quo_text()`. Following this change, automatic naming is now compatible with all object types (via `pillar::type_sum()` if available), prevents multi-line names, and ensures `name` and `.data[[""name""]]` are given the same default name.",NA
rlang,1,422,441,FALSE,Supplying a name with `!!!` calls is soft-deprecated. This name is ignored because only the names of the spliced vector are applied.,NA
rlang,1,423,442,FALSE,"Quosure lists returned by `quos()` and `enquos()` now have ""list-of"" behaviour: the types of new elements are checked when adding objects to the list. Consequently, assigning non-quosure objects to quosure lists is now soft-deprecated. Please coerce to a bare list with `as.list()` beforehand.",NA
rlang,1,424,443,FALSE,`as_quosure()` now requires an explicit environment for symbols and calls. This should typically be the environment in which the expression was created.,NA
rlang,1,425,444,FALSE,`names()` and `length()` methods for data pronouns are deprecated. It is no longer valid to write `names(.data)` or `length(.data)`.,NA
rlang,1,426,445,FALSE,Using `as.character()` on quosures is soft-deprecated (#523).,NA
rlang,1,427,446,FALSE,Using `get_env()` without supplying an environment is now soft-deprecated. Please use `current_env()` to retrieve the current environment.,NA
rlang,1,428,447,FALSE,The frame and stack API is soft-deprecated. Some of the functionality has been replaced by `trace_back()`.,NA
rlang,1,429,448,FALSE,The `new_vector_along()` family is soft-deprecated because these functions are longer to type than the equivalent `rep_along()` or `rep_named()` calls without added clarity.,NA
rlang,1,430,449,FALSE,"Passing environment wrappers like formulas or functions to `env_` functions is now soft-deprecated. This internal genericity was causing confusion (see issue #427). You should now extract the environment separately before calling these functions. This change concerns `env_depth()`, `env_poke_parent()`, `env_parent<-`, `env_tail()`, `set_env()`, `env_clone()`, `env_inherits()`, `env_bind()`, `scoped_bindings()`, `with_bindings()`, `env_poke()`, `env_has()`, `env_get()`, `env_names()`, `env_bind_exprs()` and `env_bind_fns()`.",NA
rlang,1,431,450,FALSE,`cnd_signal()` now always installs a muffling restart for non-critical conditions. Consequently the `.mufflable` argument has been soft-deprecated and no longer has any effect.,NA
rlang,1,432,451,FALSE,Calling `UQ()` and `UQS()` with the rlang namespace qualifier is deprecated as of rlang 0.3.0. Just use the unqualified forms instead:,NA
rlang,1,432,452,TRUE,"```
# Bad
rlang::expr(mean(rlang::UQ(var) * 100))

# Ok
rlang::expr(mean(UQ(var) * 100))

# Good
rlang::expr(mean(!!var * 100))
```",NA
rlang,1,432,452,FALSE,"Although soft-deprecated since rlang 0.2.0, `UQ()` and `UQS()` can still be used for now.",NA
rlang,1,433,453,FALSE,The `call` argument of `abort()` and condition constructors is now deprecated in favour of storing full backtraces.,NA
rlang,1,434,454,FALSE,The `.standardise` argument of `call_modify()` is deprecated. Please use `call_standardise()` beforehand.,NA
rlang,1,435,455,FALSE,The `sentinel` argument of `env_tail()` has been deprecated and renamed to `last`.,NA
rlang,1,436,456,FALSE,`as_dictionary()` is now defunct.,NA
rlang,1,437,457,FALSE,"The experimental function `rst_muffle()` is now defunct. Please use `cnd_muffle()` instead. Unlike its predecessor, `cnd_muffle()` is not generic. It is marked as a calling handler and thus can be passed directly to `with_handlers()` to muffle specific conditions (such as specific subclasses of warnings).",NA
rlang,1,438,458,FALSE,"`cnd_inform()`, `cnd_warn()` and `cnd_abort()` are retired and defunct. The old `cnd_message()`, `cnd_warning()`, `cnd_error()` and `new_cnd()` constructors deprecated in rlang 0.2.0 are now defunct.",NA
rlang,1,439,459,FALSE,"Modifying a condition with `cnd_signal()` is defunct. In addition, creating a condition with `cnd_signal()` is soft-deprecated, please use the new function \[signal()\] instead.",NA
rlang,1,440,460,FALSE,`inplace()` has been renamed to `calling()` to follow base R terminology more closely.,NA
rlang,1,441,461,FALSE,The functions from the restart API are now in the questioning lifecycle stage. It is not clear yet whether we want to recommend restarts as a style of programming in R.,NA
rlang,1,442,462,FALSE,"`prepend()` and `modify()` are in the questioning stage, as well as `as_logical()`, `as_character()`, etc. We are still figuring out what vector tools belong in rlang.",NA
rlang,1,443,463,FALSE,"`flatten()`, `squash()` and their atomic variants are now in the questioning lifecycle stage. They have slightly different semantics than the flattening functions in purrr and we are currently rethinking our approach to flattening with the new typing facilities of the vctrs package.",NA
rlang,1,444,464,FALSE,Functions with tidy dots support now allow splicing atomic vectors.,NA
rlang,1,445,465,FALSE,Quosures no longer capture the current `srcref`.,NA
rlang,1,446,466,FALSE,Formulas are now evaluated in the correct environment by `eval_tidy()`. This fixes issues in dplyr and other tidy-evaluation interfaces.,NA
rlang,1,447,467,FALSE,The `!!` operator now has the precedence of unary `+` and `-` which allows a much more natural syntax: `!!a > b` only unquotes `a` rather than the whole `a > b` expression.,NA
rlang,1,448,468,FALSE,`enquo()` works in magrittr pipes: `mtcars %>% select(!!enquo(var))`.,NA
rlang,1,449,469,FALSE,`enquos()` is a variant of `quos()` that has a more natural interface for capturing multiple arguments and `...`.,NA
rlang,1,450,470,FALSE,"The backend for `quos()`, `exprs()`, `list2()`, `dots_list()`, etc is now written in C. This greatly improve the performance of dots capture, especially with the splicing operator `!!!` which now scales much better (you'll see a 1000x performance gain in some cases). The unquoting algorithm has also been improved which makes `enexpr()` and `enquo()` more efficient as well.",NA
rlang,1,451,471,FALSE,"The tidy eval `!!` operator now binds tightly. You no longer have to wrap it in parentheses, i.e. `!!x > y` will only unquote `x`. Technically the `!!` operator has the same precedence as unary `-` and `+`. This means that `!!a:b` and `!!a + b` are equivalent to `(!!a):b` and `(!!a) + b`. On the other hand `!!a^b` and `!!a$b` are equivalent to`!!(a^b)` and `!!(a$b)`.",NA
rlang,1,452,472,FALSE,"The print method for quosures has been greatly improved. Quosures no longer appear as formulas but as expressions prefixed with `^`; quosures are colourised according to their environment; unquoted objects are displayed between angular brackets instead of code (i.e. an unquoted integer vector is shown as `<int: 1, 2>` rather than `1:2`); unquoted S3 objects are displayed using `pillar::type_sum()` if available.",NA
rlang,1,453,473,FALSE,"New `enquos()` function to capture arguments. It treats `...` the same way as `quos()` but can also capture named arguments just like `enquo()`, i.e. one level up. By comparison `quos(arg)` only captures the name `arg` rather than the expression supplied to the `arg` argument. In addition, `enexprs()` is like `enquos()` but like `exprs()` it returns bare expressions. And `ensyms()` expects strings or symbols.",NA
rlang,1,454,474,FALSE,It is now possible to use `enquo()` within a magrittr pipe:,NA
rlang,1,454,475,TRUE,"```
select_one <- function(df, var) {
  df %>% dplyr::select(!!enquo(var))
}
```",NA
rlang,1,454,475,FALSE,"Technically, this is because `enquo()` now also captures arguments in parents of the current environment rather than just in the current environment. The flip side of this increased flexibility is that if you made a typo in the name of the variable you want to capture, and if an object of that name exists anywhere in the parent contexts, you will capture that object rather than getting an error.",NA
rlang,1,455,476,FALSE,`quo_expr()` has been renamed to `quo_squash()` in order to better reflect that it is a lossy operation that flattens all nested quosures.,NA
rlang,1,456,477,FALSE,`!!!` now accepts any kind of objects for consistency. Scalar types are treated as vectors of length 1. Previously only symbolic objects like symbols and calls were treated as such.,NA
rlang,1,457,478,FALSE,`ensym()` is a new variant of `enexpr()` that expects a symbol or a string and always returns a symbol. If a complex expression is supplied it fails with an error.,NA
rlang,1,458,479,FALSE,`exprs()` and `quos()` gain a `.unquote_names` arguments to switch off interpretation of `:=` as a name operator. This should be useful for programming on the language targetting APIs such as data.table.,NA
rlang,1,459,480,FALSE,`exprs()` gains a `.named` option to auto-label its arguments (#267).,NA
rlang,1,460,481,FALSE,"Functions taking dots by value rather than by expression (e.g. regular functions, not quoting functions) have a more restricted set of unquoting operations. They only support `:=` and `!!!`, and only at top-level. I.e. `dots_list(!!! x)` is valid but not `dots_list(nested_call(!!! x))` (#217).",NA
rlang,1,461,482,FALSE,Functions taking dots with `list2()` or `dots_list()` now support splicing of `NULL` values. `!!! NULL` is equivalent to `!!! list()` (#242).,NA
rlang,1,462,483,FALSE,"Capture operators now support evaluated arguments. Capturing a forced or evaluated argument is exactly the same as unquoting that argument: the actual object (even if a vector) is inlined in the expression. Capturing a forced argument occurs when you use `enquo()`, `enexpr()`, etc too late. It also happens when your quoting function is supplied to `lapply()` or when you try to quote the first argument of an S3 method (which is necessarily evaluated in order to detect which class to dispatch to). (#295, #300).",NA
rlang,1,463,484,FALSE,"Parentheses around `!!` are automatically removed. This makes the generated expression call cleaner: `(!! sym(""name""))(arg)`. Note that removing the parentheses will never affect the actual precedence within the expression as the parentheses are only useful when parsing code as text. The parentheses will also be added by R when printing code if needed (#296).",NA
rlang,1,464,485,FALSE,Quasiquotation now supports `!!` and `!!!` as functional forms:,NA
rlang,1,464,486,TRUE,"```
expr(`!!`(var))
quo(call(`!!!`(var)))
```",NA
rlang,1,464,486,FALSE,This is consistent with the way native R operators parses to function calls. These new functional forms are to be preferred to `UQ()` and `UQS()`. We are now questioning the latter and might deprecate them in a future release.,NA
rlang,1,465,487,FALSE,The quasiquotation parser now gives meaningful errors in corner cases to help you figure out what is wrong.,NA
rlang,1,466,488,FALSE,"New getters and setters for quosures: `quo_get_expr()`, `quo_get_env()`, `quo_set_expr()`, and `quo_set_env()`. Compared to `get_expr()` etc, these accessors only work on quosures and are slightly more efficient.",NA
rlang,1,467,489,FALSE,`quo_is_symbol()` and `quo_is_call()` now take the same set of arguments as `is_symbol()` and `is_call()`.,NA
rlang,1,468,490,FALSE,`enquo()` and `enexpr()` now deal with default values correctly (#201).,NA
rlang,1,469,491,FALSE,Splicing a list no longer mutates it (#280).,NA
rlang,1,470,492,FALSE,The new functions `cnd_warn()` and `cnd_inform()` transform conditions to warnings or messages before signalling them.,NA
rlang,1,471,493,FALSE,`cnd_signal()` now returns invisibly.,NA
rlang,1,472,494,FALSE,`cnd_signal()` and `cnd_abort()` now accept character vectors to create typed conditions with several S3 subclasses.,NA
rlang,1,473,495,FALSE,`is_condition()` is now properly exported.,NA
rlang,1,474,496,FALSE,Condition signallers such as `cnd_signal()` and `abort()` now accept a call depth as `call` arguments. This allows plucking a call from further up the call stack (#30).,NA
rlang,1,475,497,FALSE,New helper `catch_cnd()`. This is a small wrapper around `tryCatch()` that captures and returns any signalled condition. It returns `NULL` if none was signalled.,NA
rlang,1,476,498,FALSE,"`cnd_abort()` now adds the correct S3 classes for error conditions. This fixes error catching, for instance by `testthat::expect_error()`.",NA
rlang,1,477,499,FALSE,`env_get_list()` retrieves muliple bindings from an environment into a named list.,NA
rlang,1,478,500,FALSE,`with_bindings()` and `scoped_bindings()` establish temporary bindings in an environment.,NA
rlang,1,479,501,FALSE,`is_namespace()` is a snake case wrapper around `isNamespace()`.,NA
rlang,1,480,502,FALSE,"New functions `inherits_any()`, `inherits_all()`, and `inherits_only()`. They allow testing for inheritance from multiple classes. The `_any` variant is equivalent to `base::inherits()` but is more explicit about its behaviour. `inherits_all()` checks that all classes are present in order and `inherits_only()` checks that the class vectors are identical.",NA
rlang,1,481,503,FALSE,New `fn_fmls<-` and `fn_fmls_names<-` setters.,NA
rlang,1,482,504,FALSE,"New function experimental function `chr_unserialise_unicode()` for turning characters serialised to unicode point form (e.g. `<U+xxxx>`) to UTF-8. In addition, `as_utf8_character()` now translates those as well. (@krlmlr)",NA
rlang,1,483,505,FALSE,`expr_label()` now supports quoted function definition calls (#275).,NA
rlang,1,484,506,FALSE,`call_modify()` and `call_standardise()` gain an argument to specify an environment. The call definition is looked up in that environment when the call to modify or standardise is not wrapped in a quosure.,NA
rlang,1,485,507,FALSE,`is_symbol()` gains a `name` argument to check that that the symbol name matches a string (#287).,NA
rlang,1,486,508,FALSE,"New `rlang_box` class. Its purpose is similar to the `AsIs` class from `base::I()`, i.e. it protects a value temporarily. However it does so by wrapping the value in a scalar list. Use `new_box()` to create a boxed value, `is_box()` to test for a boxed value, and `unbox()` to unbox it. `new_box()` and `is_box()` accept optional subclass.",NA
rlang,1,487,509,FALSE,"The vector constructors such as `new_integer()`, `new_double_along()` etc gain a `names` argument. In the case of the `_along` family it defaults to the names of the input vector.",NA
rlang,1,488,510,FALSE,"When nested quosures are evaluated with `eval_tidy()`, the `.env` pronoun now correctly refers to the current quosure under evaluation (#174). Previously it would always refer to the environment of the outermost quosure.",NA
rlang,1,489,511,FALSE,`as_pairlist()` (part of the experimental API) now supports `NULL` and objects of type pairlist (#397).,NA
rlang,1,490,512,FALSE,"Fixed a performance bug in `set_names()` that caused a full copy of the vector names (@jimhester, #366).",NA
rlang,1,491,513,FALSE,"The particle ""lang"" has been renamed to ""call"":",NA
rlang,2,491,514,FALSE,* `lang()` has been renamed to `call2()`.,"The particle ""lang"" has been renamed to ""call"":"
rlang,2,491,515,FALSE,* `new_language()` has ben renamed to `new_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rlang,2,491,516,FALSE,* `is_lang()` has been renamed to `is_call()`. We haven't replaced the `is_unary_lang()` and `is_binary_lang()` because they are redundant with the `n` argument of `is_call()`.,"The particle ""lang"" has been renamed to ""call"":"
rlang,2,491,517,FALSE,"* All call accessors such as `lang_fn()`, `lang_name()`, `lang_args()` etc are soft-deprecated and renamed with `call_` prefix.","The particle ""lang"" has been renamed to ""call"":"
rlang,1,495,517,FALSE,"In rlang 0.1 calls were called ""language"" objects in order to follow the R type nomenclature as returned by `base::typeof()`. We wanted to avoid adding to the confusion between S modes and R types. With hindsight we find it is better to use more meaningful type names.",NA
rlang,1,496,518,FALSE,"We now use the term ""data mask"" instead of ""overscope"". We think data mask is a more natural name in the context of R. We say that that objects from user data mask objects in the current environment. This makes reference to object masking in the search path which is due to the same mechanism (in technical terms, lexical scoping with hierarchically nested environments). Following this new terminology, the new functions `as_data_mask()` and `new_data_mask()` replace `as_overscope()` and `new_overscope()`. `as_data_mask()` has also a more consistent interface. These functions are only meant for developers of tidy evaluation interfaces.",NA
rlang,1,497,519,FALSE,We no longer require a data mask (previously called overscope) to be cleaned up after evaluation. `overscope_clean()` is thus soft-deprecated without replacement.,NA
rlang,1,498,520,FALSE,"`!!` now binds tightly in order to match intuitive parsing of tidy eval code, e.g. `!! x > y` is now equivalent to `(!! x) > y`. A corollary of this new syntax is that you now have to be explicit when you want to unquote the whole expression on the right of `!!`. For instance you have to explicitly write `!! (x > y)` to unquote `x > y` rather than just `x`.",NA
rlang,1,499,521,FALSE,"`UQ()`, `UQS()` and `:=` now issue an error when called directly. The previous definitions caused surprising results when the operators were invoked in wrong places (i.e. not in quasiquoted arguments).",NA
rlang,1,500,522,FALSE,"The prefix form `` `!!`() `` is now an alias to `!!` rather than `UQE()`. This makes it more in line with regular R syntax where operators are parsed as regular calls, e.g. `a + b` is parsed as `` `+`(a, b) `` and both forms are completely equivalent. Also the prefix form `` `!!!`() `` is now equivalent to `!!!`.",NA
rlang,1,501,523,FALSE,`UQE()` is now deprecated in order to simplify the syntax of quasiquotation. Please use `!! get_expr(x)` instead.,NA
rlang,1,502,524,FALSE,`expr_interp()` now returns a formula instead of a quosure when supplied a formula.,NA
rlang,1,503,525,FALSE,`is_quosureish()` and `as_quosureish()` are deprecated. These functions assumed that quosures are formulas but that is only an implementation detail.,NA
rlang,1,504,526,FALSE,"`new_cnd()` is now `cnd()` for consistency with other constructors. Also, `cnd_error()`, `cnd_warning()` and `cnd_message()` are now `error_cnd()`, `warning_cnd()` and `message_cnd()` to follow our naming scheme according to which the type of output is a suffix rather than a prefix.",NA
rlang,1,505,527,FALSE,`is_node()` now returns `TRUE` for calls as well and `is_pairlist()` does not return `TRUE` for `NULL` objects. Use `is_node_list()` to determine whether an object either of type `pairlist` or `NULL`. Note that all these functions are still experimental.,NA
rlang,1,506,528,FALSE,`set_names()` no longer automatically splices lists of character vectors as we are moving away from automatic splicing semantics.,NA
rlang,1,507,529,FALSE,Calling the functional forms of unquote operators with the rlang namespace qualifier is soft-deprecated. `UQ()` and `UQS()` are not function calls so it does not make sense to namespace them. Supporting namespace qualifiers complicates the implementation of unquotation and is misleading as to the nature of unquoting (which are syntactic operators at quotation-time rather than function calls at evaluation-time).,NA
rlang,1,508,530,FALSE,"We are now questioning `UQ()` and `UQS()` as functional forms of `!!`. If `!!` and `!!!` were native R operators, they would parse to the functional calls `` `!!`() `` and `` `!!!`() ``. This is now the preferred way to unquote with a function call rather than with the operators. We haven't decided yet whether we will deprecate `UQ()` and `UQS()` in the future. In any case we recommend using the new functional forms.",NA
rlang,1,509,531,FALSE,`parse_quosure()` and `parse_quosures()` are soft-deprecated in favour of `parse_quo()` and `parse_quos()`. These new names are consistent with the rule that abbreviated suffixes indicate the return type of a function. In addition the new functions require their callers to explicitly supply an environment for the quosures.,NA
rlang,1,510,532,FALSE,Using `f_rhs()` and `f_env()` on quosures is soft-deprecated. The fact that quosures are formulas is an implementation detail that might change in the future. Please use `quo_get_expr()` and `quo_get_env()` instead.,NA
rlang,1,511,533,FALSE,`quo_expr()` is soft-deprecated in favour of `quo_squash()`. `quo_expr()` was a misnomer because it implied that it was a mere expression acccessor for quosures whereas it was really a lossy operation that squashed all nested quosures.,NA
rlang,1,512,534,FALSE,"With the renaming of the `lang` particle to `call`, all these functions are soft-deprecated: `lang()`, `is_lang()`, `lang_fn()`, `lang_name()`, `lang_args()`. In addition, `lang_head()` and `lang_tail()` are soft-deprecated without replacement because these are low level accessors that are rarely needed.",NA
rlang,1,513,535,FALSE,`as_overscope()` is soft-deprecated in favour of `as_data_mask()`.,NA
rlang,1,514,536,FALSE,"The node setters were renamed from `mut_node_` prefix to `node_poke_`. This change follows a new naming convention in rlang where mutation is referred to as ""poking"".",NA
rlang,1,515,537,FALSE,`splice()` is now in questioning stage as it is not needed given the `!!!` operator works in functions taking dots with `dots_list()`.,NA
rlang,1,516,538,FALSE,"`lgl_len()`, `int_len()` etc have been soft-deprecated and renamed with `new_` prefix, e.g. `new_logical()` and `new_integer()`. This is for consistency with other non-variadic object constructors.",NA
rlang,1,517,539,FALSE,`ll()` is now an alias to `list2()`. This is consistent with the new `call2()` constructor for calls. `list2()` and `call2()` are versions of `list()` and `call()` that support splicing of lists with `!!!`. `ll()` remains around as a shorthand for users who like its conciseness.,NA
rlang,1,518,540,FALSE,"Automatic splicing of lists in vector constructors (e.g. `lgl()`, `chr()`, etc) is now soft-deprecated. Please be explicit with the splicing operator `!!!`.",NA
rlang,1,519,541,FALSE,This is a maintenance release in anticipation of a forthcoming change to R's C API (use `MARK_NOT_MUTABLE()` instead of `SET_NAMED()`).,NA
rlang,1,520,542,FALSE,New function `is_reference()` to check whether two objects are one and the same.,NA
rlang,1,521,543,FALSE,`eval_tidy()` no longer maps over lists but returns them literally. This behaviour is an overlook from past refactorings and was never,NA
rlang,1,522,544,FALSE,Bare formulas are now evaluated in the correct environment in tidyeval functions.,NA
rlang,1,523,545,FALSE,"`enquo()` now works properly within compiled functions. Before this release, constants optimised by the bytecode compiler couldn't be enquoted.",NA
rlang,1,524,546,FALSE,"The `new_environment()` constructor creates a child of the empty environment and takes an optional named list of data to populate it. Compared to `env()` and `child_env()`, it is meant to create environments as data structures rather than as part of a scope hierarchy.",NA
rlang,1,525,547,FALSE,The `new_call()` constructor creates calls out of a callable object (a function or an expression) and a pairlist of arguments. It is useful to avoid costly internal coercions between lists and pairlists of arguments.,NA
rlang,1,526,548,FALSE,`env_child()`'s first argument is now `.parent` instead of `parent`.,NA
rlang,1,527,549,FALSE,`mut_` setters like `mut_attrs()` and environment helpers like `env_bind()` and `env_unbind()` now return their (modified) input invisibly. This follows the tidyverse convention that functions called primarily for their side effects should return their input invisibly.,NA
rlang,1,528,550,FALSE,"`is_pairlist()` now returns `TRUE` for `NULL`. We added `is_node()` to test for actual pairlist nodes. In other words, `is_pairlist()` tests for the data structure while `is_node()` tests for the type.",NA
rlang,1,529,551,FALSE,"`env()` and `env_child()` can now get arguments whose names start with `.`. Prior to this fix, these arguments were partial-matching on `env_bind()`'s `.env` argument.",NA
rlang,1,530,552,FALSE,The internal `replace_na()` symbol was renamed to avoid a collision with an exported function in tidyverse. This solves an issue occurring in old versions of R prior to 3.3.2 (#133).,NA
rstudioapi,1,1,1,FALSE,`documentPath()` now marks the encoding of file paths as UTF-8. (#257),NA
rstudioapi,1,2,2,FALSE,"`getSourceEditorContext()` gains the `id` argument, to be used to request the editor context for a document with an already-known ID. (#251)",NA
rstudioapi,1,3,3,FALSE,"Added `documentOpen()`, for opening a document in RStudio and optionally navigating the cursor to a particular point in the file. The method is synchronous and returns the document ID upon completion.",NA
rstudioapi,1,4,4,FALSE,Fixed an issue where `rstudioapi::askForSecret()` would erroneously fall back to using `rstudioapi::askForPassword()` during Knit.,NA
rstudioapi,1,5,5,FALSE,"Added `registerCommandCallback`, `registerCommandStreamCallback`, and `unregisterCommandCallback`, used to execute a callback after an IDE command is executed.",NA
rstudioapi,1,7,7,FALSE,Fixed an issue where remote `rstudioapi` calls would erroneously use a previous response in some cases.,NA
rstudioapi,1,8,8,FALSE,Allow `navigateToFile` to accept an empty file. This file will default to the file currently in view in the active column.,NA
rstudioapi,1,9,9,FALSE,"Added `registerChunkExecCallback` and `unregisterChunkExecCallback`, used to execute a callback after a chunk is ran.",NA
rstudioapi,1,10,10,FALSE,`rstudioapi::launcherResourceLimit()` now properly delegates the type and memory arguments. (#164),NA
rstudioapi,1,11,11,FALSE,"`rstudioapi` gains the function `highlightUi()`, used to highlight UI elements in newer versions of RStudio.",NA
rstudioapi,1,12,12,FALSE,Paths returned from `selectFile()` are now properly marked with UTF-8 encoding.,NA
rstudioapi,1,13,13,FALSE,"It is now possible for `rstudioapi` to communicate with a parent RStudio session, for R sessions launched as RStudio jobs. Use `rstudioapi::isAvailable(child_ok = TRUE)` to assert that it's okay to check that `rstudioapi` is available and is running within an RStudio job.",NA
rstudioapi,1,14,14,FALSE,"Added `bugReport()`, a helper function for reporting RStudio bugs on the GitHub issue tracker with an issue template pre-populated with some helpful diagnostic information.",NA
rstudioapi,1,15,15,FALSE,"Added `userIdentity` and `systemUsername`, used to retrieve information about the current user.",NA
rstudioapi,1,17,17,FALSE,"Added functions for displaying jobs in RStudio's Jobs pane: `jobAdd()`, `jobRemove()`, etc.",NA
rstudioapi,1,18,18,FALSE,"Added `translateLocalUrl()`, for translating localhost URLs to externally addressable ones on RStudio Server.",NA
rstudioapi,1,19,19,FALSE,"Added functions for installing + using build tools: `buildToolsCheck()`, `buildToolsInstall()`, `buildToolsExec()`",NA
rstudioapi,1,20,20,FALSE,"Added functions for installing + using themes: `addTheme()`, `applyTheme()`, `convertTheme()`, `getThemes()`, `getThemeInfo()`.",NA
rstudioapi,1,21,21,FALSE,"Added `previewSql()`, for previewing output from executing a SQL query.",NA
rstudioapi,1,22,22,FALSE,"Added `askForSecret()`, for prompting the user to enter a password or otherwise privileged information.",NA
rstudioapi,1,23,23,FALSE,Fixed an issue where `getActiveProject()` failed for non-ASCII paths. (#86),NA
rstudioapi,1,24,24,FALSE,"Added methods for prompting the user for file paths: `selectFile()`, `selectDirectory()`.",NA
rstudioapi,1,25,25,FALSE,`askForPassword()` gains a default prompt (#41),NA
rstudioapi,1,26,26,FALSE,Add `createProjectTemplate()` function,NA
rstudioapi,1,27,27,FALSE,Add `setPersistentValue()` / `getPersistentValue()` functions,NA
rstudioapi,1,28,28,FALSE,"Add methods for interacting with Terminal tab: `terminalActivate()`, `terminalClear()`, `terminalCreate()`, `terminalList()`, `terminalBuffer()`, `terminalContext()`, `terminalVisible()`, `terminalBusy()`, `terminalRunning()`, `terminalKill()`, `terminalSend()`, `terminalExecute()`, and `terminalExitCode()`.",NA
rstudioapi,1,29,29,FALSE,Add sendToConsole function,NA
rstudioapi,1,30,30,FALSE,Add APIs for setting cursor position in document,NA
rstudioapi,1,31,31,FALSE,Add askForPassword function,NA
rstudioapi,1,32,32,FALSE,Add getActiveProject function,NA
rstudioapi,1,33,33,FALSE,Add API methods for interacting with a document open in RStudio:,NA
rstudioapi,1,35,35,FALSE,Compatibility with calling conventions for RStudio v0.99,NA
rstudioapi,1,36,36,FALSE,"Stubs and documentation for versionInfo, previewRd, and viewer functions",NA
rvest,1,2,2,FALSE,Fixes for CRAN,NA
rvest,1,3,3,FALSE,"`html_table()` converts empty tables to empty tibbles (@epiben, #327).",NA
rvest,1,4,4,FALSE,"`html_table()` correctly handles tables with cells that contain blank values for `rowspan` and/or `colspan`, so that e.g. `<td rowspan="""">` is parsed as `<td rowspan=1>` (@epiben, #323).",NA
rvest,1,5,5,FALSE,Fix broken example,NA
rvest,1,6,6,FALSE,"New `html_text2()` provides a more natural rendering of HTML nodes into text, converting `<br>` into ""`\n`{=tex}"", and removing non-significant whitespace (#175). By default, it also converts `&nbsp;` into regular spaces, which you can suppress with `preserve_nbsp = TRUE` (#284).",NA
rvest,1,7,7,FALSE,"`html_table()` has been re-written from scratch to more closely mimic the algorithm that browsers use for parsing tables. This should mean that there are far fewer tables for which it fails to produce some output (#63, #204, #215). The `fill` argument has been deprecated since it is no longer needed. `html_table()` now returns a tibble rather than a data frame to be compatible with the rest of the tidyverse (#199). Its performance has been considerably improved (#237). It also gains a `na.strings` argument to control what values are converted to `NA` (#107), and a `convert` argument to control whether to run the conversion (#311).",NA
rvest,1,8,8,FALSE,"New `html_form_submit()` allows you to submit a form directly, without needing to create a session (#300).",NA
rvest,1,9,9,FALSE,rvest is now licensed as MIT (#287).,NA
rvest,1,10,10,FALSE,"rvest now imports xml2 rather than depending on it. This is cleaner because it avoids attaching all the xml2 functions that you're less likely to use. To reduce the change of breakages, rvest re-exports xml2 functions `read_html()` and `url_absolute()`, but your code may now need an explicit `library(xml2)`.",NA
rvest,1,11,11,FALSE,"`html_form()` now returns an object with class `rvest_form` (instead of form). Fields within a form now have class `rvest_field`, instead of a variety of classes that were lacking the `rvest_` prefix. All functions for working with forms have a common `html_form_` prefix: `set_values()` became `html_form_set()`. `submit_form()` was renamed to `session_submit()` because it returns a session.",NA
rvest,1,12,12,FALSE,"`html_node()` and `html_nodes()` have been superseded in favor of `html_element()` and `html_elements()` since they (almost) always return elements, not nodes (#298).",NA
rvest,1,13,13,FALSE,`html_session()` is now `session()` and returns an object of class `rvest_session` (instead of `session`). All functions that work with session objects now have a common `session_` prefix.,NA
rvest,1,14,14,FALSE,"Long deprecated `html()`, `html_tag()`, `xml()` functions have been removed.",NA
rvest,1,15,15,FALSE,`minimal_html()` (which doesn't appear to be used by any other package) has had its arguments flipped to make it more intuitive.,NA
rvest,1,16,16,FALSE,`guess_encoding()` has been renamed to `html_encoding_guess()` to avoid a clash with `stringr::guess_encoding()` (#209). `repair_encoding()` has been deprecated because it doesn't appear to work.,NA
rvest,1,17,17,FALSE,`pluck()` is no longer exported to avoid a clash with `purrr::pluck()`; if you need it use `purrr::map_chr()` and friends instead (#209).,NA
rvest,1,18,18,FALSE,"`xml_tag()`, `xml_node()`, and `xml_nodes()` have been formally deprecated in favor of their `html_` equivalents.",NA
rvest,1,19,19,FALSE,"The ""harvesting the web"" vignette has been rewritten to focus more on basics rvest, eliminating the screenshots to keep the installed package as svelte as possible. It's also been renamed to `vignette(""rvest"")` since it's the vignette that you should read first.",NA
rvest,1,20,20,FALSE,"The SelectorGadget vignette is now a web-only article, <https://rvest.tidyverse.org/articles/articles/selectorgadget.html>, so we can be more generous with screenshots since they're no longer bundled with every install of the package. Together with the rewrite of the other vignette, this means that rvest is now \~90 Kb instead of \~1.1 Mb.",NA
rvest,1,21,21,FALSE,All uses of IMDB have been eliminated since the site explicitly prohibits scraping (#195).,NA
rvest,1,22,22,FALSE,`session_submit()` errors if `form` doesn't have a `url` (#288).,NA
rvest,1,23,23,FALSE,New `session_forward()` function to complement `session_back()`. It now allows you to pick the submission button by position (#156). The `...` argument is deprecated; please use `config` instead.,NA
rvest,1,24,24,FALSE,"`html_form_set()` can now accept character vectors allowing you to select multiple checkboxes in a set or select multiple values from a multi-`<select>` (#127, with help from @juba). It also uses dynamic dots so that you can use `!!!` if you have a list of values (#189).",NA
rvest,1,28,28,FALSE,Fix `R CMD check` failure,NA
rvest,1,29,29,FALSE,"`submit_request()` now checks for empty form-field-types to select the correct submit fields (@rentrop, #159)",NA
rvest,1,30,30,FALSE,Fixes to `follow_link()` and `back()` to correctly manage session history.,NA
rvest,1,31,31,FALSE,"If you're using xml2 1.0.0, `html_node()` will now return a ""missing node"".",NA
rvest,1,32,32,FALSE,Parse rowspans and colspans effectively by filling using repetition from left to right (for colspan) and top to bottom (rowspan) (#111),NA
rvest,1,33,33,FALSE,Updated a few examples and demos where the website structure has changed.,NA
rvest,1,34,34,FALSE,Made compatible with both xml2 0.1.2 and 1.0.0.,NA
rvest,1,35,35,FALSE,Fix invalid link for SSA example.,NA
rvest,1,36,36,FALSE,Parse `<options>` that don't have value attribute (#85).,NA
rvest,1,37,37,FALSE,"Remove all remaining uses of `html()` in favor of `read_html()` (@jimhester, #113).",NA
rvest,1,38,38,FALSE,"rvest has been rewritten to take advantage of the new xml2 package. xml2 provides a fresh binding to libxml2, avoiding many of the work-arounds previously needed for the XML package. Now rvest depends on the xml2 package, so all the xml functions are available, and rvest adds a thin wrapper for html.",NA
rvest,1,39,39,FALSE,"A number of functions have change names. The old versions still work, but are deprecated and will be removed in rvest 0.4.0.",NA
rvest,2,39,40,FALSE,* `html_tag()` -\> `html_name()`,"A number of functions have change names. The old versions still work, but are deprecated and will be removed in rvest 0.4.0."
rvest,2,39,41,FALSE,* `html()` -\> `read_html()`,"A number of functions have change names. The old versions still work, but are deprecated and will be removed in rvest 0.4.0."
rvest,1,42,42,FALSE,"`html_node()` now throws an error if there are no matches, and a warning if there's more than one match. I think this should make it more likely to fail clearly when the structure of the page changes.",NA
rvest,1,43,43,FALSE,`xml_structure()` has been moved to xml2. New `html_structure()` (also in xml2) highlights id and class attributes (#78).,NA
rvest,1,44,44,FALSE,`submit_form()` now works with forms that use GET (#66).,NA
rvest,1,45,45,FALSE,"`submit_request()` (and hence `submit_form()`) is now case-insensitive, and so will find `<input type=SUBMIT>` as well as`<input type=""submit"">`.",NA
rvest,1,46,46,FALSE,"`submit_request()` (and hence `submit_form()`) recognizes forms with `<input type=""image"">` as a valid form submission button.",NA
rvest,1,47,47,FALSE,`html()` and `xml()` pass `...` on to `httr::GET()` so you can more finely control the request (#48).,NA
rvest,1,48,48,FALSE,"Add xml support: parse with `xml()`, then work with using `xml_node()`, `xml_attr()`, `xml_attrs()`, `xml_text()` and `xml_tag()` (#24).",NA
rvest,1,49,49,FALSE,`xml_structure()`: new function that displays the structure (i.e. tag and attribute names) of a xml/html object (#10).,NA
rvest,1,50,50,FALSE,"`follow_link()` now accepts css and xpath selectors. (#38, #41, #42)",NA
rvest,1,51,51,FALSE,"`html()` does a better job of dealing with encodings (passing the problem on to `XML::parseHTML()`) instead of trying to do it itself (#25, #50).",NA
rvest,1,52,52,FALSE,`html_attr()` returns default value when input is NULL (#49),NA
rvest,1,53,53,FALSE,Add missing `html_node()` method for session.,NA
rvest,1,54,54,FALSE,`html_nodes()` now returns an empty list if no elements are found (#31).,NA
rvest,1,55,55,FALSE,`submit_form()` converts relative paths to absolute URLs (#52). It also deals better with 0-length inputs (#29).,NA
stringr,1,1,1,FALSE,stringr functions now consistently implement the tidyverse recycling rules (#372). Overall this is a fairly minor change as stringi was already very close to the tidyverse rules. There are only two major changes:,NA
stringr,2,1,2,FALSE,"* Only vectors of length 1 are recycled: previously, `str_detect(letters, c(""x"", ""y""))` worked, but it now errors.",stringr functions now consistently implement the tidyverse recycling rules (#372). Overall this is a fairly minor change as stringi was already very close to the tidyverse rules. There are only two major changes:
stringr,2,1,3,FALSE,"* `str_c()` ignores `NULLs`, rather than treating them as length 0 vectors.",stringr functions now consistently implement the tidyverse recycling rules (#372). Overall this is a fairly minor change as stringi was already very close to the tidyverse rules. There are only two major changes:
stringr,1,3,3,FALSE,"Additionally, many more non-vectorised arguments now throw errors, rather than warnings, if supplied a vector.",NA
stringr,1,4,4,FALSE,"`str_split_fixed()` now pads with `NA` rather than `"" ""` (#195).",NA
stringr,1,5,5,FALSE,`regex()` and friends now generate class names with `stringr_` prefix (#384).,NA
stringr,1,6,6,FALSE,`str_view()` will use ANSI colouring if available (#370). This works in more places than HTML widgets and requires fewer dependencies. `str_view()` also no longer requires a pattern so you can use it to display strings with special characters. It now highlights whitespace characters apart from space since otherwise they are often confusing. It's also now vectorised over both `string` and `pattern` (#407).,NA
stringr,1,7,7,FALSE,"New `vignette(""from-base"")` by @sastoudt provides a comprehensive comparison between base R functions and their stringr equivalents. It's designed to help you move to stringr if you're already familiar with base R string functions (#266).",NA
stringr,1,8,8,FALSE,"New `str_escape()` escapes regular expression metacharacters, providing an alternative to `fixed()` if you want to compose a pattern from external strings (#408).",NA
stringr,1,9,9,FALSE,"New `str_equal()` compares two character vectors using unicode rules, and optionally ignores case (#381).",NA
stringr,1,10,10,FALSE,New `str_split_1()` is tailored for the special case of splitting up a single string (#409).,NA
stringr,1,11,11,FALSE,"New `str_split_i()` function to extract only a single piece from a string (#278, @bfgray3).",NA
stringr,1,12,12,FALSE,"New `str_like()` function which allows the use of SQL wildcards (#280, @rjpat).",NA
stringr,1,13,13,FALSE,New `str_rank()` to complete set of order/rank/sort functions (#353).,NA
stringr,1,14,14,FALSE,"New `str_unique()` is a wrapper around `stri_unique()` and returns unique string values in a character vector (#249, @seasmith).",NA
stringr,1,15,15,FALSE,New `str_width()` returns the display width of a string (#380).,NA
stringr,1,16,16,FALSE,stringr is now licensed as MIT (#351).,NA
stringr,1,17,17,FALSE,Better error message if you supply a non-string pattern (#378).,NA
stringr,1,18,18,FALSE,"Many typos in `sentences` have been fixed (@romatik, #299)",NA
stringr,1,19,19,FALSE,`str_flatten()` gains a `last` argument that optionally override the final separator (#377). It gains a `na.rm` argument to remove missing values (since it's a summary function) (#439).,NA
stringr,1,20,20,FALSE,"`str_pad()` gains `use_width` argument to control whether to use the total code point width or the number of code points as ""width"" of a string (#190).",NA
stringr,1,21,21,FALSE,`str_replace()` and `str_replace_all()` can use standard tidyverse formula shorthand for `replacement` function (#331).,NA
stringr,1,22,22,FALSE,`str_starts()` and `str_ends()` now correctly respect regex operator precedence (@carlganz).,NA
stringr,1,23,23,FALSE,"`str_wrap()` breaks only at whitespace by default; set `whitespace_only = FALSE` to return to the previous behaviour (#335, @rjpat).",NA
stringr,1,24,24,FALSE,"`word()` now returns all the sentence when using a negative `start` parameter that is greater or equal than the number of words. (@pdelboca, #245)",NA
stringr,1,25,25,FALSE,`str_interp()` now renders lists consistently independent on the presence of additional placeholders (@amhrasmussen).,NA
stringr,1,26,26,FALSE,"New `str_starts()` and `str_ends()` functions to detect patterns at the beginning or end of strings (@jonthegeek, #258).",NA
stringr,1,27,27,FALSE,"`str_subset()`, `str_detect()`, and `str_which()` get `negate` argument, which is useful when you want the elements that do NOT match (#259, @yutannihilation).",NA
stringr,1,28,28,FALSE,"New `str_to_sentence()` function to capitalize with sentence case (@jonthegeek, #202).",NA
stringr,1,29,29,FALSE,`str_replace_all()` with a named vector now respects modifier functions (#207),NA
stringr,1,30,30,FALSE,"`str_trunc()` is once again vectorised correctly (#203, @austin3dickey).",NA
stringr,1,31,31,FALSE,"`str_view()` handles `NA` values more gracefully (#217). I've also tweaked the sizing policy so hopefully it should work better in notebooks, while preserving the existing behaviour in knit documents (#232).",NA
stringr,1,32,32,FALSE,"During package build, you may see `Error : object ‘ignore.case’ is not exported by 'namespace:stringr'`. This is because the long deprecated `str_join()`, `ignore.case()`",NA
stringr,1,33,33,FALSE,`str_glue()` and `str_glue_data()` provide convenient wrappers around `glue` and `glue_data()` from the [glue](http://glue.tidyverse.org/) package (#157).,NA
stringr,1,34,34,FALSE,`str_flatten()` is a wrapper around `stri_flatten()` and clearly conveys flattening a character vector into a single string (#186).,NA
stringr,1,35,35,FALSE,"`str_remove()` and `str_remove_all()` functions. These wrap `str_replace()` and `str_replace_all()` to remove patterns from strings. (@Shians, #178)",NA
stringr,1,36,36,FALSE,"`str_squish()` removes spaces from both the left and right side of strings, and also converts multiple space (or space-like characters) to a single space within strings (@stephlocke, #197).",NA
stringr,1,37,37,FALSE,"`str_sub()` gains `omit_na` argument for ignoring `NA`. Accordingly, `str_replace()` now ignores `NA`s and keeps the original strings. (@yutannihilation, #164)",NA
stringr,1,38,38,FALSE,"`str_trunc()` now preserves NAs (@ClaytonJY, #162)",NA
stringr,1,39,39,FALSE,"`str_trunc()` now throws an error when `width` is shorter than `ellipsis` (@ClaytonJY, #163).",NA
stringr,1,40,40,FALSE,"Long deprecated `str_join()`, `ignore.case()` and `perl()` have now been removed.",NA
stringr,1,41,41,FALSE,"`str_match_all()` now returns NA if an optional group doesn't match (previously it returned """"). This is more consistent with",NA
stringr,1,42,42,FALSE,"In `str_replace()`, `replacement` can now be a function that is called once for each match and whose return value is used to replace the match.",NA
stringr,1,43,43,FALSE,New `str_which()` mimics `grep()` (#129).,NA
stringr,1,44,44,FALSE,"A new vignette (`vignette(""regular-expressions"")`) describes the details of the regular expressions supported by stringr. The main vignette (`vignette(""stringr"")`) has been updated to give a high-level overview of the package.",NA
stringr,1,45,45,FALSE,`str_order()` and `str_sort()` gain explicit `numeric` argument for sorting mixed numbers and strings.,NA
stringr,1,46,46,FALSE,`str_replace_all()` now throws an error if `replacement` is not a character vector. If `replacement` is `NA_character_` it replaces the complete string with replaces with `NA` (#124).,NA
stringr,1,47,47,FALSE,"All functions that take a locale (e.g. `str_to_lower()` and `str_sort()`) default to ""en"" (English) to ensure that the default is consistent across platforms.",NA
stringr,1,48,48,FALSE,"Add sample datasets: `fruit`, `words` and `sentences`.",NA
stringr,1,49,49,FALSE,"`fixed()`, `regex()`, and `coll()` now throw an error if you use them with anything other than a plain string (#60). I've clarified that the replacement for `perl()` is `regex()` not `regexp()` (#61). `boundary()` has improved defaults when splitting on non-word boundaries (#58, @lmullen).",NA
stringr,1,50,50,FALSE,`str_detect()` now can detect boundaries (by checking for a `str_count()` \> 0) (#120). `str_subset()` works similarly.,NA
stringr,1,51,51,FALSE,`str_extract()` and `str_extract_all()` now work with `boundary()`. This is particularly useful if you want to extract logical constructs like words or sentences. `str_extract_all()` respects the `simplify` argument when used with `fixed()` matches.,NA
stringr,1,52,52,FALSE,"`str_subset()` now respects custom options for `fixed()` patterns (#79, @gagolews).",NA
stringr,1,53,53,FALSE,"`str_replace()` and `str_replace_all()` now behave correctly when a replacement string contains `$`s, `\\\\1`, etc. (#83, #99).",NA
stringr,1,54,54,FALSE,`str_split()` gains a `simplify` argument to match `str_extract_all()` etc.,NA
stringr,1,55,55,FALSE,`str_view()` and `str_view_all()` create HTML widgets that display regular expression matches (#96).,NA
stringr,1,56,56,FALSE,`word()` returns `NA` for indexes greater than number of words (#112).,NA
stringr,1,57,57,FALSE,"stringr is now powered by [stringi](https://github.com/Rexamine/stringi) instead of base R regular expressions. This improves unicode and support, and makes most operations considerably faster. If you find stringr inadequate for your string processing needs, I highly recommend looking at stringi in more detail.",NA
stringr,1,58,58,FALSE,"stringr gains a vignette, currently a straight forward update of the article that appeared in the R Journal.",NA
stringr,1,59,59,FALSE,"`str_c()` now returns a zero length vector if any of its inputs are zero length vectors. This is consistent with all other functions, and standard R recycling rules. Similarly, using `str_c(""x"", NA)` now yields `NA`. If you want `""xNA""`, use `str_replace_na()` on the inputs.",NA
stringr,1,60,60,FALSE,`str_replace_all()` gains a convenient syntax for applying multiple pairs of pattern and replacement to the same vector:,NA
stringr,1,60,61,TRUE,"```
input <- c(""abc"", ""def"")
str_replace_all(input, c(""[ad]"" = ""!"", ""[cf]"" = ""?""))
```",NA
stringr,1,61,62,FALSE,"`str_match()` now returns NA if an optional group doesn't match (previously it returned """"). This is more consistent with `str_extract()` and other match failures.",NA
stringr,1,62,63,FALSE,"New `str_subset()` keeps values that match a pattern. It's a convenient wrapper for `x[str_detect(x)]` (#21, @jiho).",NA
stringr,1,63,64,FALSE,New `str_order()` and `str_sort()` allow you to sort and order strings in a specified locale.,NA
stringr,1,64,65,FALSE,New `str_conv()` to convert strings from specified encoding to UTF-8.,NA
stringr,1,65,66,FALSE,"New modifier `boundary()` allows you to count, locate and split by character, word, line and sentence boundaries.",NA
stringr,1,66,67,FALSE,"The documentation got a lot of love, and very similar functions (e.g. first and all variants) are now documented together. This should hopefully make it easier to locate the function you need.",NA
stringr,1,67,68,FALSE,"`ignore.case(x)` has been deprecated in favour of `fixed|regex|coll(x, ignore.case = TRUE)`, `perl(x)` has been deprecated in favour of `regex(x)`.",NA
stringr,1,68,69,FALSE,"`str_join()` is deprecated, please use `str_c()` instead.",NA
stringr,1,69,70,FALSE,fixed path in `str_wrap` example so works for more R installations.,NA
stringr,1,70,71,FALSE,remove dependency on plyr,NA
stringr,1,71,72,FALSE,Zero input to `str_split_fixed` returns 0 row matrix with `n` columns,NA
stringr,1,72,73,FALSE,Export `str_join`,NA
stringr,1,73,74,FALSE,new modifier `perl` that switches to Perl regular expressions,NA
stringr,1,74,75,FALSE,`str_match` now uses new base function `regmatches` to extract matches - this should hopefully be faster than my previous pure R algorithm,NA
stringr,1,75,76,FALSE,new `str_wrap` function which gives `strwrap` output in a more convenient format,NA
stringr,1,76,77,FALSE,new `word` function extract words from a string given user defined separator (thanks to suggestion by David Cooper),NA
stringr,1,77,78,FALSE,`str_locate` now returns consistent type when matching empty string (thanks to Stavros Macrakis),NA
stringr,1,78,79,FALSE,new `str_count` counts number of matches in a string.,NA
stringr,1,79,80,FALSE,`str_pad` and `str_trim` receive performance tweaks - for large vectors this should give at least a two order of magnitude speed up,NA
stringr,1,80,81,FALSE,str_length returns NA for invalid multibyte strings,NA
stringr,1,81,82,FALSE,fix small bug in internal `recyclable` function,NA
stringr,1,82,83,FALSE,"all functions now vectorised with respect to string, pattern (and",NA
stringr,1,83,84,FALSE,"fixed() function now tells stringr functions to use fixed matching, rather than escaping the regular expression. Should improve",NA
stringr,1,84,85,FALSE,new ignore.case() modifier tells stringr functions to ignore case of,NA
stringr,1,85,86,FALSE,str_replace renamed to str_replace_all and new str_replace function,NA
stringr,1,86,87,FALSE,new str_sub\<- function (analogous to substring\<-) for substring,NA
stringr,1,87,88,FALSE,str_sub now understands negative positions as a position from the,NA
stringr,1,88,89,FALSE,"str_pad side argument can be left, right, or both (instead of",NA
stringr,1,90,91,FALSE,stringr now has a namespace and imports plyr (rather than requiring,NA
stringr,1,93,94,FALSE,all functions more carefully check input and return informative,NA
stringr,1,94,95,FALSE,add invert_match() function to convert a matrix of location of,NA
stringr,1,97,98,FALSE,str_sub now correctly replaces Inf in end argument with length of,NA
stringr,1,98,99,FALSE,new function str_split_fixed returns fixed number of splits in a,NA
tibble,1,1,1,FALSE,Correct top-level calls are shown for the vast majority of errors (#1379).,NA
tibble,1,2,2,FALSE,Using cli for formatting conditions (#1387).,NA
tibble,1,3,3,FALSE,Check if R version changed (#1365).,NA
tibble,1,4,4,FALSE,Define responsibility for setting row names and class (#1364).,NA
tibble,1,5,5,FALSE,"Update example for `nrow` argument to `new_tibble()` (@heavywatal, #1394).",NA
tibble,1,6,6,FALSE,Remove ANSI escapes from invariants article on pkgdown (#1374).,NA
tibble,1,8,8,FALSE,Require vctrs \>= 0.4.1 and pillar \>= 1.8.1,NA
tibble,1,9,9,FALSE,"Skip tests if suggested packages not available (#1246, @MichaelChirico).",NA
tibble,1,11,11,FALSE,Better reporting for error calls from `vec_as_location()` (#1237).,NA
tibble,1,12,12,FALSE,"Mention `median()` in Recovery section of `vignette(""numbers"")` (#1197).",NA
tibble,1,13,13,FALSE,"`trunc_mat()` now returns a value with a different structure. This is considered an implementation detail that can change in the future, do not rely on it. The only guarantee is that calling",NA
tibble,1,17,17,FALSE,"Prefer `class` over `.subclass` in `rlang::error_cnd()` (#1015,",NA
tibble,1,18,18,FALSE,`set_num_opts()` and `set_char_opts()` are reexported from pillar,NA
tibble,1,19,19,FALSE,`view()` uses `rlang::expr_deparse(width = Inf)` to avoid errors,NA
tibble,1,20,20,FALSE,`new_tibble()` checks that the `nrow` argument is nonnegative and,NA
tibble,1,22,22,FALSE,"Avoid necessity to set `""tibble.view_max""` option for lazy tables",NA
tibble,1,23,23,FALSE,Avoid blanket import for lifecycle package for compatibility with,NA
tibble,1,26,26,FALSE,"Move `vignette(""digits"")`, `vignette(""numbers"")`, `?num` and `?char`",NA
tibble,1,30,30,FALSE,"`x[i, j] <- one_row_value` avoids explicit recycling of the right-hand side, the recycling happens implicitly in",NA
tibble,1,32,32,FALSE,"`new_tibble()` uses `vctrs::new_data_frame()` internally (#726,",NA
tibble,1,35,35,FALSE,"`tbl[row, col] <- rhs` treats an all-`NA` logical vector as a missing value both for existing data (#773) and for the right-hand side value (#868). This means that a column initialized with `NA` (of type `logical`) will change its type when a row is updated to a",NA
tibble,1,39,39,FALSE,"`tibble()` and `tibble_row()` ignore all columns that evaluate to `NULL`, not only those where a verbatim `NULL` is passed (#895,",NA
tibble,1,44,44,FALSE,Bump required versions of ellipsis and vctrs to avoid warning during,NA
tibble,1,45,45,FALSE,Bump required versions of ellipsis and vctrs to avoid warning during,NA
tibble,1,47,47,FALSE,`tribble()` and `frame_matrix()` give an error if values are named,NA
tibble,1,50,50,FALSE,"`has_rownames()` now works correctly for data frames with a `""row.names""` attribute malformed due to a problem in `structure()` (#852).",NA
tibble,1,51,51,FALSE,"`tbl[FALSE, ""column""] <- x` adds new column again (#846).",NA
tibble,1,52,52,FALSE,"Importing pillar 1.5.0, cli and crayon are now suggested packages (#475).",NA
tibble,1,53,53,FALSE,"`size_sum()` is now reexported from pillar (#850, @topepo).",NA
tibble,1,54,54,FALSE,`as_tibble()` hints more often to use the `.name_repair` argument if column names are invalid (#855).,NA
tibble,1,55,55,FALSE,`as_tibble.table()` mentions `.name_repair` argument in the error message (#839).,NA
tibble,1,56,56,FALSE,Remove compatibility code for pillar \< 1.5.0 (#861).,NA
tibble,1,57,57,FALSE,"Moved most functions to the ""stable"" lifecycle (#860).",NA
tibble,1,58,58,FALSE,`vec_ptype_abbr.tbl_df()` and `type_sum.tbl_df()` now uses the name,NA
tibble,1,62,62,FALSE,Establish compatibility with upcoming pillar 1.5.0 (#818).,NA
tibble,1,63,63,FALSE,"`tbl_sum()` shows ""data frame"" instead of ""tibble"" for objects inheriting from `""tbl""` but not `""tbl_df""` (#818).",NA
tibble,1,64,64,FALSE,Register `format.tbl()` and `print.tbl()` methods only if pillar doesn't (#816).,NA
tibble,1,65,65,FALSE,Use `vctrs::num_as_location()` internally for subset assignment of rows and columns for better error messages (#746).,NA
tibble,1,66,66,FALSE,Adapt tests to the development version of testthat.,NA
tibble,1,67,67,FALSE,Fix documentation link to `base::Extract`.,NA
tibble,1,68,68,FALSE,"`add_row(df)` adds an empty row again (#809, @DavisVaughan).",NA
tibble,1,69,69,FALSE,Fix test compatibility with rlang 0.4.7.,NA
tibble,1,70,70,FALSE,Fix warning about `needs_dots` arguments with pillar \>= 1.4.5 (#798).,NA
tibble,1,71,71,FALSE,"`[[` works with classed indexes again, e.g. created with `glue::glue()` (#778).",NA
tibble,1,72,72,FALSE,`add_column()` works without warning for 0-column data frames (#786).,NA
tibble,1,73,73,FALSE,`tribble()` now better handles named inputs (#775) and objects of non-vtrs classes like `lubridate::Period` (#784) and `formattable::formattable` (#785).,NA
tibble,1,74,74,FALSE,"Subsetting and subassignment are faster (#780, #790, #794).",NA
tibble,1,75,75,FALSE,`is.null()` is preferred over `is_null()` for speed.,NA
tibble,1,76,76,FALSE,Implement continuous benchmarking (#793).,NA
tibble,1,78,78,FALSE,`[<-.tbl_df()` coerces matrices to data frames (#762).,NA
tibble,1,79,79,FALSE,Use delayed import for cli to work around unload problems in downstream packages (#754).,NA
tibble,1,80,80,FALSE,More soft-deprecation warnings are actually visible.,NA
tibble,1,81,81,FALSE,"If `.name_repair` is a function, no repair messages are shown (#763).",NA
tibble,1,82,82,FALSE,"Remove superseded signal for `as_tibble.list()`, because `as_tibble_row()` only works for size 1.",NA
tibble,1,83,83,FALSE,`as_tibble(validate = )` now always triggers a deprecation warning.,NA
tibble,1,84,84,FALSE,"Subsetting and subassignment of rows with one-column matrices work again, with a deprecation warning (#760).",NA
tibble,1,85,85,FALSE,Attempts to update a tibble row with an atomic vector give a clearer error message. Recycling message for subassignment appears only if target size is != 1.,NA
tibble,1,86,86,FALSE,"Tweak title of ""Invariants"" vignette.",NA
tibble,1,87,87,FALSE,"Subset assignment (""subassignment"") and also subsetting has become stricter. Symptoms:",NA
tibble,2,87,88,FALSE,* Error: No common type for ...,"Subset assignment (""subassignment"") and also subsetting has become stricter. Symptoms:"
tibble,2,87,89,FALSE,* Error: Assigned data `...` must be compatible with ...,"Subset assignment (""subassignment"") and also subsetting has become stricter. Symptoms:"
tibble,2,87,90,FALSE,"* `i` must have one dimension, not 2","Subset assignment (""subassignment"") and also subsetting has become stricter. Symptoms:"
tibble,2,87,91,FALSE,* Error: Lossy cast from ... to ...,"Subset assignment (""subassignment"") and also subsetting has become stricter. Symptoms:"
tibble,1,91,91,FALSE,"The ""invariants"" article at https://tibble.tidyverse.org/dev/articles/invariants.html describes the invariants that the operations follow in tibble, and the most important differences to data frames. We tried to make subsetting and subassignment as safe as possible, so that errors are caught early on, while introducing as little friction as possible.",NA
tibble,1,92,92,FALSE,List classes are no longer automatically treated as vectors. Symptoms:,NA
tibble,2,92,93,FALSE,* Error: All columns in a tibble must be vectors,List classes are no longer automatically treated as vectors. Symptoms:
tibble,2,92,94,FALSE,"* Error: Expected a vector, not a `...` object",List classes are no longer automatically treated as vectors. Symptoms:
tibble,1,94,94,FALSE,"If you implement a class that wraps a list as S3 vector, you need to include `""list""` in the class:",NA
tibble,1,94,95,TRUE,"```
structure(x, class = c(""your_s3_class"", ""list""))
```",NA
tibble,1,94,95,FALSE,"Alternatively, implement a `vec_proxy()` method as described in https://vctrs.r-lib.org/reference/vec_data.html, or construct your class with `list_of()`.",NA
tibble,1,95,96,FALSE,"Added experimental support for inner names for all columns, of the form `tibble(a = c(b = 1))`. Inner names are no longer stripped when creating a tibble. They are maintained for slicing operations but not yet updated when assigning with a row subscript. This is a change that may break existing comparison tests that don't expect names in columns (#630). Symptoms:",NA
tibble,2,95,97,FALSE,"* ""names for target but not for current"" when comparing","Added experimental support for inner names for all columns, of the form `tibble(a = c(b = 1))`. Inner names are no longer stripped when creating a tibble. They are maintained for slicing operations but not yet updated when assigning with a row subscript. This is a change that may break existing comparison tests that don't expect names in columns (#630). Symptoms:"
tibble,1,97,98,FALSE,"`tibble()` now splices anonymous data frames, `tibble(tibble(a = 1), b = a)` is equivalent to `tibble(a = 1, b = a)`. This means that `tibble(trees)` now has three columns, use `tibble(trees = trees)` if the intention is to create a packed data frame (#581).",NA
tibble,1,98,99,FALSE,"The `name-repair` help topic is gone, refer to `?vctrs::vec_as_names` instead.",NA
tibble,1,99,100,FALSE,`expression()` columns are converted to lists as a workaround for lacking support in vctrs (#657).,NA
tibble,1,100,101,FALSE,"`tribble()` is now stricter when combining values. All values in a column must be compatible, otherwise an error occurs (#204). The criteria for wrapping in a list column are now based on vctrs principles: non-vectors or vectors with `vctrs::vec_size()` unequal 1 are wrapped in lists.",NA
tibble,1,101,102,FALSE,"`$` warns unconditionally if column not found, `[[` doesn't warn.",NA
tibble,1,102,103,FALSE,"`add_row()` now uses `vctrs::vec_rbind()` under the hood, this means that all columns are combined with `vctrs::vec_c()`. In particular, factor columns will be converted to character if one of the columns is a character column.",NA
tibble,1,103,104,FALSE,Soft-deprecate `subclass` argument to `new_tibble()`.,NA
tibble,1,104,105,FALSE,Soft-deprecate `as_tibble()` without arguments (#683).,NA
tibble,1,105,106,FALSE,"Preparing to move `glimpse()` and `tbl_sum()` to the pillar package. If your package implements these methods, please import the generics from pillar as soon as they become available there.",NA
tibble,1,106,107,FALSE,"Internals now make heavy use of the vctrs package, following most of the invariants defined there. Name repair is the responsibility of vctrs now (#464).",NA
tibble,1,107,108,FALSE,"All errors emitted directly by the package inherit from the `""tibble_error""` and `""rlang_error""` classes. In some cases, `""vctrs_error""` errors may be passed through. The exact subclass is subject to change. Example: `tibble(a = quote(b))` raises an error that inherits from `""tibble_error_column_must_be_vector""`, `""tibble_error""` and `""rlang_error""`, and from `""error""` and `""condition""` like all errors. Do not rely on the wording of `""tibble_error_column_must_be_vector""`, this is likely to change. Use the following pattern to catch errors emitted by tibble:",NA
tibble,1,107,109,TRUE,"```
tryCatch(
  your_code(),
  tibble_error = function(cnd) {
  }
)
```",NA
tibble,1,108,110,FALSE,"New `tibble_row()` constructs tibbles that have exactly one row, or fails. Non-vector objects are automatically wrapped in a list, vectors (including lists) must have length one (#205).",NA
tibble,1,109,111,FALSE,"New `as_tibble_row()` and `as_tibble_col()` convert a bare vector to a one-row or one-column tibble, respectively. `as_tibble_col()` also works for non-bare vectors. Using `as_tibble()` for bare vectors is superseded (#447).",NA
tibble,1,110,112,FALSE,"`as_tibble.data.frame()` uses implicit row names if asked to create a column from row names. This allows lossless direct conversion of matrices with row names to tibbles (#567, @stufield).",NA
tibble,1,111,113,FALSE,Implement `str.tbl_df()` (#480).,NA
tibble,1,112,114,FALSE,"`tribble()` now returns columns with `""unspecified""` type for 0-row tibbles.",NA
tibble,1,113,115,FALSE,`add_row()` and `add_column()` now restore attributes to avoid errors when appending to sf objects or other tibble subclasses (#662).,NA
tibble,1,114,116,FALSE,"`add_column()` gains `.name_repair` argument. If not given, `.data` must have unique columns, with a deprecation message.",NA
tibble,1,115,117,FALSE,"Allow `POSIXlt` columns, they are now better supported by dplyr and other tools thanks to vctrs (#626).",NA
tibble,1,116,118,FALSE,"`tibble()` ignores NULL arguments, named or unnamed (#580).",NA
tibble,1,117,119,FALSE,"`view()` works for remote data sources by applying the same strategy as `print()` and `glimpse()`. The maximum number of rows in this case can be specified using the new `n` argument, by default it is taken from the new `""tibble.view_max""` option (#695).",NA
tibble,1,118,120,FALSE,Formatting dimensions never uses scientific notation.,NA
tibble,1,119,121,FALSE,"`glimpse()` uses ""Rows"" and ""Columns"" instead of ""Variables"" and ""Observations"", because we're not sure if the data is tidy here (#614).",NA
tibble,1,120,122,FALSE,"`view()` now uses the created (or passed) title argument (#610, @xvrdm).",NA
tibble,1,121,123,FALSE,Construction and subsetting of large data frames is faster now,NA
tibble,1,122,124,FALSE,Import lifecycle package (#669).,NA
tibble,1,123,125,FALSE,"`new_tibble()` removes redundant subclasses from the `""class""` attribute.",NA
tibble,1,124,126,FALSE,"Using classed conditions. All classes start with `""tibble_error_""` and also contain `""tibble_error""` (#659).",NA
tibble,1,125,127,FALSE,The magrittr pipe `%>%` is reexported.,NA
tibble,1,126,128,FALSE,"Fix compatibility with R 3.5 and earlier, regression introduced in",NA
tibble,1,127,129,FALSE,Relax version requirements.,NA
tibble,1,128,130,FALSE,Fix test failing after pillar upgrade.,NA
tibble,1,129,131,FALSE,"Three dots are used even for `""unique""` name repair (#566).",NA
tibble,1,130,132,FALSE,"`add_row()`, `add_case()` and `add_column()` now signal a warning once per session if the input is not a data frame (#575).",NA
tibble,1,131,133,FALSE,Fix `view()` for the case when an object named `x` exists in the global environment (#579).,NA
tibble,1,132,134,FALSE,"tibble names can again be set to `NULL` within RStudio, as some R routines within RStudio relied on this behaviour (#563, @kevinushey).",NA
tibble,1,133,135,FALSE,"`as_tibble.matrix(validate = TRUE)` works again, with a lifecycle warning (#558).",NA
tibble,1,134,136,FALSE,"Replace `new_list_along()` by `rep_along()` to support rlang 0.3.1 (#557, @lionel-).",NA
tibble,1,135,137,FALSE,"All optional arguments have moved past the ellipsis, and must be specified as named arguments. This affects mostly the `n` argument to `as_tibble.table()`, passing `n` unnamed still works (with a warning).",NA
tibble,1,136,138,FALSE,"`new_tibble()` has been optimized for performance, the function no longer strips dimensions from 1d arrays and no longer checks correctness of names or column lengths. (It still checks if the object is named, except for zero-length input.) Use the new `validate_tibble()` if you need these checks (#471).",NA
tibble,1,137,139,FALSE,"The `nrow` argument to `new_tibble()` is now mandatory. The `class` argument replaces the now deprecated `subclass` argument, the latter will be supported quietly for some time (#518).",NA
tibble,1,138,140,FALSE,"Setting names on a tibble via `names(df) <- ...` now also requires minimal names, otherwise a warning is issued once per session (#466).",NA
tibble,1,139,141,FALSE,"In `as_tibble()`, checking names is also enabled by default, even for tibbles, matrices and other matrix-like objects: names must exist, `NA` names are not allowed. Coercing a matrix without column names will trigger a warning once per session. (This corresponds to the `""minimal""` checks described below.).",NA
tibble,1,140,142,FALSE,"The `validate` argument to `as_tibble()` has been deprecated, see below for alternatives. (The `as_tibble.tbl_df()` method has been removed, the `as_tibble.data.frame()` method will be used for tibbles.)",NA
tibble,1,141,143,FALSE,"`as_tibble()` always checks that all columns are 1D or 2D vectors and not of type `POSIXlt`, even with `validate = FALSE` (which is now deprecated).",NA
tibble,1,142,144,FALSE,"Calling `as_tibble()` on a vector now warns once per session. Use `enframe(name = NULL)` for converting a vector to a one-column tibble, or `enframe()` for converting a named vector to a two-column tibble.",NA
tibble,1,143,145,FALSE,"`data_frame()` and `frame_data()` are soft-deprecated, please use `tibble()` or `tribble()` (#111).",NA
tibble,1,144,146,FALSE,"`tibble_()`, `data_frame_()`, and `lst_()` are soft-deprecated. Please use `tibble()` or `lst()` (#111, #509).",NA
tibble,1,145,147,FALSE,"`as.tibble()` and `as_data_frame()` are officially deprecated and not generic anymore, please use/implement `as_tibble()` (#111).",NA
tibble,1,146,148,FALSE,`as_tibble.data.frame()` (and also `as_tibble.matrix()`) strip row names by default. Code that relies on tibbles keeping row names now will see:,NA
tibble,2,146,149,FALSE,"* a different result when calling `rownames()` or `row.names()`,",`as_tibble.data.frame()` (and also `as_tibble.matrix()`) strip row names by default. Code that relies on tibbles keeping row names now will see:
tibble,2,146,150,FALSE,"* rows full of `NA` values when subsetting rows with with a character vector, e.g. `as_tibble(mtcars)[""Mazda RX4"", ]`.",`as_tibble.data.frame()` (and also `as_tibble.matrix()`) strip row names by default. Code that relies on tibbles keeping row names now will see:
tibble,1,148,150,FALSE,"Call `pkgconfig::set_config(""tibble::rownames"", NA)` to revert to the old behavior of keeping row names. Packages that import *tibble* can call `set_config()` in their `.onLoad()` function (#114).",NA
tibble,1,149,151,FALSE,"`as_tibble()` drops extra classes, in particular `as_tibble.grouped_df()` now removes grouping (#535).",NA
tibble,1,150,152,FALSE,"`column_to_rownames()` now always coerces to a data frame, because row names are no longer supported in tibbles (#114).",NA
tibble,1,151,153,FALSE,"In all `*_rownames()` functions, the first argument has been renamed to `.data` for consistency (#412).",NA
tibble,1,152,154,FALSE,"Subsetting one row with `[..., , drop = TRUE]` returns a tibble (#442).",NA
tibble,1,153,155,FALSE,"The `print.tbl_df()` method has been removed, the `print.tbl()` method handles printing (#519).",NA
tibble,1,154,156,FALSE,`tibble()` supports columns that are matrices or data frames (#416).,NA
tibble,1,155,157,FALSE,"The new `.rows` argument to `tibble()` and `as_tibble()` allows specifying the expected number of rows explicitly, even if it's evident from the data. This allows writing more defensive code.",NA
tibble,1,156,158,FALSE,"Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`. It takes the following values:",NA
tibble,2,156,159,FALSE,"* `""minimal""`: No name repair or checks, beyond basic existence.","Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`. It takes the following values:"
tibble,2,156,160,FALSE,"* `""unique""`: Make sure names are unique and not empty.","Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`. It takes the following values:"
tibble,2,156,161,FALSE,"* `""check_unique""`: (default value), no name repair, but check they are `unique`.","Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`. It takes the following values:"
tibble,2,156,162,FALSE,"* `""universal""`: Make the names `unique` and syntactic.","Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`. It takes the following values:"
tibble,2,156,163,FALSE,"* a function: apply custom name repair (e.g., `.name_repair = make.names` or `.name_repair = ~make.names(., unique = TRUE)` for names in the style of base R).","Column name repair has more direct support, via the new `.name_repair` argument to `tibble()` and `as_tibble()`. It takes the following values:"
tibble,1,161,163,FALSE,"The `validate` argument of `as_tibble()` is deprecated but supported (emits a message once per session). Use `.name_repair = ""minimal""` instead of `validate = FALSE`, and `.name_repair = ""check_unique""` instead of `validate = TRUE`. If you need to support older versions of tibble, pass both `.name_repair` and `validate` arguments in a consistent way, no message will be emitted in this case (#469, @jennybc).",NA
tibble,1,162,164,FALSE,"Row name handling is stricter. Row names are never (and never were) supported in `tibble()` and `new_tibble()`, and are now stripped by default in `as_tibble()`. The `rownames` argument to `as_tibble()` supports:",NA
tibble,2,162,165,FALSE,"* `NULL`: remove row names (default),","Row name handling is stricter. Row names are never (and never were) supported in `tibble()` and `new_tibble()`, and are now stripped by default in `as_tibble()`. The `rownames` argument to `as_tibble()` supports:"
tibble,2,162,166,FALSE,"* `NA`: keep row names,","Row name handling is stricter. Row names are never (and never were) supported in `tibble()` and `new_tibble()`, and are now stripped by default in `as_tibble()`. The `rownames` argument to `as_tibble()` supports:"
tibble,2,162,167,FALSE,"* A string: the name of the new column that will contain the existing row names, which are no longer present in the result.","Row name handling is stricter. Row names are never (and never were) supported in `tibble()` and `new_tibble()`, and are now stripped by default in `as_tibble()`. The `rownames` argument to `as_tibble()` supports:"
tibble,1,165,167,FALSE,"The old default can be restored by calling `pkgconfig::set_config(""tibble::rownames"", NA)`, this also works for packages that import *tibble*.",NA
tibble,1,166,168,FALSE,"`new_tibble()` and `as_tibble()` now also strip the `""dim""` attribute from columns that are one-dimensional arrays. (`tibble()` already did this before.)",NA
tibble,1,167,169,FALSE,"Internally, all `as_tibble()` implementation forward all extra arguments and `...` to `as_tibble.list()` where they are handled. This means that the common `.rows` and `.name_repair` can be used for all inputs. We suggest that your implementations of this method do the same.",NA
tibble,1,168,170,FALSE,`enframe()` (with `name = NULL`) and `deframe()` now support one-column tibbles (#449).,NA
tibble,1,169,171,FALSE,"Improved S4 support by adding `exportClass(tbl_df)` to `NAMESPACE` (#436, @jeffreyhanson and @javierfajnolla).",NA
tibble,1,170,172,FALSE,New `validate_tibble()` checks a tibble for internal consistency (#471).,NA
tibble,1,171,173,FALSE,"Bring error message for invalid column type in line with allowed matrix/df cols (#465, @maxheld83).",NA
tibble,1,172,174,FALSE,Added experimental `view()` function that always returns its input,NA
tibble,1,173,175,FALSE,The `set_tidy_names()` and `tidy_names()` helpers the list of new names using a bullet list with at most six items (#406).,NA
tibble,1,174,176,FALSE,"A one-character ellipse (`cli::symbol$ellipsis`) is printed instead of `""...""` where available, this affects `glimpse()` output and truncated lists (#403).",NA
tibble,1,175,177,FALSE,Column names and types are now formatted identically with `glimpse()` and `print.tbl_df()`.,NA
tibble,1,176,178,FALSE,`tidy_names()` quotes variable names when reporting on repair (#407).,NA
tibble,1,177,179,FALSE,All error messages now follow the tidyverse style guide (#223).,NA
tibble,1,178,180,FALSE,"`as_tibble()` prints an informative error message when using the `rownames` argument and the input data frame or matrix does not have row names (#388, @anhqle).",NA
tibble,1,179,181,FALSE,"`column_to_rownames()` uses the real variable name in its error message (#399, @alexwhan).",NA
tibble,1,180,182,FALSE,"Lazy tibbles with exactly 10 rows no longer show ""...with more rows"" (#371).",NA
tibble,1,181,183,FALSE,"`glimpse()` shows information obtained from `tbl_sum()`, e.g. grouping information for `grouped_df` from dplyr (#550).",NA
tibble,1,182,184,FALSE,"`glimpse()` takes coloring into account when computing column width, the output is no longer truncated prematurely when coloring is enabled.",NA
tibble,1,183,185,FALSE,"`glimpse()` disambiguates outputs for factors if the levels contain commas (#384, @anhqle).",NA
tibble,1,184,186,FALSE,`print.tbl_df()` with a negative value for `n` behaves as if `n` was omitted (#371).,NA
tibble,1,185,187,FALSE,Fixed output for extra column names that contain spaces.,NA
tibble,1,186,188,FALSE,"Skip dplyr in tests if unavailable (#420, @QuLogic).",NA
tibble,1,187,189,FALSE,"Skip mockr in tests if unavailable (#454, @Enchufa2).",NA
tibble,1,188,190,FALSE,Use `fansi::strwrap_ctl()` instead of own string wrapping routine.,NA
tibble,1,189,191,FALSE,`tibble()` uses recycled values during construction but unrecycled values for validation.,NA
tibble,1,190,192,FALSE,`tibble()` is now faster for very wide tibbles.,NA
tibble,1,191,193,FALSE,Subsetting with the `[` operator is faster (#544).,NA
tibble,1,192,194,FALSE,"Avoid use of `stop()` in examples if packages are not installed (#453, @Enchufa2).",NA
tibble,1,193,195,FALSE,"Fix `as_tibble()` examples by using correct argument names in `requireNamespace()` call (#424, @michaelweylandt).",NA
tibble,1,194,196,FALSE,"`as_tibble()` checks column length only once (#365, @anhqle).",NA
tibble,1,195,197,FALSE,"Using `rlang::list2()` (#391, @lionel-).",NA
tibble,1,198,200,FALSE,"`tbl[1, , drop = TRUE]` now behaves identically to data frames",NA
tibble,1,199,201,FALSE,Fix error message when accessing columns using a logical index,NA
tibble,1,211,213,FALSE,"`` `[.tbl_df`() `` supports `drop = TRUE` and omits the warning if `j` is passed. The calls `df[i, j, drop = TRUE]` and `df[j, drop = TRUE]` are now compatible with data frames again",NA
tibble,1,212,214,FALSE,Improved compatibility with remote data sources for `glimpse()`,NA
tibble,1,213,215,FALSE,"Logical indexes are supported, a warning is raised if the length",NA
tibble,1,215,217,FALSE,"Prevent `add_column()` from dropping classes and attributes by removing the use of `cbind()`. Additionally this ensures that `add_column()` can be used with grouped data frames (#303,",NA
tibble,1,216,218,FALSE,`add_column()` to an empty zero-row tibble with a variable of,NA
tibble,1,217,219,FALSE,"Reexporting `has_name()` from rlang, instead of forwarding, to avoid",NA
tibble,1,220,222,FALSE,"Values of length 1 in a `tibble()` call are recycled prior to evaluating subsequent arguments, improving consistency with",NA
tibble,1,221,223,FALSE,Recycling of values of length 1 in a `tibble()` call maintains their,NA
tibble,1,222,224,FALSE,`add_row()` now always preserves the column data types of the input,NA
tibble,1,223,225,FALSE,"`lst()` now again handles duplicate names, the value defined last is",NA
tibble,1,224,226,FALSE,Adding columns to zero-row data frames now also works when mixing,NA
tibble,1,225,227,FALSE,"The `validate` argument is now also supported in `as_tibble.tbl_df()`, with default to `FALSE` (#278). It must be",NA
tibble,1,226,228,FALSE,"`format_v()` now always surrounds lists with `[]` brackets, even if their length is one. This affects `glimpse()` output for list",NA
tibble,1,229,231,FALSE,`tibble()` gives a consistent error message in the case of duplicate,NA
tibble,1,230,232,FALSE,"Added `format()` and `print()` methods for both `tbl` and `tbl_df` classes, to protect against malformed tibbles that inherit from `""tbl_df""` but not `""tbl""`, as created e.g. by `ungroup()` in dplyr",NA
tibble,1,231,233,FALSE,The column width for non-syntactic columns is computed correctly,NA
tibble,1,233,235,FALSE,"Fix error in `tidy_names(syntactic = TRUE, quiet = FALSE)` if not",NA
tibble,1,235,237,FALSE,Subsetting zero columns no longer returns wrong number of rows,NA
tibble,1,236,238,FALSE,"New `set_tidy_names()` and `tidy_names()`, a simpler version of",NA
tibble,1,237,239,FALSE,New `rowid_to_column()` that adds a `rowid` column as first column,NA
tibble,1,238,240,FALSE,"The `all.equal.tbl_df()` method has been removed, calling `all.equal()` now forwards to `base::all.equal.data.frame()`. To compare tibbles ignoring row and column order, please use",NA
tibble,1,239,241,FALSE,Printing now uses `x` again instead of the Unicode multiplication,NA
tibble,1,240,242,FALSE,String values are now quoted when printing if they contain,NA
tibble,1,241,243,FALSE,"The `print()`, `format()`, and `tbl_sum()` methods are now implemented for class `""tbl""` and not for `""tbl_df""`. This allows subclasses to use tibble's formatting facilities. The formatting of the header can be tweaked by implementing `tbl_sum()` for the subclass, which is expected to return a named character vector. The `print.tbl_df()` method is still implemented for compatibility with",NA
tibble,1,242,244,FALSE,"Own printing routine, not relying on `print.data.frame()` anymore. Now providing `format.tbl_df()` and full support for Unicode",NA
tibble,1,244,246,FALSE,"Using `rlang` instead of `lazyeval` (#225, @lionel-), and `rlang`",NA
tibble,1,246,248,FALSE,Minor efficiency gains by replacing `any(is.na())` with `anyNA()`,NA
tibble,1,249,251,FALSE,Time series matrices (objects of class `mts` and `ts`) are now,NA
tibble,1,250,252,FALSE,"The `all_equal()` function (called by `all.equal.tbl_df()`) now forwards to `dplyr` and fails with a helpful message if not installed. Data frames with list columns cannot be compared anymore, and differences in the declared class (`data.frame` vs. `tbl_df`) are ignored. The `all.equal.tbl_df()` method gives a warning and forwards to `NextMethod()` if `dplyr` is not installed; call `all.equal(as.data.frame(...), ...)` to avoid the warning. This ensures consistent behavior of this function, regardless if `dplyr`",NA
tibble,1,252,254,FALSE,"Add `as.tibble()` as an alias to `as_tibble()` (#160,",NA
tibble,1,253,255,FALSE,"New `frame_matrix()`, similar to `frame_data()` but for matrices",NA
tibble,1,256,258,FALSE,"Keep column classes when adding row to empty tibble (#171, #177,",NA
tibble,1,257,259,FALSE,Singular and plural variants for error messages that mention a list,NA
tibble,1,258,260,FALSE,"`add_column()` can add columns of length 1 (#162, #164,",NA
tibble,1,259,261,FALSE,An attempt to read or update a missing column now throws a clearer,NA
tibble,1,260,262,FALSE,An attempt to call `add_row()` for a grouped data frame results in a,NA
tibble,1,261,263,FALSE,Render Unicode multiplication sign as `x` if it cannot be,NA
tibble,1,263,265,FALSE,"`glimpse()` now uses `type_sum()` also for S3 objects (#185, #186,",NA
tibble,1,264,266,FALSE,"The `max.print` option is ignored when printing a tibble (#194,",NA
tibble,1,269,271,FALSE,The `tibble.width` option is used for `glimpse()` only if it is,NA
tibble,1,270,272,FALSE,New `as_tibble.poly()` to support conversion of a `poly` object to a,NA
tibble,1,271,273,FALSE,`add_row()` now correctly handles existing columns of type `list`,NA
tibble,1,272,274,FALSE,`all.equal()` doesn't throw an error anymore if one of the columns,NA
tibble,1,274,276,FALSE,`print.tbl_df()` gains `n_extra` method and will have the same,NA
tibble,1,275,277,FALSE,`add_row()` and `add_column()` gain `.before` and `.after` arguments which indicate the row (by number) or column (by number or name) before or after which the new data are inserted. Updated or added,NA
tibble,1,276,278,FALSE,"Rename `frame_data()` to `tribble()`, stands for ""transposed",NA
tibble,1,277,279,FALSE,"`add_row()` now can add multiple rows, with recycling (#142,",NA
tibble,1,278,280,FALSE,Use multiply character `×` instead of `x` when printing dimensions,NA
tibble,1,280,282,FALSE,"Use `dttm` instead of `time` for `POSIXt` values (#133), which is",NA
tibble,1,281,283,FALSE,Better output for 0-row results when total number of rows is unknown,NA
tibble,1,282,284,FALSE,New object summary vignette that shows which methods to define for,NA
tibble,1,283,285,FALSE,"Added more examples for `print.tbl_df()`, now using data from `nycflights13` instead of `Lahman` (#121), with guidance to install",NA
tibble,1,287,289,FALSE,"`$` returns `NULL` if column not found, without partial matching. A",NA
tibble,1,289,291,FALSE,"Reworked output: More concise summary (begins with hash `#` and contains more text (#95)), removed empty line, showing number of hidden rows and columns (#51). The trailing metadata also begins with hash `#` (#101). Presence of row names is indicated by a star",NA
tibble,1,290,292,FALSE,"Format `NA` values in character columns as `<NA>`, like",NA
tibble,1,292,294,FALSE,"Computation of column width properly handles wide (e.g., Chinese)",NA
tibble,1,293,295,FALSE,`glimpse()` shows nesting structure for lists and uses angle,NA
tibble,1,294,296,FALSE,"Tibbles with `POSIXlt` columns can be printed now, the text `<POSIXlt>` is shown as placeholder to encourage usage of `POSIXct`",NA
tibble,1,296,298,FALSE,"Strict checking of integer and logical column indexes. For integers, passing a non-integer index or an out-of-bounds index raises an error. For logicals, only vectors of length 1 or `ncol` are supported. Passing a matrix or an array now raises an error in any",NA
tibble,1,298,300,FALSE,Consistently surround variable names with single quotes in error,NA
tibble,1,299,301,FALSE,"Use ""Unknown column 'x'"" as error message if column not found, like",NA
tibble,1,301,303,FALSE,The `.Dim` attribute is silently stripped from columns that are 1d,NA
tibble,1,302,304,FALSE,Converting a tibble without row names to a regular data frame does,NA
tibble,1,303,305,FALSE,"`as_tibble.data.frame()` preserves attributes, and uses `as_tibble.list()` to calling overriden methods which may lead to",NA
tibble,1,305,307,FALSE,Prefer `tibble()` and `as_tibble()` over `data_frame()` and,NA
tibble,1,307,309,FALSE,"New `enframe()` that converts vectors to two-column tibbles (#31,",NA
tibble,1,308,310,FALSE,"`obj_sum()` and `type_sum()` show `""tibble""` instead of `""tbl_df""`",NA
tibble,1,309,311,FALSE,`as_tibble.data.frame()` gains `validate` argument (as in,NA
tibble,1,319,321,FALSE,Provide default implementation for `tbl_sum.tbl_sql()` and `tbl_sum.tbl_grouped_df()` to allow `dplyr` release before a,NA
tibble,1,325,327,FALSE,Initial CRAN release,NA
tibble,1,326,328,FALSE,Extracted from `dplyr` 0.4.3,NA
tibble,1,327,329,FALSE,Exported functions:,NA
tibble,2,327,330,FALSE,* `tbl_df()`,Exported functions:
tibble,2,327,331,FALSE,* `as_data_frame()`,Exported functions:
tibble,2,327,332,FALSE,"* `data_frame()`, `data_frame_()`",Exported functions:
tibble,2,327,333,FALSE,"* `frame_data()`, `tibble()`",Exported functions:
tibble,2,327,334,FALSE,* `glimpse()`,Exported functions:
tibble,2,327,335,FALSE,"* `trunc_mat()`, `knit_print.trunc_mat()`",Exported functions:
tibble,2,327,336,FALSE,* `type_sum()`,Exported functions:
tibble,2,327,337,FALSE,"* New `lst()` and `lst_()` create lists in the same way that `data_frame()` and `data_frame_()` create data frames (hadley/dplyr#1290). `lst(NULL)` doesn't raise an error (#17, @jennybc), but always uses deparsed expression as name (even for `NULL`).",Exported functions:
tibble,2,327,338,FALSE,* New `add_row()` makes it easy to add a new row to data frame (hadley/dplyr#1021).,Exported functions:
tibble,2,327,339,FALSE,"* New `rownames_to_column()` and `column_to_rownames()` (#11, @zhilongjia).",Exported functions:
tibble,2,327,340,FALSE,* New `has_rownames()` and `remove_rownames()` (#44).,Exported functions:
tibble,2,327,341,FALSE,"* New `repair_names()` fixes missing and duplicate names (#10, #15, @r2evans).",Exported functions:
tibble,2,327,342,FALSE,* New `is_vector_s3()`.,Exported functions:
tibble,1,341,343,FALSE,Features,NA
tibble,2,341,344,FALSE,"* New `as_data_frame.table()` with argument `n` to control name of count column (#22, #23).",Features
tibble,2,341,345,FALSE,"* Use `tibble` prefix for options (#13, #36).",Features
tibble,2,341,346,FALSE,"* `glimpse()` now (invisibly) returns its argument (hadley/dplyr#1570). It is now a generic, the default method dispatches to `str()` (hadley/dplyr#1325). The default width is obtained from the `tibble.width` option (#35, #56).",Features
tibble,2,341,347,FALSE,"* `as_data_frame()` is now an S3 generic with methods for lists (the old `as_data_frame()`), data frames (trivial), matrices (with efficient C++ implementation) (hadley/dplyr#876), and `NULL` (returns a 0-row 0-column data frame) (#17, @jennybc).",Features
tibble,2,341,348,FALSE,* Non-scalar input to `frame_data()` and `tibble()` (including lists) creates list-valued columns (#7). These functions return 0-row but n-col data frame if no data.,Features
tibble,1,347,349,FALSE,Bug fixes,NA
tibble,2,347,350,FALSE,"* `frame_data()` properly constructs rectangular tables (hadley/dplyr#1377, @kevinushey).",Bug fixes
tibble,1,349,351,FALSE,Minor modifications,NA
tibble,2,349,352,FALSE,"* Uses `setOldClass(c(""tbl_df"", ""tbl"", ""data.frame""))` to help with S4 (hadley/dplyr#969).",Minor modifications
tibble,2,349,353,FALSE,* `tbl_df()` automatically generates column names (hadley/dplyr#1606).,Minor modifications
tibble,2,349,354,FALSE,"* `tbl_df`s gain `$` and `[[` methods that are \~5x faster than the defaults, never do partial matching (hadley/dplyr#1504), and throw an error if the variable does not exist. `[[.tbl_df()` falls back to regular subsetting when used with anything other than a single string (#29). `base::getElement()` now works with tibbles (#9).",Minor modifications
tibble,2,349,355,FALSE,"* `all_equal()` allows to compare data frames ignoring row and column order, and optionally ignoring minor differences in type (e.g. int vs. double) (hadley/dplyr#821). Used by `all.equal()` for tibbles. (This package contains a pure R implementation of `all_equal()`, the `dplyr` code has identical behavior but is written in C++ and thus faster.)",Minor modifications
tibble,2,349,356,FALSE,"* The internals of `data_frame()` and `as_data_frame()` have been aligned, so `as_data_frame()` will now automatically recycle length-1 vectors. Both functions give more informative error messages if you are attempting to create an invalid data frame. You can no longer create a data frame with duplicated names (hadley/dplyr#820). Both functions now check that you don't have any `POSIXlt` columns, and tell you to use `POSIXct` if you do (hadley/dplyr#813). `data_frame(NULL)` raises error ""must be a 1d atomic vector or list"".",Minor modifications
tibble,2,349,357,FALSE,* `trunc_mat()` and `print.tbl_df()` are considerably faster if you have very wide data frames. They will now also only list the first 100 additional variables not already on screen - control this with the new `n_extra` parameter to `print()` (hadley/dplyr#1161). The type of list columns is printed correctly (hadley/dplyr#1379). The `width` argument is used also for 0-row or 0-column data frames (#18).,Minor modifications
tibble,2,349,358,FALSE,"* When used in list-columns, S4 objects only print the class name rather than the full class hierarchy (#33).",Minor modifications
tibble,2,349,359,FALSE,"* Add test that `[.tbl_df()` does not change class (#41, @jennybc). Improve `[.tbl_df()` error message.",Minor modifications
tibble,1,358,360,FALSE,Documentation,NA
tibble,2,358,361,FALSE,"* Update README, with edits (#52, @bhive01) and enhancements (#54, @jennybc).",Documentation
tibble,2,358,362,FALSE,"* `vignette(""tibble"")` describes the difference between tbl_dfs and regular data frames (hadley/dplyr#1468).",Documentation
tibble,1,361,363,FALSE,Code quality,NA
tibble,2,361,364,FALSE,"* Test using new-style Travis-CI and AppVeyor. Full test coverage (#24, #53). Regression tests load known output from file (#49).",Code quality
tibble,2,361,365,FALSE,"* Renamed `obj_type()` to `obj_sum()`, improvements, better integration with `type_sum()`.",Code quality
tibble,2,361,366,FALSE,* Internal cleanup.,Code quality
tidyr,1,1,1,FALSE,`pivot_longer()` now throws a slightly better error message when `values_ptypes` or `names_ptypes` is provided and the coercion can't be made (#1364).,NA
tidyr,1,2,2,FALSE,"`uncount()` is now generic so implementations can be provided for objects other than data frames (@mgirlich, #1358).",NA
tidyr,1,3,3,FALSE,"`uncount()` gained the `...` argument. It comes between the required and the optional arguments (@mgirlich, #1358).",NA
tidyr,1,4,4,FALSE,`pivot_longer()` gained a new `cols_vary` argument for controlling the ordering of the output rows relative to their original row number (#1312).,NA
tidyr,1,5,5,FALSE,"`pivot_longer()` is now more memory efficient due to the usage of `vctrs::vec_interleave()` (#1310, @mgirlich).",NA
tidyr,1,6,6,FALSE,rlang \>=1.0.2 and vctrs \>=0.4.1 are now required (#1344).,NA
tidyr,1,7,7,FALSE,Removed dependency on ellipsis in favor of equivalent functions in rlang (#1314).,NA
tidyr,1,8,8,FALSE,"`fill()` now works correctly when there is a column named `.direction` in `data` (#1319, @tjmahr).",NA
tidyr,1,9,9,FALSE,Added documentation to the `replace` argument of `replace_na()` to mention that it is always cast to the type of `data` (#1317).,NA
tidyr,1,10,10,FALSE,Improved the error message returned by `pivot_wider()` when a column selected by `names_from` or `values_from` is also selected by `id_cols` (#1318).,NA
tidyr,1,12,12,FALSE,"`complete()` and `expand()` no longer allow you to complete or expand on a grouping column. This was never well-defined since completion/expansion on a grouped data frame happens ""within"" each group and otherwise has the potential to produce erroneous results (#1299).",NA
tidyr,1,13,13,FALSE,"`replace_na()` no longer allows the type of `data` to change when the replacement is applied. `replace` will now always be cast to the type of `data` before the replacement is made. For example, this means that using a replacement value of `1.5` on an integer column is no longer allowed. Similarly, replacing missing values in a list-column must now be done with `list(""foo"")` rather than just `""foo""`.",NA
tidyr,1,14,14,FALSE,`pivot_wider()` gains new `names_expand` and `id_expand` arguments for turning implicit missing factor levels and variable combinations into explicit ones. This is similar to the `drop` argument from `spread()` (#770).,NA
tidyr,1,15,15,FALSE,`pivot_wider()` gains a new `names_vary` argument for controlling the ordering when combining `names_from` values with `values_from` column names (#839).,NA
tidyr,1,16,16,FALSE,"`pivot_wider()` gains a new `unused_fn` argument for controlling how to summarize unused columns that aren't involved in the pivoting process (#990, thanks to @mgirlich for an initial implementation).",NA
tidyr,1,17,17,FALSE,"`pivot_longer()`'s `names_transform` and `values_transform` arguments now accept a single function which will be applied to all of the columns (#1284, thanks to @smingerson for an initial implementation).",NA
tidyr,1,18,18,FALSE,`pivot_longer()`'s `names_ptypes` and `values_ptypes` arguments now accept a single empty ptype which will be applied to all of the columns (#1284).,NA
tidyr,1,19,19,FALSE,`unnest()` and `unchop()`'s `ptype` argument now accepts a single empty ptype which will be applied to all `cols` (#1284).,NA
tidyr,1,20,20,FALSE,`unpack()` now silently skips over any non-data frame columns specified by `cols`. This matches the existing behavior of `unchop()` and `unnest()` (#1153).,NA
tidyr,1,21,21,FALSE,`unnest_wider()` and `unnest_longer()` can now unnest multiple columns at once (#740).,NA
tidyr,1,22,22,FALSE,"`unnest_longer()`'s `indices_to` and `values_to` arguments now accept a glue specification, which is useful when unnesting multiple columns.",NA
tidyr,1,23,23,FALSE,"For `hoist()`, `unnest_longer()`, and `unnest_wider()`, if a `ptype` is supplied, but that column can't be simplified, the result will be a list-of column where each element has type `ptype` (#998).",NA
tidyr,1,24,24,FALSE,"`unnest_wider()` gains a new `strict` argument which controls whether or not strict vctrs typing rules should be applied. It defaults to `FALSE` for backwards compatibility, and because it is often more useful to be lax when unnesting JSON, which doesn't always map one-to-one with R's types (#1125).",NA
tidyr,1,25,25,FALSE,"`hoist()`, `unnest_longer()`, and `unnest_wider()`'s `simplify` argument now accepts a named list of `TRUE` or `FALSE` to control simplification on a per column basis (#995).",NA
tidyr,1,26,26,FALSE,"`hoist()`, `unnest_longer()`, and `unnest_wider()`'s `transform` argument now accepts a single function which will be applied to all components (#1284).",NA
tidyr,1,27,27,FALSE,"`hoist()`, `unnest_longer()`, and `unnest_wider()`'s `ptype` argument now accepts a single empty ptype which will be applied to all components (#1284).",NA
tidyr,1,28,28,FALSE,`complete()` gains a new `explicit` argument for limiting `fill` to only implicit missing values. This is useful if you don't want to fill in pre-existing missing values (#1270).,NA
tidyr,1,29,29,FALSE,"`complete()` gains a grouped data frame method. This generates a more correct completed data frame when groups are involved (#396, #966).",NA
tidyr,1,30,30,FALSE,"`drop_na()`, `replace_na()`, and `fill()` have been updated to utilize vctrs. This means that you can use these functions on a wider variety of column types, including lubridate's Period types (#1094), data frame columns, and the [rcrd](https://vctrs.r-lib.org/reference/new_rcrd.html) type from vctrs.",NA
tidyr,1,31,31,FALSE,`replace_na()` no longer replaces empty atomic elements in list-columns (like `integer(0)`). The only value that is replaced in a list-column is `NULL` (#1168).,NA
tidyr,1,32,32,FALSE,`drop_na()` no longer drops empty atomic elements from list-columns (like `integer(0)`). The only value that is dropped in a list-column is `NULL` (#1228).,NA
tidyr,1,33,33,FALSE,@mgirlich is now a tidyr author in recognition of his significant and sustained contributions.,NA
tidyr,1,34,34,FALSE,All lazyeval variants of tidyr verbs have been soft-deprecated. Expect them to move to the defunct stage in the next minor release of tidyr (#1294).,NA
tidyr,1,35,35,FALSE,`any_of()` and `all_of()` from tidyselect are now re-exported (#1217).,NA
tidyr,1,36,36,FALSE,dplyr \>= 1.0.0 is now required.,NA
tidyr,1,37,37,FALSE,`pivot_wider()` now gives better advice about how to identify duplicates when values are not uniquely identified (#1113).,NA
tidyr,1,38,38,FALSE,`pivot_wider()` now throws a more informative error when `values_fn` doesn't result in a single summary value (#1238).,NA
tidyr,1,39,39,FALSE,`pivot_wider()` and `pivot_longer()` now generate more informative errors related to name repair (#987).,NA
tidyr,1,40,40,FALSE,`pivot_wider()` now works correctly when `values_fill` is a data frame.,NA
tidyr,1,41,41,FALSE,`pivot_wider()` no longer accidentally retains `values_from` when pivoting a zero row data frame (#1249).,NA
tidyr,1,42,42,FALSE,`pivot_wider()` now correctly handles the case where an id column name collides with a value from `names_from` (#1107).,NA
tidyr,1,43,43,FALSE,"`pivot_wider()` and `pivot_longer()` now both check that the spec columns `.name` and `.value` are character vectors. Additionally, the `.name` column must be unique (#1107).",NA
tidyr,1,44,44,FALSE,"`pivot_wider()`'s `names_from` and `values_from` arguments are now required if their default values of `name` and `value` don't correspond to columns in `data`. Additionally, they must identify at least 1 column in `data` (#1240).",NA
tidyr,1,45,45,FALSE,`pivot_wider()`'s `values_fn` argument now correctly allows anonymous functions (#1114).,NA
tidyr,1,46,46,FALSE,"`pivot_wider_spec()` now works correctly with a 0-row data frame and a `spec` that doesn't identify any rows (#1250, #1252).",NA
tidyr,1,47,47,FALSE,`pivot_longer()`'s `names_ptypes` argument is now applied after `names_transform` for consistency with the rectangling functions (i.e. `hoist()`) (#1233).,NA
tidyr,1,48,48,FALSE,`check_pivot_spec()` is a new developer facing function for validating a pivot `spec` argument. This is only useful if you are extending `pivot_longer()` or `pivot_wider()` with new S3 methods (#1087).,NA
tidyr,1,49,49,FALSE,"The `nest()` generic now avoids computing on `.data`, making it more compatible with lazy tibbles (#1134).",NA
tidyr,1,50,50,FALSE,The `.names_sep` argument of the data.frame method for `nest()` is now actually used (#1174).,NA
tidyr,1,51,51,FALSE,`unnest()`'s `ptype` argument now works as expected (#1158).,NA
tidyr,1,52,52,FALSE,`unpack()` no longer drops empty columns specified through `cols` (#1191).,NA
tidyr,1,53,53,FALSE,`unpack()` now works correctly with data frame columns containing 1 row but 0 columns (#1189).,NA
tidyr,1,54,54,FALSE,`chop()` now works correctly with data frames with 0 rows (#1206).,NA
tidyr,1,55,55,FALSE,`chop()`'s `cols` argument is no longer optional. This matches the behavior of `cols` seen elsewhere in tidyr (#1205).,NA
tidyr,1,56,56,FALSE,`unchop()` now respects `ptype` when unnesting a non-list column (#1211).,NA
tidyr,1,57,57,FALSE,`hoist()` no longer accidentally removes elements that have,NA
tidyr,1,58,58,FALSE,"The grouped data frame methods for `complete()` and `expand()` now move the group columns to the front of the result (in addition to the columns you completed on or expanded, which were already moved to the front). This should make more intuitive sense, as you are completing or expanding ""within"" each group, so the group columns should be the first thing you see (#1289).",NA
tidyr,1,59,59,FALSE,`complete()` now applies `fill` even when no columns to complete are specified (#1272).,NA
tidyr,1,60,60,FALSE,"`expand()`, `crossing()`, and `nesting()` now correctly retain `NA` values of factors (#1275).",NA
tidyr,1,61,61,FALSE,"`expand_grid()`, `expand()`, `nesting()`, and `crossing()` now silently apply name repair to automatically named inputs. This avoids a number of issues resulting from duplicate truncated names (#1116, #1221, #1092, #1037, #992).",NA
tidyr,1,62,62,FALSE,"`expand_grid()`, `expand()`, `nesting()`, and `crossing()` now allow columns from unnamed data frames to be used in expressions after that data frame was specified, like `expand_grid(tibble(x = 1), y = x)`. This is more consistent with how `tibble()` behaves.",NA
tidyr,1,63,63,FALSE,"`expand_grid()`, `expand()`, `nesting()`, and `crossing()` now work correctly with data frames containing 0 columns but \>0 rows (#1189).",NA
tidyr,1,64,64,FALSE,"`expand_grid()`, `expand()`, `nesting()`, and `crossing()` now return a 1 row data frame when no inputs are supplied, which is more consistent with `prod() == 1L` and the idea that computations involving the number of combinations computed from an empty set should return 1 (#1258).",NA
tidyr,1,65,65,FALSE,`drop_na()` no longer drops missing values from all columns when a tidyselect expression that results in 0 columns being selected is used (#1227).,NA
tidyr,1,66,66,FALSE,`fill()` now treats `NaN` like any other missing value (#982).,NA
tidyr,1,67,67,FALSE,"`expand_grid()` is now about twice as fast and `pivot_wider()` is a bit faster (@mgirlich, #1130).",NA
tidyr,1,68,68,FALSE,"`unchop()` is now much faster, which propagates through to various functions, such as `unnest()`, `unnest_longer()`, `unnest_wider()`, and `separate_rows()` (@mgirlich, @DavisVaughan, #1127).",NA
tidyr,1,69,69,FALSE,"`unnest()` is now much faster (@mgirlich, @DavisVaughan, #1127).",NA
tidyr,1,70,70,FALSE,"`unnest()` no longer allows unnesting a list-col containing a mix of vector and data frame elements. Previously, this only worked by accident, and is considered an off-label usage of `unnest()` that has now become an error.",NA
tidyr,1,71,71,FALSE,"tidyr verbs no longer have ""default"" methods for lazyeval fallbacks. This means that you'll get clearer error messages (#1036).",NA
tidyr,1,72,72,FALSE,"`uncount()` error for non-integer weights and gives a clearer error message for negative weights (@mgirlich, #1069).",NA
tidyr,1,73,73,FALSE,"You can once again unnest dates (#1021, #1089).",NA
tidyr,1,74,74,FALSE,"`pivot_wider()` works with data.table and empty key variables (@mgirlich, #1066).",NA
tidyr,1,75,75,FALSE,"`separate_rows()` works for factor columns (@mgirlich, #1058).",NA
tidyr,1,76,76,FALSE,`separate_rows()` returns to 1.1.0 behaviour for empty strings,NA
tidyr,1,77,77,FALSE,New tidyr logo!,NA
tidyr,1,78,78,FALSE,"stringi dependency has been removed; this was a substantial dependency that make tidyr hard to compile in resource constrained environments (@rjpat, #936).",NA
tidyr,1,79,79,FALSE,Replace Rcpp with cpp11. See <https://cpp11.r-lib.org/articles/motivations.html> for reasons why.,NA
tidyr,1,80,80,FALSE,"`pivot_longer()`, `hoist()`, `unnest_wider()`, and `unnest_longer()` gain new `transform` arguments; these allow you to transform values ""in flight"". They are partly needed because vctrs coercion rules have become stricter, but they give you greater flexibility than was available previously (#921).",NA
tidyr,1,81,81,FALSE,Arguments that use tidy selection syntax are now clearly documented and have been updated to use tidyselect 1.1.0 (#872).,NA
tidyr,1,82,82,FALSE,"Both `pivot_wider()` and `pivot_longer()` are considerably more performant, thanks largely to improvements in the underlying vctrs code (#790, @DavisVaughan).",NA
tidyr,1,83,83,FALSE,`pivot_longer()` now supports `names_to = character()` which prevents the name column from being created (#961).,NA
tidyr,1,83,84,TRUE,"```
df <- tibble(id = 1:3, x_1 = 1:3, x_2 = 4:6)  
df %>% pivot_longer(-id, names_to = character())
```",NA
tidyr,1,84,85,FALSE,`pivot_longer()` no longer creates a `.copy` variable in the presence of duplicate column names. This makes it more consistent with the handling of non-unique specs.,NA
tidyr,1,85,86,FALSE,"`pivot_longer()` automatically disambiguates non-unique ouputs, which can occur when the input variables include some additional component that you don't care about and want to discard (#792, #793).",NA
tidyr,1,85,87,TRUE,"```
df <- tibble(id = 1:3, x_1 = 1:3, x_2 = 4:6)  
df %>% pivot_longer(-id, names_pattern = ""(.)_."")
df %>% pivot_longer(-id, names_sep = ""_"", names_to = c(""name"", NA))
df %>% pivot_longer(-id, names_sep = ""_"", names_to = c("".value"", NA))
```",NA
tidyr,1,86,88,FALSE,"`pivot_wider()` gains a `names_sort` argument which allows you to sort column names in order. The default, `FALSE`, orders columms by their first appearance (#839). In a future version, I'll consider changing the default to `TRUE`.",NA
tidyr,1,87,89,FALSE,`pivot_wider()` gains a `names_glue` argument that allows you to construct output column names with a glue specification.,NA
tidyr,1,88,90,FALSE,"`pivot_wider()` arguments `values_fn` and `values_fill` can now be single values; you now only need to use a named list if you want to use different values for different value columns (#739, #746). They also get improved errors if they're not of the expected type.",NA
tidyr,1,89,91,FALSE,"`hoist()` now automatically names pluckers that are a single string (#837). It error if you use duplicated column names (@mgirlich, #834), and now uses `rlang::list2()` behind the scenes (which means that you can now use `!!!` and `:=`) (#801).",NA
tidyr,1,90,92,FALSE,"`unnest_longer()`, `unnest_wider()`, and `hoist()` do a better job simplifying list-cols. They no longer add unneeded `unspecified()` when the result is still a list (#806), and work when the list contains non-vectors (#810, #848).",NA
tidyr,1,91,93,FALSE,"`unnest_wider(names_sep = """")` now provides default names for unnamed inputs, suppressing the many previous name repair messages (#742).",NA
tidyr,1,92,94,FALSE,"`pack()` and `nest()` gains a `.names_sep` argument allows you to strip outer names from inner names, in symmetrical way to how the same argument to `unpack()` and `unnest()` combines inner and outer names (#795, #797).",NA
tidyr,1,93,95,FALSE,"`unnest_wider()` and `unnest_longer()` can now unnest `list_of` columns. This is important for unnesting columns created from `nest()` and with `pivot_wider()`, which will create `list_of` columns if the id columns are non-unique (#741).",NA
tidyr,1,94,96,FALSE,"`chop()` now creates list-columns of class `vctrs::list_of()`. This helps keep track of the type in case the chopped data frame is empty, allowing `unchop()` to reconstitute a data frame with the correct number and types of column even when there are no observations.",NA
tidyr,1,95,97,FALSE,`drop_na()` now preserves attributes of unclassed vectors (#905).,NA
tidyr,1,96,98,FALSE,"`expand()`, `expand_grid()`, `crossing()`, and `nesting()` once again evaluate their inputs iteratively, so you can refer to freshly created columns, e.g. `crossing(x = seq(-2, 2), y = x)` (#820).",NA
tidyr,1,97,99,FALSE,"`expand()`, `expand_grid()`, `crossing()`, and `nesting()` gain a `.name_repair` giving you control over their name repair strategy (@jeffreypullin, #798).",NA
tidyr,1,98,100,FALSE,"`extract()` lets you use `NA` in `into`, as documented (#793).",NA
tidyr,1,99,101,FALSE,"`extract()`, `separate()`, `hoist()`, `unnest_longer()`, and `unnest_wider()` give a better error message if `col` is missing (#805).",NA
tidyr,1,100,102,FALSE,`pack()`'s first argument is now `.data` instead of `data` (#759).,NA
tidyr,1,101,103,FALSE,`pivot_longer()` now errors if `values_to` is not a length-1 character vector (#949).,NA
tidyr,1,102,104,FALSE,`pivot_longer()` and `pivot_wider()` are now generic so implementations can be provided for objects other than data frames (#800).,NA
tidyr,1,103,105,FALSE,`pivot_wider()` can now pivot data frame columns (#926),NA
tidyr,1,104,106,FALSE,"`unite(na.rm = TRUE)` now works for all types of variable, not just character vectors (#765).",NA
tidyr,1,105,107,FALSE,`unnest_wider()` gives a better error message if you attempt to unnest multiple columns (#740).,NA
tidyr,1,106,108,FALSE,`unnest_auto()` works when the input data contains a column called `col` (#959).,NA
tidyr,1,109,111,FALSE,"`nest()` and `unnest()` have new syntax. The majority of existing usage should be automatically translated to the new syntax with a warning. If that doesn't work, put this in your script to use the old versions until you can take a closer look and update your code:",NA
tidyr,1,109,112,TRUE,"```
library(tidyr)
nest <- nest_legacy
unnest <- unnest_legacy
```",NA
tidyr,1,110,113,FALSE,"`nest()` now preserves grouping, which has implications for downstream calls to group-aware functions, such as `dplyr::mutate()` and `filter()`.",NA
tidyr,1,111,114,FALSE,The first argument of `nest()` has changed from `data` to `.data`.,NA
tidyr,1,112,115,FALSE,`unnest()` uses the [emerging tidyverse standard](https://www.tidyverse.org/blog/2019/01/tibble-2.0.1/#name-repair) to disambiguate unique names. Use `names_repair = tidyr_legacy` to request the previous approach.,NA
tidyr,1,113,116,FALSE,"`unnest_()`/`nest_()` and the lazyeval methods for `unnest()`/`nest()` are now defunct. They have been deprecated for some time, and, since the interface has changed, package authors will need to update to avoid deprecation warnings. I think one clean break should be less work for everyone. All other lazyeval functions have been formally deprecated, and will be made defunct in the next major release. (See [lifecycle vignette](https://lifecycle.r-lib.org/articles/stages.html) for details on deprecation stages).",NA
tidyr,1,114,117,FALSE,"`crossing()` and `nesting()` now return 0-row outputs if any input is a length-0 vector. If you want to preserve the previous behaviour which silently dropped these inputs, you should convert empty vectors to `NULL`. (More discussion on this general pattern at https://github.com/tidyverse/principles/issues/24)",NA
tidyr,1,115,119,FALSE,"New `keep_empty` parameter ensures that every row in the input gets at least one row in the output, inserting missing values as needed (#358).",NA
tidyr,1,116,120,FALSE,Provides `names_sep` argument to control how inner and outer column names are combined.,NA
tidyr,1,117,121,FALSE,"Uses standard tidyverse name-repair rules, so by default you will get an error if the output would contain multiple columns with the same name. You can override by using `name_repair` (#514).",NA
tidyr,1,118,122,FALSE,Now supports `NULL` entries (#436).,NA
tidyr,1,119,123,FALSE,`pack()` and `unpack()` allow you to pack and unpack columns into data frame columns (#523).,NA
tidyr,1,120,124,FALSE,`chop()` and `unchop()` chop up rows into sets of list-columns.,NA
tidyr,1,121,125,FALSE,"New `expand_grid()`, a tidy version of `expand.grid()`, is lower-level than the existing `expand()` and `crossing()` functions, as it takes individual vectors, and does not sort or uniquify them.",NA
tidyr,1,122,126,FALSE,"`crossing()`, `nesting()`, and `expand()` have been rewritten to use the vctrs package. This should not affect much existing code, but considerably simplies the implementation and ensures that these functions work consistently across all generalised vectors (#557). As part of this alignment, these functions now only drop `NULL` inputs, not any 0-length vector.",NA
tidyr,1,123,127,FALSE,"`full_seq()` now also works when gaps between observations are shorter than the given `period`, but are within the tolerance given by `tol`. Previously, gaps between consecutive observations had to be in the range \[`period`, `period + tol`\]; gaps can now be in the range \[`period - tol`, `period + tol`\] (@ha0ye, #657).",NA
tidyr,1,124,128,FALSE,"tidyr now re-exports `tibble()`, `as_tibble()`, and `tribble()`, as well as the tidyselect helpers (`starts_with()`, `ends_width()`, ...). This makes generating documentation, reprexes, and tests easier, and makes tidyr easier to use without also attaching dplyr.",NA
tidyr,1,125,129,FALSE,All functions that take `...` have been instrumented with functions from the [ellipsis](https://github.com/r-lib/ellipsis/) package to warn if you've supplied arguments that are ignored (typically because you've misspelled an argument name) (#573).,NA
tidyr,1,126,130,FALSE,"`complete()` now uses `full_join()` so that all levels are preserved even when not all levels are specified (@Ryo-N7, #493).",NA
tidyr,1,127,131,FALSE,"`crossing()` now takes the unique values of data frame inputs, not just vector inputs (#490).",NA
tidyr,1,128,132,FALSE,`gather()` throws an error if a column is a data frame (#553).,NA
tidyr,1,129,133,FALSE,`extract()` (and hence `pivot_longer()`) can extract multiple input values into a single output column (#619).,NA
tidyr,1,130,134,FALSE,`fill()` is now implemented using `dplyr::mutate_at()`. This radically simplifies the implementation and considerably improves performance when working with grouped data (#520).,NA
tidyr,1,131,135,FALSE,"`fill()` now accepts `downup` and `updown` as fill directions (@coolbutuseless, #505).",NA
tidyr,1,132,136,FALSE,"`unite()` gains `na.rm` argument, making it easier to remove missing values prior to uniting values together (#203)",NA
tidyr,1,133,137,FALSE,"`crossing()` preserves factor levels (#410), now works with list-columns (#446, @SamanthaToet). (These also help `expand()` which is built on top of `crossing()`)",NA
tidyr,1,134,138,FALSE,`nest()` is compatible with dplyr 0.8.0.,NA
tidyr,1,135,139,FALSE,`spread()` works when the id variable has names (#525).,NA
tidyr,1,136,140,FALSE,"`unnest()` preserves column being unnested when input is zero-length (#483), using `list_of()` attribute to correctly restore columns, where possible.",NA
tidyr,1,137,141,FALSE,"`unnest()` will run with named and unnamed list-columns of same length (@hlendway, #460).",NA
tidyr,1,138,142,FALSE,"`separate()` now accepts `NA` as a column name in the `into` argument to denote columns which are omitted from the result. (@markdly, #397).",NA
tidyr,1,139,143,FALSE,Minor updates to ensure compatibility with dependencies.,NA
tidyr,1,140,144,FALSE,"`unnest()` weakens test of ""atomicity"" to restore previous behaviour",NA
tidyr,1,141,145,FALSE,"There are no deliberate breaking changes in this release. However, a number of packages are failing with errors related to numbers of elements in columns, and row names. It is possible that these are accidental API changes or new bugs. If you see such an error in your package, I would sincerely appreciate a minimal reprex.",NA
tidyr,1,142,146,FALSE,"`separate()` now correctly uses -1 to refer to the far right position, instead of -2. If you depended on this behaviour, you'll need to switch on `packageVersion(""tidyr"") > ""0.7.2""`",NA
tidyr,1,143,147,FALSE,Increased test coverage from 84% to 99%.,NA
tidyr,1,144,148,FALSE,`uncount()` performs the inverse operation of `dplyr::count()` (#279),NA
tidyr,1,145,149,FALSE,`complete(data)` now returns `data` rather than throwing an error (#390). `complete()` with zero-length completions returns original input (#331).,NA
tidyr,1,146,150,FALSE,`crossing()` preserves `NA`s (#364).,NA
tidyr,1,147,151,FALSE,`expand()` with empty input gives empty data frame instead of `NULL` (#331).,NA
tidyr,1,148,152,FALSE,"`expand()`, `crossing()`, and `complete()` now complete empty factors instead of dropping them (#270, #285)",NA
tidyr,1,149,153,FALSE,`extract()` has a better error message if `regex` does not contain the expected number of groups (#313).,NA
tidyr,1,150,154,FALSE,"`drop_na()` no longer drops columns (@jennybryan, #245), and works with list-cols (#280). Equivalent of `NA` in a list column is any empty (length 0) data structure.",NA
tidyr,1,151,155,FALSE,"`nest()` is now faster, especially when a long data frame is collapsed into a nested data frame with few rows.",NA
tidyr,1,152,156,FALSE,`nest()` on a zero-row data frame works as expected (#320).,NA
tidyr,1,153,157,FALSE,`replace_na()` no longer complains if you try and replace missing values in variables not present in the data (#356).,NA
tidyr,1,154,158,FALSE,"`replace_na()` now also works with vectors (#342, @flying-sheep), and can replace `NULL` in list-columns. It throws a better error message if you attempt to replace with something other than length 1.",NA
tidyr,1,155,159,FALSE,"`separate()` no longer checks that `...` is empty, allowing methods to make use of it. This check was added in tidyr 0.4.0 (2016-02-02) to deprecate previous behaviour where `...` was passed to `strsplit()`.",NA
tidyr,1,156,160,FALSE,`separate()` and `extract()` now insert columns in correct position when `drop = TRUE` (#394).,NA
tidyr,1,157,161,FALSE,"`separate()` now works correctly counts from RHS when using negative integer `sep` values (@markdly, #315).",NA
tidyr,1,158,162,FALSE,`separate()` gets improved warning message when pieces aren't as expected (#375).,NA
tidyr,1,159,163,FALSE,"`separate_rows()` supports list columns (#321), and works with empty tibbles.",NA
tidyr,1,160,164,FALSE,`spread()` now consistently returns 0 row outputs for 0 row inputs (#269).,NA
tidyr,1,161,165,FALSE,`spread()` now works when `key` column includes `NA` and `drop` is `FALSE` (#254).,NA
tidyr,1,162,166,FALSE,`spread()` no longer returns tibbles with row names (#322).,NA
tidyr,1,163,167,FALSE,"`spread()`, `separate()`, `extract()` (#255), and `gather()` (#347) now replace existing variables rather than creating an invalid data frame with duplicated variable names (matching the semantics of mutate).",NA
tidyr,1,164,168,FALSE,`unite()` now works (as documented) if you don't supply any variables (#355).,NA
tidyr,1,165,169,FALSE,`unnest()` gains `preserve` argument which allows you to preserve list columns without unnesting them (#328).,NA
tidyr,1,166,170,FALSE,`unnest()` can unnested list-columns contains lists of lists (#278).,NA
tidyr,1,167,171,FALSE,`unnest(df)` now works if `df` contains no list-cols (#344),NA
tidyr,1,168,172,FALSE,"The SE variants `gather_()`, `spread_()` and `nest_()` now treat non-syntactic names in the same way as pre tidy eval versions of tidyr (#361).",NA
tidyr,1,169,173,FALSE,Fix tidyr bug revealed by R-devel.,NA
tidyr,1,170,174,FALSE,"If you see error messages about objects or functions not found, it is likely because the selecting functions are now stricter in their arguments An example of selecting function is `gather()` and its `...` argument. This change makes the code more robust by disallowing ambiguous scoping. Consider the following code:",NA
tidyr,1,170,175,TRUE,"```
x <- 3
df <- tibble(w = 1, x = 2, y = 3)
gather(df, ""variable"", ""value"", 1:x)
```",NA
tidyr,1,170,175,FALSE,"Does it select the first three columns (using the `x` defined in the global environment), or does it select the first two columns (using the column named `x`)? To solve this ambiguity, we now make a strict distinction between data and context expressions. A data expression is either a bare name or an expression like `x:y` or `c(x, y)`. In a data expression, you can only refer to columns from the data frame. Everything else is a context expression in which you can only refer to objects that you have defined with `<-`. In practice this means that you can no longer refer to contextual objects like this:",NA
tidyr,1,170,176,TRUE,"```
mtcars %>% gather(var, value, 1:ncol(mtcars))

x <- 3
mtcars %>% gather(var, value, 1:x)
mtcars %>% gather(var, value, -(1:x))
```",NA
tidyr,1,170,176,FALSE,"You now have to be explicit about where to find objects. To do so, you can use the quasiquotation operator `!!` which will evaluate its argument early and inline the result:",NA
tidyr,1,170,177,TRUE,"```
mtcars %>% gather(var, value, !! 1:ncol(mtcars))
mtcars %>% gather(var, value, !! 1:x)
mtcars %>% gather(var, value, !! -(1:x))
```",NA
tidyr,1,170,177,FALSE,An alternative is to turn your data expression into a context expression by using `seq()` or `seq_len()` instead of `:`. See the section on tidyselect for more information about these semantics.,NA
tidyr,1,171,178,FALSE,"Following the switch to tidy evaluation, you might see warnings about the ""variable context not set"". This is most likely caused by supplyng helpers like `everything()` to underscored versions of tidyr verbs. Helpers should be always be evaluated lazily. To fix this, just quote the helper with a formula: `drop_na(df, ~everything())`.",NA
tidyr,1,172,179,FALSE,The selecting functions are now stricter when you supply integer positions. If you see an error along the lines of,NA
tidyr,1,172,180,TRUE,"```
`-0.949999999999999`, `-0.940000000000001`, ... must resolve to
integer column positions, not a double vector
```",NA
tidyr,1,172,180,FALSE,please round the positions before supplying them to tidyr. Double vectors are fine as long as they are rounded.,NA
tidyr,1,173,181,FALSE,"The arguments for selecting a single variable now support all features from `dplyr::pull()`. You can supply a name or a position, including negative positions.",NA
tidyr,1,174,182,FALSE,"Multiple variables are now selected a bit differently. We now make a strict distinction between data and context expressions. A data expression is either a bare name of an expression like `x:y` or `c(x, y)`. In a data expression, you can only refer to columns from the data frame. Everything else is a context expression in which you can only refer to objects that you have defined with `<-`. You can still refer to contextual objects in a data expression by being explicit. One way of being explicit is to unquote a variable from the environment with the tidy eval operator `!!`:",NA
tidyr,1,174,183,TRUE,"```
x <- 2
drop_na(df, 2)     # Works fine
drop_na(df, x)     # Object 'x' not found
drop_na(df, !! x)  # Works as if you had supplied 2
```",NA
tidyr,1,174,183,FALSE,"On the other hand, select helpers like `start_with()` are context expressions. It is therefore easy to refer to objects and they will never be ambiguous with data columns:",NA
tidyr,1,174,184,TRUE,"```
x <- ""d""
drop_na(df, starts_with(x))
```",NA
tidyr,1,174,184,FALSE,While these special rules is in contrast to most dplyr and tidyr verbs (where both the data and the context are in scope) they make sense for selecting functions and should provide more robust and helpful semantics.,NA
tidyr,1,176,186,FALSE,Register C functions,NA
tidyr,1,177,187,FALSE,Added package docs,NA
tidyr,1,178,188,FALSE,Patch tests to be compatible with dev dplyr.,NA
tidyr,1,179,189,FALSE,Patch test to be compatible with dev tibble,NA
tidyr,1,180,190,FALSE,Changed deprecation message of `extract_numeric()` to point to `readr::parse_number()` rather than `readr::parse_numeric()`,NA
tidyr,1,181,191,FALSE,"`drop_na()` removes observations which have `NA` in the given variables. If no variables are given, all variables are considered (#194, @janschulz).",NA
tidyr,1,182,192,FALSE,`extract_numeric()` has been deprecated (#213).,NA
tidyr,1,183,193,FALSE,Renamed `table4` and `table5` to `table4a` and `table4b` to make their connection more clear. The `key` and `value` variables in `table2` have been renamed to `type` and `count`.,NA
tidyr,1,184,194,FALSE,"`expand()`, `crossing()`, and `nesting()` now silently drop zero-length inputs.",NA
tidyr,1,185,195,FALSE,`crossing_()` and `nesting_()` are versions of `crossing()` and `nesting()` that take a list as input.,NA
tidyr,1,186,196,FALSE,`full_seq()` works correctly for dates and date/times.,NA
tidyr,1,187,197,FALSE,Restored compatibility with R \< 3.3.0 by avoiding,NA
tidyr,1,188,198,FALSE,`separate_rows()` separates observations with multiple delimited,NA
tidyr,1,189,199,FALSE,`complete()` preserves grouping created by dplyr (#168).,NA
tidyr,1,190,200,FALSE,`expand()` (and hence `complete()`) preserves the ordered attribute of factors (#165).,NA
tidyr,1,191,201,FALSE,"`full_seq()` preserve attributes for dates and date/times (#156), and sequences no longer need to start at 0.",NA
tidyr,1,192,202,FALSE,"`gather()` can now gather together list columns (#175), and `gather_.data.frame(na.rm = TRUE)` now only removes missing values if they're actually present (#173).",NA
tidyr,1,193,203,FALSE,`nest()` returns correct output if every variable is nested (#186).,NA
tidyr,1,194,204,FALSE,"`separate()` fills from right-to-left (not left-to-right!) when fill = ""left"" (#170, @dgrtwo).",NA
tidyr,1,195,205,FALSE,"`separate()` and `unite()` now automatically drop removed variables from grouping (#159, #177).",NA
tidyr,1,196,206,FALSE,"`spread()` gains a `sep` argument. If not-null, this will name columns as ""key`<sep>`{=html}value"". Additionally, if sep is `NULL` missing values will be converted to `<NA>` (#68).",NA
tidyr,1,197,207,FALSE,`spread()` works in the presence of list-columns (#199),NA
tidyr,1,198,208,FALSE,`unnest()` works with non-syntactic names (#190).,NA
tidyr,1,199,209,FALSE,"`unnest()` gains a `sep` argument. If non-null, this will rename the columns of nested data frames to include both the original column name, and the nested column name, separated by `.sep` (#184).",NA
tidyr,1,200,210,FALSE,`unnest()` gains `.id` argument that works the same way as `bind_rows()`. This is useful if you have a named list of data frames or vectors (#125).,NA
tidyr,1,201,211,FALSE,Moved in useful sample datasets from the DSR package.,NA
tidyr,1,202,212,FALSE,Made compatible with both dplyr 0.4 and 0.5.,NA
tidyr,1,203,213,FALSE,tidyr functions that create new columns are more aggresive about re-encoding the column names as UTF-8.,NA
tidyr,1,204,214,FALSE,Fixed bug in `nest()` where nested data was ending up in the wrong,NA
tidyr,1,205,215,FALSE,"`nest()` now produces a single list of data frames called ""data"" rather than a list column for each variable. Nesting variables are not included in nested data frames. It also works with grouped data frames made by `dplyr::group_by()`. You can override the default column name with `.key`.",NA
tidyr,1,206,216,FALSE,"`unnest()` gains a `.drop` argument which controls what happens to other list columns. By default, they're kept if the output doesn't require row duplication; otherwise they're dropped.",NA
tidyr,1,207,217,FALSE,`unnest()` now has `mutate()` semantics for `...` - this allows you to unnest transformed columns more easily. (Previously it used select semantics).,NA
tidyr,1,208,218,FALSE,"`expand()` once again allows you to evaluate arbitrary expressions like `full_seq(year)`. If you were previously using `c()` to created nested combinations, you'll now need to use `nesting()` (#85, #121).",NA
tidyr,1,209,219,FALSE,`nesting()` and `crossing()` allow you to create nested and crossed data frames from individual vectors. `crossing()` is similar to `base::expand.grid()`,NA
tidyr,1,210,220,FALSE,"`full_seq(x, period)` creates the full sequence of values from `min(x)` to `max(x)` every `period` values.",NA
tidyr,1,211,221,FALSE,`fill()` fills in `NULL`s in list-columns.,NA
tidyr,1,212,222,FALSE,`fill()` gains a direction argument so that it can fill either upwards or downwards (#114).,NA
tidyr,1,213,223,FALSE,"`gather()` now stores the key column as character, by default. To revert to the previous behaviour of using a factor (which allows you to preserve the ordering of the columns), use `key_factor = TRUE` (#96).",NA
tidyr,1,214,224,FALSE,"All tidyr verbs do the right thing for grouped data frames created by `group_by()` (#122, #129, #81).",NA
tidyr,1,215,225,FALSE,`seq_range()` has been removed. It was never used or announced.,NA
tidyr,1,216,226,FALSE,"`spread()` once again creates columns of mixed type when `convert = TRUE` (#118, @jennybc). `spread()` with `drop = FALSE` handles zero-length factors (#56). `spread()`ing a data frame with only key and value columns creates a one row output (#41).",NA
tidyr,1,217,227,FALSE,"`unite()` now removes old columns before adding new (#89, @krlmlr).",NA
tidyr,1,218,228,FALSE,"`separate()` now warns if defunct ... argument is used (#151, @krlmlr).",NA
tidyr,1,220,230,FALSE,"New `complete()` provides a wrapper around `expand()`, `left_join()` and `replace_na()` for a common task: completing a data frame with missing combinations of variables.",NA
tidyr,1,221,231,FALSE,`fill()` fills in missing values in a column with the last non-missing value (#4).,NA
tidyr,1,222,232,FALSE,New `replace_na()` makes it easy to replace missing values with something meaningful for your data.,NA
tidyr,1,223,233,FALSE,`nest()` is the complement of `unnest()` (#3).,NA
tidyr,1,224,234,FALSE,"`unnest()` can now work with multiple list-columns at the same time. If you don't supply any columns names, it will unlist all list-columns (#44). `unnest()` can also handle columns that are lists of data frames (#58).",NA
tidyr,1,225,235,FALSE,tidyr no longer depends on reshape2. This should fix issues if you also try to load reshape (#88).,NA
tidyr,1,226,236,FALSE,`%>%` is re-exported from magrittr.,NA
tidyr,1,227,237,FALSE,`expand()` now supports nesting and crossing (see examples for details). This comes at the expense of creating new variables inline (#46).,NA
tidyr,1,228,238,FALSE,`expand_` does SE evaluation correctly so you can pass it a character vector of columns names (or list of formulas etc) (#70).,NA
tidyr,1,229,239,FALSE,`extract()` is 10x faster because it now uses stringi instead of base R regular expressions. It also returns NA instead of throwing an error if the regular expression doesn't match (#72).,NA
tidyr,1,230,240,FALSE,`extract()` and `separate()` preserve character vectors when `convert` is TRUE (#99).,NA
tidyr,1,231,241,FALSE,"The internals of `spread()` have been rewritten, and now preserve all attributes of the input `value` column. This means that you can now spread date (#62) and factor (#35) inputs.",NA
tidyr,1,232,242,FALSE,`spread()` gives a more informative error message if `key` or `value` don't exist in the input data (#36).,NA
tidyr,1,233,243,FALSE,"`separate()` only displays the first 20 failures (#50). It has finer control over what happens if there are two few matches: you can fill with missing values on either the ""left"" or the ""right"" (#49). `separate()` no longer throws an error if the number of pieces aren't as expected - instead it uses drops extra values and fills on the right and gives a warning.",NA
tidyr,1,234,244,FALSE,"If the input is NA `separate()` and `extract()` both return silently return NA outputs, rather than throwing an error. (#77)",NA
tidyr,1,235,245,FALSE,Experimental `unnest()` method for lists has been removed.,NA
tidyr,1,236,246,FALSE,Experimental `expand()` function (#21).,NA
tidyr,1,237,247,FALSE,"Experiment `unnest()` function for converting named lists into data frames. (#3, #22)",NA
tidyr,1,238,248,FALSE,`extract_numeric()` preserves negative signs (#20).,NA
tidyr,1,239,249,FALSE,"`gather()` has better defaults if `key` and `value` are not supplied. If `...` is ommitted, `gather()` selects all columns (#28). Performance is now comparable to `reshape2::melt()` (#18).",NA
tidyr,1,240,250,FALSE,"`separate()` gains `extra` argument which lets you control what happens to extra pieces. The default is to throw an ""error"", but you can also ""merge"" or ""drop"".",NA
tidyr,1,241,251,FALSE,"`spread()` gains `drop` argument, which allows you to preserve missing factor levels (#25). It converts factor value variables to character vectors, instead of embedding a matrix inside the data frame (#35).",NA
xml2,1,1,1,FALSE,Hadley Wickham is now (again) the maintainer.,NA
xml2,1,2,2,FALSE,xml2 has been re-licensed as MIT (#317).,NA
xml2,1,3,3,FALSE,`xml_find_all.xml_node()` fails more informatively the `xpath` parameter is the wrong type (@michaelchirico),NA
xml2,1,4,4,FALSE,"`xml_find_all.xml_nodeset()` gains a `flatten` argument to control whether to return a single nodeset or a list of nodesets (#311, @jakejh)",NA
xml2,1,5,5,FALSE,"`write_xml()` and `write_html()` now return NULL invisibly, as they did prior to version 1.3.0 (#307)",NA
xml2,1,6,6,FALSE,"`XPtr` gets explicit copy constructor and assignment operator definitions, which were two missing components of the [Rule of three](https://en.wikipedia.org/wiki/Rule_of_three_(C%2B%2B_programming)) (@michaelchirico)",NA
xml2,1,7,7,FALSE,Windows: update to libxml2 2.9.10 and libxslt 1.1.34 and add ucrt libs,NA
xml2,1,8,8,FALSE,`read_html()` and `read_xml()` now error if passed strings of length greater than one (#121),NA
xml2,1,9,9,FALSE,`read_xml.raw()` had an inadvertent regression in 1.3.0 and is now again fixed (#300),NA
xml2,1,10,10,FALSE,"Compilation fix on macOS 10.15.4 (@kevinushey, #296)",NA
xml2,1,11,11,FALSE,`read_html()` now again works with HTML files with non-ASCII,NA
xml2,1,13,13,FALSE,Fix compilation issue on macOS versions after High Sierra when not,NA
xml2,1,14,14,FALSE,"Fix potential dangling pointer with internal `asXmlChar()` function (@michaelquinn32, #287).",NA
xml2,1,15,15,FALSE,`as_xml_document()` now handles cases with text nodes trailing normal nodes (#274).,NA
xml2,1,16,16,FALSE,"`xml_add_child()` can now create nodes with a `par` attribute. These previously errored due to partial name matching of the `parent` function in the internal `create_node()` function. (@jennybc, #285)",NA
xml2,1,17,17,FALSE,"`libxml2_version()` now returns a semantic version rather than alphanumeric version, so ""2.9.10"" \> ""2.9.9"" (#277)",NA
xml2,1,18,18,FALSE,"Export S4 classes with documentation, so they can be used in other",NA
xml2,1,19,19,FALSE,"xml2 now has a pkgdown site! <https://xml2.r-lib.org> (@jayhesselberth, #211).",NA
xml2,1,20,20,FALSE,Windows: upgrade to libxml2 2.9.8,NA
xml2,1,21,21,FALSE,"print methods now match the type of document, e.g. `read_html()` prints as ""{html_document}"" rather than ""{xml_document}"" (#227)",NA
xml2,1,22,22,FALSE,"Generic xml2 error are now forwarded as R errors. Previously these errors were output to stderr, so could not be suppressed (#209).",NA
xml2,1,23,23,FALSE,"Fix for ICU 59+ defaulting to use char16_t, which is only available in C++11 (#231)",NA
xml2,1,24,24,FALSE,No longer uses the C connections API,NA
xml2,1,25,25,FALSE,Better error message when trying to run `download_xml()` without the curl package installed (#262),NA
xml2,1,26,26,FALSE,xml2 classes are now registered for use with S4 by calling `setOldClass()` (#248),NA
xml2,1,27,27,FALSE,Nodes with nested data type definition entities now work without crashing (#241),NA
xml2,1,28,28,FALSE,Test failure fixed due to behavior change with relative paths in libxml2 2.9.9 (#245).,NA
xml2,1,29,29,FALSE,`read_xml()` now has a better error message when given zero length character inputs (#212).,NA
xml2,1,30,30,FALSE,`read_xml()` and `read_html()` now automatically check if the response succeeded before trying to read from a HTTP response (#255).,NA
xml2,1,31,31,FALSE,`xml_root()` can now create root nodes with namespaces (#239),NA
xml2,1,32,32,FALSE,`xml_set_attr()` no longer crashes if you try to set the same namespace on the same node multiple times (#253).,NA
xml2,1,33,33,FALSE,`xml_set_attr()` now recycles the values if needed (#221),NA
xml2,1,34,34,FALSE,"`xml_structure()` gains a `file` argument, to support writing to a file rather than the console (#244).",NA
xml2,1,35,35,FALSE,`as_list()` on `xml_document` objects did not properly include the root node in the returned list. Previous behavior can be obtained by,NA
xml2,1,36,36,FALSE,`download_xml()` and `download_html()` helper functions to make it easy to download files (#193).,NA
xml2,1,37,37,FALSE,`xml_attr()` can now set attributes with no value (#198).,NA
xml2,1,38,38,FALSE,`xml_serialize()` and `xml_unserialize()` now create file connections when given character input (#179).,NA
xml2,1,39,39,FALSE,"`xml_find_first()` no longer de-duplicates results, so the results are always the same length as the inputs (as documented) (#194).",NA
xml2,1,40,40,FALSE,xml2 can now build using libxml2 2.7.0,NA
xml2,1,41,41,FALSE,Use Rcpp symbol registration and visibility to prevent symbol conflicts on Linux,NA
xml2,1,42,42,FALSE,"`xml_add_child()` now requires less resources to insert a node when called with `.where = 0L` (@heckendorfc, #175).",NA
xml2,1,43,43,FALSE,Fixed failing examples due to a change in an external resource.,NA
xml2,1,44,44,FALSE,This is a small point release addressing installation issues found with older libxml2 versions shipped with RedHat Linux 6 / CentOS 6,NA
xml2,1,45,45,FALSE,`write_xml()` and `write_html()` now accept connections as well as filenames for output. (#157),NA
xml2,1,46,46,FALSE,`xml_add_child()` now takes a `.where` argument specifying where to add the new children. (#138),NA
xml2,1,47,47,FALSE,"`as_xml()` generic function to convert R objects to xml. The most important method is for lists and enables full roundtrip support for going to and back from xml for lists and enables full roundtrip support to and from XML. (#137, #143)",NA
xml2,1,48,48,FALSE,`xml_new_root()` can be used to create a new document and a root node in one step (#131).,NA
xml2,1,49,49,FALSE,`xml_add_parent()` inserts a new node between the node and its parent (#129),NA
xml2,1,50,50,FALSE,"Add `xml_validate()` to validate a document against an xml schema (#31, @jeroenooms).",NA
xml2,1,51,51,FALSE,Export `xml2_types.h` to allow for extension packages such as xslt.,NA
xml2,1,52,52,FALSE,`xml_comment()` allows you to add comment nodes to a document. (#111),NA
xml2,1,53,53,FALSE,`xml_cdata()` allows you to add CDATA nodes to a document. (#128),NA
xml2,1,54,54,FALSE,Add `xml_set_text()` and `xml_set_name()` equivalent to `xml_text<-` and `xml_name<-`. (#130).,NA
xml2,1,55,55,FALSE,"Add `xml_set_attr()` and `xml_set_attrs()` equivalent to `xml_attr<-` and `xml_attrs<-`. (#109, #130)",NA
xml2,1,56,56,FALSE,Add `write_html()` method (#133).,NA
xml2,1,57,57,FALSE,`xml_new_document()` now explicitly sets the encoding (default UTF-8) (#142),NA
xml2,1,58,58,FALSE,Document formatting options for `write_xml()` (#132),NA
xml2,1,59,59,FALSE,Add missing methods for xml_missing objects. (#134),NA
xml2,1,60,60,FALSE,Bugfix for xml_length.xml_nodeset that caused it to fail unconditionally. (#140),NA
xml2,1,61,61,FALSE,`is.na()` now returns `TRUE` for `xml_missing` objects. (#139),NA
xml2,1,62,62,FALSE,Trim non-breaking spaces in `xml_text(trim = TRUE)` (#151).,NA
xml2,1,63,63,FALSE,"Allow setting non-character attributes (values are coerced to characters). (@sjp, #117, #122).",NA
xml2,1,64,64,FALSE,"Fixed return value in call to vapply in xml_integer.xml_nodeset. (@ddiez, #146, #147).",NA
xml2,1,65,65,FALSE,"Allow docs missing a root element to be created and printed. (@sjp, #126, #121).",NA
xml2,1,66,66,FALSE,"xml_add\_\* methods now return invisibly. (@sjp, #124)",NA
xml2,1,67,67,FALSE,"`as_list()` now preserves element names when attributes exist, and escapes XML attributes that conflict with special R attributes (@peterfoley, #115).",NA
xml2,1,68,68,FALSE,"All C++ functions now use `checked_get()` instead of `get()` where possible, so NULL XPtrs properly throw an error rather than crashing. (@jimhester, #101, #104).",NA
xml2,1,69,69,FALSE,"`xml_integer()` and `xml_double()` functions to make it easy to extract integer and double text from nodes (@jimhester, #97, #99).",NA
xml2,1,70,70,FALSE,"xml2 now supports modification and creation of XML nodes. New functions `xml_new_document()`, `xml_new_child()`, `xml_new_sibling()`, `xml_set_namespace()`, , `xml_remove()`, `xml_replace()`, `xml_root()` and replacement methods for `xml_name()`, `xml_attr()`, `xml_attrs()` and `xml_text()` (@jimhester, #9 #76)",NA
xml2,1,71,71,FALSE,"`xml_ns()` now keeps namespace prefixes that point to the same URI (@jimhester, #35, #95).",NA
xml2,1,72,72,FALSE,"`read_xml()` and `read_html()` methods added for `httr::response()` objects. (@jimhester, #63, #93)",NA
xml2,1,73,73,FALSE,"`xml_child()` function to make selecting children a little easier (@jimhester, #23, #94)",NA
xml2,1,74,74,FALSE,"`xml_find_one()` has been deprecated in favor of `xml_find_first()` (@jimhester, #58, #92)",NA
xml2,1,75,75,FALSE,"`xml_read()` functions now default to passing the document's namespace object. Namespace definitions can now be removed as well as added and `xml_ns_strip()` added to remove all default namespaces from a document. (@jimhester, #28, #89)",NA
xml2,1,76,76,FALSE,"`xml_read()` gains a `options` argument to control all available parsing options, including `HUGE` to turn off limits for parsing very large documents and now drops blank text nodes by default, mimicking default behavior of XML package. (@jimhester, #49, #62, #85, #88)",NA
xml2,1,77,77,FALSE,"`xml_write()` expands the path on filenames, so directories can be specified with '\~/' (@jimhester, #86, #80)",NA
xml2,1,78,78,FALSE,"`xml_find_one()` now returns a 'xml_missing' node object if there are 0 matches (@jimhester, #55, #53, hadley/rvest#82).",NA
xml2,1,79,79,FALSE,"`xml_find_num()`, `xml_find_chr()`, `xml_find_lgl()` functions added to return numeric, character and logical results from XPath expressions. (@jimhester, #55)",NA
xml2,1,80,80,FALSE,`xml_name()` and `xml_text()` always correctly encode returned value as UTF-8 (#54).,NA
xml2,1,81,81,FALSE,Improved configure script - now works again on R-devel on windows.,NA
xml2,1,82,82,FALSE,"Compiles with older versions of libxml2.,",NA
xml2,1,83,83,FALSE,Make configure script more cross platform.,NA
xml2,1,84,84,FALSE,Add `xml_length()` to count the number of children (#32).,NA
tidyverse,1,2,2,FALSE,Text version of the citation now lists all authors (#269).,NA
tidyverse,1,3,3,FALSE,All packages have been bumped to their latest versions.,NA
tidyverse,1,4,4,FALSE,Messaging uses modern approach to avoid red text in RStudio (#296).,NA
tidyverse,1,5,5,FALSE,"tidyverse now installs dtplyr (#216), googledrive, and googlesheets4 (#229). All packages have been bumped to their latest versions.",NA
tidyverse,1,6,6,FALSE,License changed to MIT (#235).,NA
tidyverse,1,7,7,FALSE,"The tidyverse now has an associated paper at the [Journal of Open Source Software](https://joss.theoj.org/) that you can use to cite the tidyverse if you use it in a paper - see `citation(""tidyverse"")` for details.",NA
tidyverse,1,8,8,FALSE,"Eliminate repeats in the package list when loading an odd number of packages (#94, #100, @dchiu911)",NA
tidyverse,1,9,9,FALSE,"Packages attached from same library they were initially loaded from (#171, @gabrocsardi)",NA
tidyverse,1,10,10,FALSE,"If conflicted package is loaded, omit display of conflicts. This includes fix to `tidyverse_conflicts()` to avoid accidentally triggering conflicted shims (#136).",NA
tidyverse,1,11,11,FALSE,"`tidyverse_deps()` now succeeds even if a dependency of a dependency is missing (#152, @PoGibas). It no longer includes dependencies that are needed by the tidyverse package but are not strictly part of the tidyverse (i.e. cli, crayon, and rstudioapi).",NA
tidyverse,1,12,12,FALSE,"`tidyverse_deps()` and `tidyverse_update()` gain a new `repos` argument that gets passed to the base function `available.packages()` (@zkamvar, #82)",NA
tidyverse,1,13,13,FALSE,"`tidyverse_packages()` correctly returns packages names (#93, #106, @coatless)",NA
tidyverse,1,14,14,FALSE,`tidyverse_sitrep()` gives you a situation report on your install of the tidyverse (#203),NA
tidyverse,1,15,15,FALSE,Require modern versions of all packages (#85),NA
tidyverse,1,16,16,FALSE,Work with RStudio 1.0 and earlier (#88).,NA
tidyverse,1,17,17,FALSE,"stringr and forcats have been added to the core tidyverse, so they are attached by `library(tidyverse)`.",NA
tidyverse,1,18,18,FALSE,reprex joins the tidyverse to make it easier to create reproducible examples (#47),NA
tidyverse,1,19,19,FALSE,"On attach, tidyverse now makes better use of the horizontal space, printing packages and versions in two columns (#59). It only prints packages that it attaches, not packages that you've already attached. Development versions are highlighted in red. You can now suppress this startup message by setting `options(tidyverse.quiet = TRUE)`",NA
tidyverse,1,20,20,FALSE,"`tidyverse_conflicts()` now prints all conflicts that involve at least one tidyverse package; Previously it only omitted any intra-tidyverse conflicts (#26). I've also tweaked the display of conflicts to hopefully make it more clear which function is the ""winner"".",NA
tidyverse,1,21,21,FALSE,"`tidyverse_update()` now just gives you the code you need to update the packges, since in general it's not possible to update packages that are already loaded.",NA
tidyverse,1,22,22,FALSE,feather is now *actually* in suggests.,NA
tidyverse,1,23,23,FALSE,Moved feather from Imports to Suggests - feather is part of the tidyverse but it's installation requirements (C++11 + little-endian),NA
tidyverse,1,24,24,FALSE,Added a `NEWS.md` file to track changes to the package.,NA
tidyverse,1,25,25,FALSE,Membership changes:,NA
tidyverse,2,25,26,FALSE,"* Removed DBI (since very different API, #16)",Membership changes:
tidyverse,2,25,27,FALSE,* Added feather (#15),Membership changes:
tidyverse,1,28,28,FALSE,"`tidyverse_deps()` and `tidyverse_packages()` are now exported so you can more easily see the make up of the tidyverse, and what package versions you have (#18, #23)",NA
tidyverse,1,29,29,FALSE,`suppressPackageStartupMessages()` now suppresses all messages during loading (#19). `suppressPackageStartupMessages()` is called automatically for all tidyverse packages (#27).,NA
fake_package,1,1,1,FALSE,A new bullet in here,NA
fake_package,1,2,2,FALSE,A bullet with *italic text*,NA
fake_package,1,3,3,FALSE,This is a bullet which is edited,NA
fake_package,1,4,4,FALSE,Another bullet ...,NA
fake_package,2,4,5,FALSE,* With 2 sub-bullets,Another bullet ...
fake_package,2,4,6,FALSE,* Here's the second one,Another bullet ...
